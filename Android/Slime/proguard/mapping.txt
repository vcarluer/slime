com.badlogic.gdx.math.MathUtils -> com.badlogic.gdx.a.a:
    float[] sin -> a
    float[] cos -> b
    int ATAN2_DIM -> d
    float INV_ATAN2_DIM_MINUS_1 -> e
    float[] atan2 -> f
    java.util.Random random -> c
    double BIG_ENOUGH_CEIL -> g
    int random$134621() -> a
    int nextPowerOfTwo(int) -> a
com.badlogic.gdx.math.Vector2 -> com.badlogic.gdx.a.b:
    com.badlogic.gdx.math.Vector2 tmp -> a
    com.badlogic.gdx.math.Vector2 X -> b
    com.badlogic.gdx.math.Vector2 Y -> c
    com.badlogic.gdx.math.Vector2 Zero -> d
    float x -> e
    float y -> f
    float len() -> a
    com.badlogic.gdx.math.Vector2 set(com.badlogic.gdx.math.Vector2) -> a
    com.badlogic.gdx.math.Vector2 set(float,float) -> a
    com.badlogic.gdx.math.Vector2 nor() -> b
    com.badlogic.gdx.math.Vector2 mul(float) -> a
    float dst(com.badlogic.gdx.math.Vector2) -> b
    java.lang.String toString() -> toString
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.badlogic.gdx.physics.box2d.Body -> com.badlogic.gdx.physics.box2d.Body:
    long addr -> a
    float[] tmp -> g
    com.badlogic.gdx.physics.box2d.World world -> h
    java.util.ArrayList fixtures -> i
    java.util.ArrayList joints -> b
    java.lang.Object userData -> j
    com.badlogic.gdx.physics.box2d.Transform transform -> k
    com.badlogic.gdx.math.Vector2 position -> l
    com.badlogic.gdx.math.Vector2 worldCenter -> m
    com.badlogic.gdx.math.Vector2 localCenter -> n
    com.badlogic.gdx.math.Vector2 linearVelocity -> o
    com.badlogic.gdx.physics.box2d.MassData massData -> p
    com.badlogic.gdx.math.Vector2 localPoint -> q
    com.badlogic.gdx.math.Vector2 worldVector -> r
    com.badlogic.gdx.math.Vector2 localPoint2 -> c
    com.badlogic.gdx.math.Vector2 localVector -> d
    com.badlogic.gdx.math.Vector2 linVelWorld -> e
    com.badlogic.gdx.math.Vector2 linVelLoc -> f
    void reset(long) -> a
    com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.FixtureDef) -> a
    long jniCreateFixture(long,long,float,float,float,boolean,short,short,short) -> jniCreateFixture
    com.badlogic.gdx.physics.box2d.Fixture createFixture(com.badlogic.gdx.physics.box2d.Shape,float) -> a
    long jniCreateFixture(long,long,float) -> jniCreateFixture
    void destroyFixture(com.badlogic.gdx.physics.box2d.Fixture) -> a
    void jniDestroyFixture(long,long) -> jniDestroyFixture
    void setTransform(com.badlogic.gdx.math.Vector2,float) -> a
    void jniSetTransform(long,float,float,float) -> jniSetTransform
    com.badlogic.gdx.math.Vector2 getPosition() -> a
    void jniGetPosition(long,float[]) -> jniGetPosition
    float getAngle() -> b
    float jniGetAngle(long) -> jniGetAngle
    void setLinearVelocity(com.badlogic.gdx.math.Vector2) -> a
    void jniSetLinearVelocity(long,float,float) -> jniSetLinearVelocity
    com.badlogic.gdx.math.Vector2 getLinearVelocity() -> c
    void jniGetLinearVelocity(long,float[]) -> jniGetLinearVelocity
    float getAngularVelocity() -> d
    float jniGetAngularVelocity(long) -> jniGetAngularVelocity
    void applyLinearImpulse(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void jniApplyLinearImpulse(long,float,float,float,float) -> jniApplyLinearImpulse
    void resetMassData() -> e
    void jniResetMassData(long) -> jniResetMassData
    com.badlogic.gdx.math.Vector2 getLocalPoint(com.badlogic.gdx.math.Vector2) -> b
    void jniGetLocalPoint(long,float,float,float[]) -> jniGetLocalPoint
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType getType() -> f
    int jniGetType(long) -> jniGetType
    void setActive(boolean) -> a
    void jniSetActive(long,boolean) -> jniSetActive
    java.util.ArrayList getFixtureList() -> g
    java.util.ArrayList getJointList() -> h
    java.lang.Object getUserData() -> i
    void setUserData(java.lang.Object) -> a
com.badlogic.gdx.physics.box2d.BodyDef -> com.badlogic.gdx.physics.box2d.a:
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType type -> a
    com.badlogic.gdx.math.Vector2 position -> b
    float angle -> c
    com.badlogic.gdx.math.Vector2 linearVelocity -> d
    float angularVelocity -> e
    float linearDamping -> f
    float angularDamping -> g
    boolean allowSleep -> h
    boolean awake -> i
    boolean fixedRotation -> j
    boolean bullet -> k
    boolean active -> l
    float gravityScale -> m
com.badlogic.gdx.physics.box2d.BodyDef$BodyType -> com.badlogic.gdx.physics.box2d.b:
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType StaticBody -> a
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType KinematicBody -> b
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType DynamicBody -> c
    int value -> d
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] ENUM$VALUES -> e
    int getValue() -> a
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType[] values() -> values
    com.badlogic.gdx.physics.box2d.BodyDef$BodyType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.physics.box2d.Contact -> com.badlogic.gdx.physics.box2d.c:
    long addr -> a
    com.badlogic.gdx.physics.box2d.World world -> b
    com.badlogic.gdx.physics.box2d.WorldManifold worldManifold -> c
    float[] tmp -> d
com.badlogic.gdx.physics.box2d.ContactFilter -> com.badlogic.gdx.physics.box2d.d:
com.badlogic.gdx.physics.box2d.ContactImpulse -> com.badlogic.gdx.physics.box2d.e:
    com.badlogic.gdx.physics.box2d.World world -> a
    long addr -> b
    float[] tmp -> c
    float[] normalImpulses -> d
    float[] tangentImpulses -> e
com.badlogic.gdx.physics.box2d.ContactListener -> com.badlogic.gdx.physics.box2d.f:
com.badlogic.gdx.physics.box2d.EdgeShape -> com.badlogic.gdx.physics.box2d.EdgeShape:
    float[] vertex -> a
    long newEdgeShape() -> newEdgeShape
    void set(com.badlogic.gdx.math.Vector2,com.badlogic.gdx.math.Vector2) -> a
    void jniSet(long,float,float,float,float) -> jniSet
com.badlogic.gdx.physics.box2d.Filter -> com.badlogic.gdx.physics.box2d.g:
    short categoryBits -> a
    short maskBits -> b
    short groupIndex -> c
com.badlogic.gdx.physics.box2d.Fixture -> com.badlogic.gdx.physics.box2d.Fixture:
    com.badlogic.gdx.physics.box2d.Body body -> d
    long addr -> a
    com.badlogic.gdx.physics.box2d.Shape shape -> b
    java.lang.Object userData -> c
    short[] tmp -> e
    com.badlogic.gdx.physics.box2d.Filter filter -> f
    void reset(com.badlogic.gdx.physics.box2d.Body,long) -> a
    void setSensor$1385ff() -> a
    void jniSetSensor(long,boolean) -> jniSetSensor
    void setFilterData(com.badlogic.gdx.physics.box2d.Filter) -> a
    void jniSetFilterData(long,short,short,short) -> jniSetFilterData
    void setDensity$133aeb() -> b
    void jniSetDensity(long,float) -> jniSetDensity
    void setFriction$133aeb() -> c
    void jniSetFriction(long,float) -> jniSetFriction
    void setRestitution(float) -> a
    void jniSetRestitution(long,float) -> jniSetRestitution
    void setUserData$5d527811() -> d
com.badlogic.gdx.physics.box2d.FixtureDef -> com.badlogic.gdx.physics.box2d.h:
    com.badlogic.gdx.physics.box2d.Shape shape -> a
    float friction -> b
    float restitution -> c
    float density -> d
    boolean isSensor -> e
    com.badlogic.gdx.physics.box2d.Filter filter -> f
com.badlogic.gdx.physics.box2d.Joint -> com.badlogic.gdx.physics.box2d.Joint:
    long addr -> a
    com.badlogic.gdx.physics.box2d.World world -> d
    float[] tmp -> e
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeA -> b
    com.badlogic.gdx.physics.box2d.JointEdge jointEdgeB -> c
    com.badlogic.gdx.math.Vector2 anchorA -> f
    com.badlogic.gdx.math.Vector2 anchorB -> g
    com.badlogic.gdx.math.Vector2 reactionForce -> h
    com.badlogic.gdx.math.Vector2 getAnchorA() -> a
    void jniGetAnchorA(long,float[]) -> jniGetAnchorA
    com.badlogic.gdx.math.Vector2 getAnchorB() -> b
    void jniGetAnchorB(long,float[]) -> jniGetAnchorB
com.badlogic.gdx.physics.box2d.JointDef -> com.badlogic.gdx.physics.box2d.i:
    com.badlogic.gdx.physics.box2d.JointDef$JointType type -> a
    com.badlogic.gdx.physics.box2d.Body bodyA -> b
    com.badlogic.gdx.physics.box2d.Body bodyB -> c
    boolean collideConnected -> d
com.badlogic.gdx.physics.box2d.JointDef$JointType -> com.badlogic.gdx.physics.box2d.j:
    com.badlogic.gdx.physics.box2d.JointDef$JointType Unknown -> a
    com.badlogic.gdx.physics.box2d.JointDef$JointType RevoluteJoint -> b
    com.badlogic.gdx.physics.box2d.JointDef$JointType PrismaticJoint -> c
    com.badlogic.gdx.physics.box2d.JointDef$JointType DistanceJoint -> d
    com.badlogic.gdx.physics.box2d.JointDef$JointType PulleyJoint -> e
    com.badlogic.gdx.physics.box2d.JointDef$JointType MouseJoint -> f
    com.badlogic.gdx.physics.box2d.JointDef$JointType GearJoint -> g
    com.badlogic.gdx.physics.box2d.JointDef$JointType WheelJoint -> h
    com.badlogic.gdx.physics.box2d.JointDef$JointType WeldJoint -> i
    com.badlogic.gdx.physics.box2d.JointDef$JointType FrictionJoint -> j
    com.badlogic.gdx.physics.box2d.JointDef$JointType RopeJoint -> k
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] valueTypes -> l
    int value -> m
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] ENUM$VALUES -> n
    com.badlogic.gdx.physics.box2d.JointDef$JointType[] values() -> values
    com.badlogic.gdx.physics.box2d.JointDef$JointType valueOf(java.lang.String) -> valueOf
com.badlogic.gdx.physics.box2d.JointEdge -> com.badlogic.gdx.physics.box2d.k:
    com.badlogic.gdx.physics.box2d.Body other -> a
    com.badlogic.gdx.physics.box2d.Joint joint -> b
com.badlogic.gdx.physics.box2d.Manifold -> com.badlogic.gdx.physics.box2d.l:
    long addr -> a
    com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint[] points -> b
    com.badlogic.gdx.math.Vector2 localNormal -> c
    com.badlogic.gdx.math.Vector2 localPoint -> d
    int[] tmpInt -> e
    float[] tmpFloat -> f
com.badlogic.gdx.physics.box2d.Manifold$ManifoldPoint -> com.badlogic.gdx.physics.box2d.m:
    com.badlogic.gdx.math.Vector2 localPoint -> a
    float normalImpulse -> b
    float tangentImpulse -> c
    int contactID -> d
    com.badlogic.gdx.physics.box2d.Manifold this$0 -> e
    java.lang.String toString() -> toString
com.badlogic.gdx.physics.box2d.MassData -> com.badlogic.gdx.physics.box2d.n:
    com.badlogic.gdx.math.Vector2 center -> a
com.badlogic.gdx.physics.box2d.PolygonShape -> com.badlogic.gdx.physics.box2d.PolygonShape:
    float[] verts -> a
    long newPolygonShape() -> newPolygonShape
    void set(com.badlogic.gdx.math.Vector2[]) -> a
    void jniSet(long,float[],int) -> jniSet
    void setAsBox(float,float) -> a
    void jniSetAsBox(long,float,float) -> jniSetAsBox
    void setAsBox$5190f958(float,float,com.badlogic.gdx.math.Vector2) -> a
    void jniSetAsBox(long,float,float,float,float,float) -> jniSetAsBox
com.badlogic.gdx.physics.box2d.QueryCallback -> com.badlogic.gdx.physics.box2d.o:
com.badlogic.gdx.physics.box2d.RayCastCallback -> com.badlogic.gdx.physics.box2d.p:
com.badlogic.gdx.physics.box2d.Shape -> com.badlogic.gdx.physics.box2d.q:
    long addr -> b
com.badlogic.gdx.physics.box2d.Transform -> com.badlogic.gdx.physics.box2d.r:
    float[] vals -> a
    com.badlogic.gdx.math.Vector2 position -> b
com.badlogic.gdx.physics.box2d.World -> com.badlogic.gdx.physics.box2d.World:
    com.badlogic.gdx.utils.Pool freeBodies -> a
    com.badlogic.gdx.utils.Pool freeFixtures -> b
    long addr -> j
    com.badlogic.gdx.utils.LongMap bodies -> c
    com.badlogic.gdx.utils.LongMap fixtures -> d
    com.badlogic.gdx.utils.LongMap joints -> e
    com.badlogic.gdx.physics.box2d.ContactFilter contactFilter -> f
    com.badlogic.gdx.physics.box2d.ContactListener contactListener -> g
    float[] tmpGravity -> h
    com.badlogic.gdx.math.Vector2 gravity -> i
    com.badlogic.gdx.physics.box2d.QueryCallback queryCallback -> k
    long[] contactAddrs -> l
    java.util.ArrayList contacts -> m
    java.util.ArrayList freeContacts -> n
    com.badlogic.gdx.physics.box2d.Contact contact -> o
    com.badlogic.gdx.physics.box2d.Manifold manifold -> p
    com.badlogic.gdx.physics.box2d.ContactImpulse impulse -> q
    com.badlogic.gdx.physics.box2d.RayCastCallback rayCastCallback -> r
    com.badlogic.gdx.math.Vector2 rayPoint -> s
    com.badlogic.gdx.math.Vector2 rayNormal -> t
    long newWorld(float,float,boolean) -> newWorld
    void setContactListener(com.badlogic.gdx.physics.box2d.ContactListener) -> a
    com.badlogic.gdx.physics.box2d.Body createBody(com.badlogic.gdx.physics.box2d.BodyDef) -> a
    long jniCreateBody(long,int,float,float,float,float,float,float,float,float,boolean,boolean,boolean,boolean,boolean,float) -> jniCreateBody
    void destroyBody(com.badlogic.gdx.physics.box2d.Body) -> a
    void jniDestroyBody(long,long) -> jniDestroyBody
    com.badlogic.gdx.physics.box2d.Joint createJoint(com.badlogic.gdx.physics.box2d.JointDef) -> a
    long jniCreateWheelJoint(long,long,long,boolean,float,float,float,float,float,float,boolean,float,float,float,float) -> jniCreateWheelJoint
    long jniCreateRopeJoint(long,long,long,boolean,float,float,float,float,float) -> jniCreateRopeJoint
    long jniCreateDistanceJoint(long,long,long,boolean,float,float,float,float,float,float,float) -> jniCreateDistanceJoint
    long jniCreateFrictionJoint(long,long,long,boolean,float,float,float,float,float,float) -> jniCreateFrictionJoint
    long jniCreateGearJoint(long,long,long,boolean,long,long,float) -> jniCreateGearJoint
    long jniCreateMouseJoint(long,long,long,boolean,float,float,float,float,float) -> jniCreateMouseJoint
    long jniCreatePrismaticJoint(long,long,long,boolean,float,float,float,float,float,float,float,boolean,float,float,boolean,float,float) -> jniCreatePrismaticJoint
    long jniCreatePulleyJoint(long,long,long,boolean,float,float,float,float,float,float,float,float,float,float,float) -> jniCreatePulleyJoint
    long jniCreateRevoluteJoint(long,long,long,boolean,float,float,float,float,float,boolean,float,float,boolean,float,float) -> jniCreateRevoluteJoint
    long jniCreateWeldJoint(long,long,long,boolean,float,float,float,float,float) -> jniCreateWeldJoint
    void destroyJoint(com.badlogic.gdx.physics.box2d.Joint) -> a
    void jniDestroyJoint(long,long) -> jniDestroyJoint
    void step$483e8c8b(float,int) -> a
    void jniStep(long,float,int,int) -> jniStep
    void setContinuousPhysics$1385ff() -> a
    void jniSetContiousPhysics(long,boolean) -> jniSetContiousPhysics
    void setGravity(com.badlogic.gdx.math.Vector2) -> a
    void jniSetGravity(long,float,float) -> jniSetGravity
    java.util.Iterator getBodies() -> b
com.badlogic.gdx.physics.box2d.World$1 -> com.badlogic.gdx.physics.box2d.s:
    com.badlogic.gdx.physics.box2d.World this$0 -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.World$2 -> com.badlogic.gdx.physics.box2d.t:
    com.badlogic.gdx.physics.box2d.World this$0 -> a
    java.lang.Object newObject() -> a
com.badlogic.gdx.physics.box2d.WorldManifold -> com.badlogic.gdx.physics.box2d.u:
    com.badlogic.gdx.math.Vector2 normal -> a
    com.badlogic.gdx.math.Vector2[] points -> b
    int numContactPoints -> c
    com.badlogic.gdx.math.Vector2 getNormal() -> a
    com.badlogic.gdx.math.Vector2[] getPoints() -> b
    int getNumberOfContactPoints() -> c
com.badlogic.gdx.physics.box2d.joints.DistanceJoint -> com.badlogic.gdx.physics.box2d.a.a:
com.badlogic.gdx.physics.box2d.joints.DistanceJointDef -> com.badlogic.gdx.physics.box2d.a.b:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float length -> g
    float frequencyHz -> h
    float dampingRatio -> i
com.badlogic.gdx.physics.box2d.joints.FrictionJoint -> com.badlogic.gdx.physics.box2d.a.c:
com.badlogic.gdx.physics.box2d.joints.FrictionJointDef -> com.badlogic.gdx.physics.box2d.a.d:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float maxForce -> g
    float maxTorque -> h
com.badlogic.gdx.physics.box2d.joints.GearJoint -> com.badlogic.gdx.physics.box2d.a.e:
com.badlogic.gdx.physics.box2d.joints.GearJointDef -> com.badlogic.gdx.physics.box2d.a.f:
    com.badlogic.gdx.physics.box2d.Joint joint1 -> e
    com.badlogic.gdx.physics.box2d.Joint joint2 -> f
    float ratio -> g
com.badlogic.gdx.physics.box2d.joints.MouseJoint -> com.badlogic.gdx.physics.box2d.a.g:
    float[] tmp -> d
    com.badlogic.gdx.math.Vector2 target -> e
com.badlogic.gdx.physics.box2d.joints.MouseJointDef -> com.badlogic.gdx.physics.box2d.a.h:
    com.badlogic.gdx.math.Vector2 target -> e
    float maxForce -> f
    float frequencyHz -> g
    float dampingRatio -> h
com.badlogic.gdx.physics.box2d.joints.PrismaticJoint -> com.badlogic.gdx.physics.box2d.a.i:
com.badlogic.gdx.physics.box2d.joints.PrismaticJointDef -> com.badlogic.gdx.physics.box2d.a.j:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    com.badlogic.gdx.math.Vector2 localAxisA -> g
    float referenceAngle -> h
    boolean enableLimit -> i
    float lowerTranslation -> j
    float upperTranslation -> k
    boolean enableMotor -> l
    float maxMotorForce -> m
    float motorSpeed -> n
com.badlogic.gdx.physics.box2d.joints.PulleyJoint -> com.badlogic.gdx.physics.box2d.a.k:
    float[] tmp -> d
    com.badlogic.gdx.math.Vector2 groundAnchorA -> e
    com.badlogic.gdx.math.Vector2 groundAnchorB -> f
com.badlogic.gdx.physics.box2d.joints.PulleyJointDef -> com.badlogic.gdx.physics.box2d.a.l:
    com.badlogic.gdx.math.Vector2 groundAnchorA -> e
    com.badlogic.gdx.math.Vector2 groundAnchorB -> f
    com.badlogic.gdx.math.Vector2 localAnchorA -> g
    com.badlogic.gdx.math.Vector2 localAnchorB -> h
    float lengthA -> i
    float lengthB -> j
    float ratio -> k
com.badlogic.gdx.physics.box2d.joints.RevoluteJoint -> com.badlogic.gdx.physics.box2d.a.m:
com.badlogic.gdx.physics.box2d.joints.RevoluteJointDef -> com.badlogic.gdx.physics.box2d.a.n:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float referenceAngle -> g
    boolean enableLimit -> h
    float lowerAngle -> i
    float upperAngle -> j
    boolean enableMotor -> k
    float motorSpeed -> l
    float maxMotorTorque -> m
com.badlogic.gdx.physics.box2d.joints.RopeJoint -> com.badlogic.gdx.physics.box2d.a.o:
com.badlogic.gdx.physics.box2d.joints.RopeJointDef -> com.badlogic.gdx.physics.box2d.a.p:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float maxLength -> g
com.badlogic.gdx.physics.box2d.joints.WeldJoint -> com.badlogic.gdx.physics.box2d.a.q:
com.badlogic.gdx.physics.box2d.joints.WeldJointDef -> com.badlogic.gdx.physics.box2d.a.r:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    float referenceAngle -> g
com.badlogic.gdx.physics.box2d.joints.WheelJoint -> com.badlogic.gdx.physics.box2d.a.s:
com.badlogic.gdx.physics.box2d.joints.WheelJointDef -> com.badlogic.gdx.physics.box2d.a.t:
    com.badlogic.gdx.math.Vector2 localAnchorA -> e
    com.badlogic.gdx.math.Vector2 localAnchorB -> f
    com.badlogic.gdx.math.Vector2 localAxisA -> g
    boolean enableMotor -> h
    float maxMotorTorque -> i
    float motorSpeed -> j
    float frequencyHz -> k
    float dampingRatio -> l
com.badlogic.gdx.utils.Array -> com.badlogic.gdx.utils.a:
    java.lang.Object[] items -> a
    int size -> b
    boolean ordered -> c
    com.badlogic.gdx.utils.Array$ArrayIterator iterator -> d
    void add(java.lang.Object) -> a
    boolean removeValue$4cfd3ce7(java.lang.Object) -> b
    java.lang.Object removeIndex(int) -> a
    java.lang.Object pop() -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
com.badlogic.gdx.utils.Array$ArrayIterator -> com.badlogic.gdx.utils.b:
    com.badlogic.gdx.utils.Array array -> b
    int index -> a
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    void remove() -> remove
com.badlogic.gdx.utils.BufferUtils -> com.badlogic.gdx.utils.BufferUtils:
    com.badlogic.gdx.utils.Array unsafeBuffers -> a
    int allocatedUnsafe -> b
    void copy$233a966d(float[],java.nio.Buffer,int) -> a
    void copy(java.nio.Buffer,java.nio.Buffer,int) -> a
    int positionInBytes(java.nio.Buffer) -> a
    void disposeUnsafeByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer newUnsafeByteBuffer(int) -> a
    void freeMemory(java.nio.ByteBuffer) -> freeMemory
    java.nio.ByteBuffer newDisposableByteBuffer(int) -> newDisposableByteBuffer
    void copyJni(float[],int,java.nio.Buffer,int,int) -> copyJni
    void copyJni(java.nio.Buffer,int,java.nio.Buffer,int,int) -> copyJni
com.badlogic.gdx.utils.GdxRuntimeException -> com.badlogic.gdx.utils.c:
com.badlogic.gdx.utils.LongMap -> com.badlogic.gdx.utils.d:
    int size -> a
    long[] keyTable -> b
    java.lang.Object[] valueTable -> c
    int capacity -> d
    int stashSize -> e
    java.lang.Object zeroValue -> f
    boolean hasZeroValue -> g
    float loadFactor -> h
    int hashShift -> i
    int mask -> j
    int threshold -> k
    int stashCapacity -> l
    int pushIterations -> m
    com.badlogic.gdx.utils.LongMap$Values values -> n
    java.lang.Object put(long,java.lang.Object) -> a
    void push(long,java.lang.Object,int,long,int,long,int,long) -> a
    java.lang.Object remove(long) -> a
    void removeStashIndex(int) -> a
    void resize(int) -> b
    int hash2(long) -> b
    int hash3(long) -> c
    java.lang.String toString() -> toString
    com.badlogic.gdx.utils.LongMap$Values values() -> a
com.badlogic.gdx.utils.LongMap$MapIterator -> com.badlogic.gdx.utils.e:
    boolean hasNext -> a
    com.badlogic.gdx.utils.LongMap map -> b
    int nextIndex -> c
    int currentIndex -> d
    void reset() -> a
    void findNextIndex() -> b
    void remove() -> remove
com.badlogic.gdx.utils.LongMap$Values -> com.badlogic.gdx.utils.f:
    boolean hasNext() -> hasNext
    java.lang.Object next() -> next
    java.util.Iterator iterator() -> iterator
    void reset() -> a
    void remove() -> remove
com.badlogic.gdx.utils.Pool -> com.badlogic.gdx.utils.g:
    int max -> b
    com.badlogic.gdx.utils.Array freeObjects -> a
    java.lang.Object newObject() -> a
    java.lang.Object obtain() -> b
    void free(java.lang.Object) -> a
gamers.associate.SlimeAttack.SlimeAttack -> gamers.associate.SlimeAttack.SlimeAttack:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> a
    org.cocos2d.layers.CCScene scene -> b
    android.media.AudioManager audio -> c
    boolean startLevel -> d
    gamers.associate.SlimeAttack.layers.StoryMenuItem storyMenuItemAfterIntro -> e
    boolean needMusicResume -> f
    void onCreate(android.os.Bundle) -> onCreate
    void hideAd() -> a
    void showAndNextAd() -> b
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void runIntro(gamers.associate.SlimeAttack.layers.StoryMenuItem) -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void hideButtons() -> c
gamers.associate.SlimeAttack.SlimeIntro -> gamers.associate.SlimeAttack.SlimeIntro:
    android.widget.VideoView videos -> a
    void onCreate(android.os.Bundle) -> onCreate
    void runVideo() -> a
    void onResume() -> onResume
    void onStart() -> onStart
    void hideButtons() -> b
    void access$0(gamers.associate.SlimeAttack.SlimeIntro) -> a
gamers.associate.SlimeAttack.SlimeIntro$1 -> gamers.associate.SlimeAttack.a:
    gamers.associate.SlimeAttack.SlimeIntro this$0 -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
gamers.associate.SlimeAttack.SlimeIntro$2 -> gamers.associate.SlimeAttack.b:
    gamers.associate.SlimeAttack.SlimeIntro this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
gamers.associate.SlimeAttack.game.AbstractLevelBuilder -> gamers.associate.SlimeAttack.a.a:
    gamers.associate.SlimeAttack.game.GameInformation gameInfo -> a
    int totalStar -> b
    boolean isBoss -> c
    int getTotalStar() -> a
    void addStar() -> b
    void resetTotalStar() -> c
    boolean isBoss() -> d
gamers.associate.SlimeAttack.game.CCNodeDraw -> gamers.associate.SlimeAttack.a.b:
    gamers.associate.SlimeAttack.game.Level level -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
gamers.associate.SlimeAttack.game.CameraAction -> gamers.associate.SlimeAttack.a.c:
    gamers.associate.SlimeAttack.items.base.GameItem targetAction -> a
    float targetValue -> b
    float elapsedTimeAction -> c
    float targetTimeAction -> d
    gamers.associate.SlimeAttack.game.CameraManager cameraManager -> e
    float interpolation -> f
    boolean isEnded -> g
    boolean action(float) -> a
    void actionInternal$133aeb() -> a
    void setTargetAction(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    gamers.associate.SlimeAttack.items.base.GameItem getTargetAction() -> b
    void setTargetValue(float) -> b
    float getTargetValue() -> c
    gamers.associate.SlimeAttack.game.CameraManager getManager() -> d
    float getInterpolation() -> e
gamers.associate.SlimeAttack.game.CameraManager -> gamers.associate.SlimeAttack.a.d:
    float margeFollowUnzoom -> a
    float margeSelectUnzoom -> b
    float minScale -> c
    float maxScale -> d
    float zoomSpeed -> e
    float currentZoom -> f
    float minFollowScale -> g
    boolean followZoom -> h
    float screenW2 -> i
    float screenH2 -> j
    org.cocos2d.layers.CCLayer gameLayer -> k
    float levelWidth -> l
    float levelHeight -> m
    boolean isCameraOnContinuousMove -> n
    org.cocos2d.types.CGPoint moveCameraBy -> o
    org.cocos2d.types.CGRect screenView -> p
    org.cocos2d.types.CGRect virtualCamera -> q
    gamers.associate.SlimeAttack.items.base.GameItem followed -> r
    org.cocos2d.types.CGPoint levelOrigin -> s
    float cameraMargin -> t
    org.cocos2d.types.CGRect margeRect -> u
    org.cocos2d.types.CGPoint layerPosition -> v
    org.cocos2d.types.CGPoint zoomAnchor -> w
    org.cocos2d.types.CGPoint zoomScreenPin -> x
    java.util.ArrayList actions -> y
    java.util.ArrayList actionsToRemove -> z
    org.cocos2d.types.CGPoint st -> A
    org.cocos2d.types.CGPoint tl -> B
    org.cocos2d.types.CGPoint tr -> C
    org.cocos2d.types.CGPoint br -> D
    org.cocos2d.types.CGPoint bl -> E
    org.cocos2d.types.CGPoint result1 -> F
    org.cocos2d.types.CGPoint result2 -> G
    org.cocos2d.types.CGPoint centerScreen -> H
    org.cocos2d.types.CGPoint currentOpposite -> I
    org.cocos2d.types.CGPoint screenPoint -> J
    float zoomStart -> K
    void tick(float) -> a
    org.cocos2d.types.CGPoint getTargetAnchorForMargin(org.cocos2d.types.CGPoint) -> g
    float getTargetZoomForMargin(org.cocos2d.types.CGPoint) -> h
    void follow(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void followZoom(gamers.associate.SlimeAttack.items.base.GameItem) -> b
    void normalizePosition() -> j
    void centerCameraOn(org.cocos2d.types.CGPoint) -> a
    void keepPointAt(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    void setLayerPosition(org.cocos2d.types.CGPoint) -> i
    void moveCameraBy(org.cocos2d.types.CGPoint) -> b
    void stopContinousMoving() -> a
    void zoomCameraByScreenRatio(float) -> b
    void setZoomPoint(org.cocos2d.types.CGPoint) -> c
    void setZoomPoint$73d0a3b1(org.cocos2d.types.CGPoint) -> d
    org.cocos2d.types.CGPoint getScreenPoint(org.cocos2d.types.CGPoint) -> e
    org.cocos2d.types.CGPoint getGamePoint(org.cocos2d.types.CGPoint) -> f
    void zoomCameraBy(float) -> c
    void zoomCameraTo(float) -> d
    void zoomCameraCenterTo$133aeb() -> b
    float getCurrentZoom() -> c
    void computeMargeRect() -> k
    void setCameraView() -> d
    void attachLevel(float,float,org.cocos2d.types.CGPoint) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void cancelFollow() -> e
    void cancelActions() -> f
    void moveInterpolateTo(gamers.associate.SlimeAttack.items.base.GameItem,float) -> a
    org.cocos2d.types.CGRect getVirtualCamera() -> g
    void addAction(gamers.associate.SlimeAttack.game.CameraAction) -> a
    void zoomInterpolateTo(gamers.associate.SlimeAttack.items.base.GameItem,float,float) -> a
    void unzoomForMargin(org.cocos2d.types.CGPoint,float) -> a
    void cancelAll() -> h
    float intersectCameraView(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    org.cocos2d.types.CGPoint getCenterScreen() -> i
gamers.associate.SlimeAttack.game.ContactInfo -> gamers.associate.SlimeAttack.a.e:
    gamers.associate.SlimeAttack.items.base.GameItemPhysic contactWith -> a
    com.badlogic.gdx.physics.box2d.WorldManifold manifold -> b
    gamers.associate.SlimeAttack.items.base.GameItemPhysic getContactWith() -> a
    com.badlogic.gdx.physics.box2d.WorldManifold getManifold() -> b
gamers.associate.SlimeAttack.game.ContactManager -> gamers.associate.SlimeAttack.a.f:
gamers.associate.SlimeAttack.game.GameInformation -> gamers.associate.SlimeAttack.a.g:
    int levelNum -> a
    int levelDifficulty -> b
    java.lang.String fileName -> c
    int totalScoreEasy -> d
    int totalScoreNormal -> e
    int totalScoreHard -> f
    int totalScoreExtrem -> g
    int lastScore -> h
    int maxLevelDifficulty -> i
    int previousDifficulty -> j
    java.lang.String lastBgk -> k
    int totalCurrent -> l
    boolean lastIsHighScore -> m
    boolean resetHighScores -> n
    boolean survivalGameOverEasy -> o
    boolean survivalGameOverNormal -> p
    boolean survivalGameOverHard -> q
    boolean survivalGameOverExtrem -> r
    int totalCurrentEasy -> s
    int totalCurrentNormal -> t
    int totalCurrentHard -> u
    int totalCurrentExtrem -> v
    boolean newUnlockSurvival -> w
    int newUnlockedDifficulty -> x
    int easyInARow -> y
    int normalInARow -> z
    int hardInARow -> A
    int extremInARow -> B
    int currentEasyInARow -> C
    int currentNormalInARow -> D
    int currentHardInARow -> E
    int currentExtremInARow -> F
    gamers.associate.SlimeAttack.layers.SurvivalItemLayer currentSurvival -> G
    boolean story1Finished -> H
    int previousTotalCurrent -> I
    void unlockDifficulty(int) -> a
    void unlockNextDifficultySurvival() -> a
    boolean consumeNewUnlockSurvival() -> b
    int getUnlockedSurvival() -> c
    void setLevelDifficulty(int) -> j
    void setDifficulty(int) -> b
    void setTotalScore(int,int) -> b
    int getCurrentScore() -> d
    int getDifficultyScore(int) -> k
    int getLevelMax() -> e
    void resetDifficulty(int) -> c
    void levelUp() -> f
    void setLevel(int) -> d
    void forceLevel(int,int) -> a
    void store() -> t
    void load() -> u
    int getLevelNum() -> g
    int getDifficulty() -> h
    int getTotalScore() -> i
    void addLevelScore(int) -> e
    void removeLastScore() -> j
    int getMaxLevelDifficulty() -> k
    java.lang.String getLastBkg() -> l
    void setLastBkgandSave(java.lang.String) -> a
    void setLevelNum(int) -> l
    int getScore(int) -> f
    boolean storeIfBetterScore() -> m
    boolean isLastHighScore() -> n
    void setSurvivalGameOver(boolean) -> a
    boolean canContinueSurvival(int) -> g
    int getPreviousTotalCurrent() -> o
    void setInARowLose() -> p
    void setInARow() -> q
    void setCurrentInARow(int) -> m
    void setInARow(int) -> n
    int getInARow(int) -> h
    int getCurrentInARow(int) -> i
    void setCurrentSurvival(gamers.associate.SlimeAttack.layers.SurvivalItemLayer) -> a
    boolean isStory1Finished() -> r
    void setStory1Finished$1385ff() -> s
gamers.associate.SlimeAttack.game.IGameItemHandler -> gamers.associate.SlimeAttack.a.h:
    void addItemToAdd(gamers.associate.SlimeAttack.items.base.GameItem) -> a
gamers.associate.SlimeAttack.game.IGamePlay -> gamers.associate.SlimeAttack.a.i:
    void setLevel(gamers.associate.SlimeAttack.game.Level) -> a
    void startLevel() -> a
    void stop() -> b
    int getScore() -> c
    int getBaseScore() -> d
    int getBonusScore(int) -> a
    void activateSelection$2dd0007d() -> e
    void selectBegin$2dd0007d() -> f
    void setNewAliveSlimyCount(int) -> b
    void setNewBonusTime() -> g
    void setPause(boolean) -> a
    boolean isStarted() -> h
    int bonusCount() -> i
    int neededBonus() -> j
    gamers.associate.SlimeAttack.levels.GamePlay getType() -> k
    void endMode() -> l
    float getLeftTime() -> m
gamers.associate.SlimeAttack.game.LaboratoryPackage -> gamers.associate.SlimeAttack.a.j:
    void defineName() -> a
    void defineLevelCount() -> b
    void defineBackgroundPath() -> c
    int getDifficulty(int) -> a
gamers.associate.SlimeAttack.game.Level -> gamers.associate.SlimeAttack.a.k:
    boolean DebugMode -> a
    boolean isInit -> b
    float Gravity -> c
    java.lang.String backgroundPath -> ae
    gamers.associate.SlimeAttack.game.Level currentLevel -> d
    int zUnder -> e
    int zBack -> f
    int zMid -> g
    int zFront -> h
    int zTop -> i
    java.lang.String winTxt -> af
    float timeRatio -> ag
    com.badlogic.gdx.physics.box2d.World world -> j
    com.badlogic.gdx.math.Vector2 gravity -> k
    float worldRatio -> l
    java.util.Hashtable items -> m
    java.util.ArrayList selectables -> n
    java.lang.String ManualDimension -> o
    java.lang.String maxDimension -> ah
    org.cocos2d.nodes.CCSprite backgroundSprite -> p
    gamers.associate.SlimeAttack.game.ContactManager contactManager -> q
    org.cocos2d.layers.CCScene scene -> r
    gamers.associate.SlimeAttack.layers.LevelLayer levelLayer -> s
    gamers.associate.SlimeAttack.layers.HudLayer hudLayer -> t
    gamers.associate.SlimeAttack.layers.BackgoundLayer backgroundLayer -> u
    org.cocos2d.layers.CCLayer gameLayer -> v
    org.cocos2d.layers.CCLayer customOverLayer -> w
    gamers.associate.SlimeAttack.layers.PauseLayer pauseLayer -> x
    gamers.associate.SlimeAttack.layers.EndLevelLayer endLevelLayer -> y
    int customZ -> z
    int hudZ -> A
    boolean isHudEnabled -> B
    gamers.associate.SlimeAttack.layers.MessageLayer messageLayer -> C
    float levelWidth -> D
    float levelHeight -> E
    org.cocos2d.types.CGPoint levelOrigin -> F
    gamers.associate.SlimeAttack.game.CameraManager cameraManager -> G
    java.lang.String currentLevelName -> H
    java.util.ArrayList itemsToRemove -> I
    java.util.ArrayList itemsToAdd -> J
    boolean isPaused -> K
    gamers.associate.SlimeAttack.items.base.ISelectable selectedItem -> L
    gamers.associate.SlimeAttack.items.base.GameItem startItem -> M
    gamers.associate.SlimeAttack.game.ThumbnailManager thumbnailManager -> N
    gamers.associate.SlimeAttack.game.CCNodeDraw nodeDraw -> O
    gamers.associate.SlimeAttack.game.IGamePlay gamePlay -> P
    gamers.associate.SlimeAttack.levels.LevelDefinition levelDefinition -> Q
    boolean isActivated -> R
    java.util.ArrayList aliveSlimyList -> S
    java.util.ArrayList slimyList -> T
    java.util.ArrayList electrificables -> U
    gamers.associate.SlimeAttack.items.custom.GoalPortal goal -> V
    gamers.associate.SlimeAttack.items.custom.EvacuationPlug plug -> W
    boolean isGameOver -> X
    int lastScore -> Y
    boolean isVictory -> Z
    boolean endLevelShown -> aa
    java.util.ArrayList trigerables -> ab
    java.util.ArrayList trigerablesToAdd -> ac
    boolean isPhysicDisabled -> ad
    java.util.Random randomGen -> ai
    gamers.associate.SlimeAttack.items.base.GameItem helpItem -> aj
    java.util.List tempList -> ak
    java.lang.Object syncObject -> al
    float delta -> am
    gamers.associate.SlimeAttack.game.Level get(java.lang.String,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    gamers.associate.SlimeAttack.game.Level get(java.lang.String,boolean,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void createSingleton() -> P
    gamers.associate.SlimeAttack.game.Level get(gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
    gamers.associate.SlimeAttack.game.Level get(gamers.associate.SlimeAttack.levels.LevelDefinition,boolean) -> a
    java.lang.String getCurrentLevelName() -> a
    void setBackgroundFrom(java.lang.String) -> h
    void postBuild(java.lang.String) -> i
    void resetLevel() -> b
    void enablePauseLayer() -> c
    org.cocos2d.layers.CCScene getScene() -> d
    gamers.associate.SlimeAttack.game.CameraManager getCameraManager() -> e
    float getTimeRatio() -> f
    void setTimeRatio(float) -> a
    void tick(float) -> b
    void addItemToRemove(gamers.associate.SlimeAttack.items.base.GameItem) -> b
    void addItemToAdd(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    java.util.ArrayList getItemsToAdd() -> g
    void setPause(boolean) -> a
    float getWorlRatio() -> h
    float getLevelWidth() -> i
    float getLevelHeight() -> j
    void addGameItem(gamers.associate.SlimeAttack.items.base.GameItem) -> e
    void removeGameItem(gamers.associate.SlimeAttack.items.base.GameItem) -> f
    void setLevelSize(float,float) -> a
    void fixBgSize() -> Q
    void setIsTouchEnabled(boolean) -> b
    void addCustomOverLayer(org.cocos2d.layers.CCLayer) -> a
    void setIsHudEnabled(boolean) -> c
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    gamers.associate.SlimeAttack.items.base.GameItem getSelectedGameItem() -> k
    void unselectCurrent() -> l
    void activateSelection(org.cocos2d.types.CGPoint) -> a
    void simpleSelect(org.cocos2d.types.CGPoint) -> b
    boolean moveSelection(org.cocos2d.types.CGPoint) -> c
    void trySelect(org.cocos2d.types.CGPoint) -> d
    gamers.associate.SlimeAttack.items.base.GameItem getStartItem() -> m
    void setStartItem(gamers.associate.SlimeAttack.items.base.GameItem) -> c
    void addGamePlay(gamers.associate.SlimeAttack.game.IGamePlay) -> a
    void removeCurrentGamePlay() -> n
    void setHudText(java.lang.String) -> a
    void setStartText(java.lang.String) -> b
    void hideHudText() -> o
    org.cocos2d.opengl.CCBitmapFontAtlas getHudLabel() -> p
    void setHideCount(boolean) -> d
    gamers.associate.SlimeAttack.game.IGamePlay getGamePlay() -> q
    boolean lose() -> r
    boolean win$138603() -> s
    void endLevel() -> R
    void stopGamePlay() -> t
    void setLevelDefinition(gamers.associate.SlimeAttack.levels.LevelDefinition) -> b
    void activate() -> u
    void desactivate() -> v
    boolean getActivated() -> w
    void slimyKilled(gamers.associate.SlimeAttack.items.custom.Slimy) -> a
    void activateCameraMoveAndZoomByUser() -> x
    void desactivateCameraMoveAndZoomByUser() -> y
    java.util.ArrayList getTrigerables(java.lang.String) -> c
    java.util.ArrayList getTrigerablesInItemToAdd(java.lang.String) -> d
    void setPhysicDisabled$1385ff() -> z
    boolean isPaused() -> A
    java.lang.String getMaxDimension() -> B
    void setMaxDimension(java.lang.String) -> e
    org.cocos2d.types.CGPoint getLevelOrigin() -> C
    void setLevelOrigin(float,float) -> b
    org.cocos2d.layers.CCLayer getLevelLayer() -> D
    gamers.associate.SlimeAttack.items.custom.GoalPortal getGoal() -> E
    void setGoal(gamers.associate.SlimeAttack.items.custom.GoalPortal) -> a
    void setPlug(gamers.associate.SlimeAttack.items.custom.EvacuationPlug) -> a
    java.util.ArrayList slimies() -> F
    void setTitle(java.lang.String) -> f
    gamers.associate.SlimeAttack.items.base.GameItem getHelpItem() -> G
    void setHelpItem(gamers.associate.SlimeAttack.items.base.GameItem) -> d
    void AnimNewBonus(org.cocos2d.types.CGPoint) -> e
    float getNormalTimeRatio() -> H
    java.util.List getItemsByName(java.lang.String) -> g
    java.util.List getElectrificables() -> I
    java.util.List aliveList() -> J
    void detachSlimies(gamers.associate.SlimeAttack.items.base.GameItemPhysic) -> a
    void detachSlimies() -> K
    gamers.associate.SlimeAttack.levels.LevelDefinition getLevelDefinition() -> L
    gamers.associate.SlimeAttack.layers.PauseLayer getPauseLayer() -> M
    void timesUp() -> N
    void killAllSlimies() -> O
gamers.associate.SlimeAttack.game.LevelBuilder -> gamers.associate.SlimeAttack.a.l:
    java.lang.String LevelSelection -> d
    java.lang.String LevelExtension -> e
    java.util.HashMap levels -> f
    java.util.HashMap levelsChain -> g
    gamers.associate.SlimeAttack.levels.LevelDefinition previousDef -> h
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$GamePlay -> i
    void init() -> e
    void build(gamers.associate.SlimeAttack.game.Level,java.lang.String,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void build(gamers.associate.SlimeAttack.game.Level,gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
    void rebuild(gamers.associate.SlimeAttack.game.Level,gamers.associate.SlimeAttack.levels.LevelDefinition) -> b
    gamers.associate.SlimeAttack.levels.LevelDefinition getNext(gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$GamePlay() -> f
gamers.associate.SlimeAttack.game.LevelBuilderGenerator -> gamers.associate.SlimeAttack.a.m:
    boolean isDebug -> f
    int forceDiff -> g
    int forceLevel -> h
    int MinimumComplexity -> i
    int AverageComplexityPerLevel -> j
    java.lang.String defaultId -> d
    java.lang.String fileExtension -> e
    java.lang.String fileName -> k
    int complexity -> l
    gamers.associate.SlimeAttack.levels.LevelHome home -> m
    gamers.associate.SlimeAttack.levels.generator.LevelDefinitionGenerator levelDef -> n
    gamers.associate.SlimeAttack.levels.LevelDefinitionParser levelparser -> o
    void build(gamers.associate.SlimeAttack.game.Level,java.lang.String,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void init() -> e
    int computeComplexity() -> f
    void build(gamers.associate.SlimeAttack.game.Level,gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
    void rebuild(gamers.associate.SlimeAttack.game.Level,gamers.associate.SlimeAttack.levels.LevelDefinition) -> b
    gamers.associate.SlimeAttack.levels.LevelDefinition getNext(gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
gamers.associate.SlimeAttack.game.LevelDifficulty -> gamers.associate.SlimeAttack.a.n:
    int LevelsPerDiff -> a
    int getNextDifficulty(int) -> a
    java.lang.String getText(int) -> b
gamers.associate.SlimeAttack.game.LoadingQuoteGenerator -> gamers.associate.SlimeAttack.a.o:
    java.util.Random rand -> a
    java.lang.String NewQuote() -> a
gamers.associate.SlimeAttack.game.MoveInterpolateAction -> gamers.associate.SlimeAttack.a.p:
    org.cocos2d.types.CGPoint pointAction -> a
    void actionInternal$133aeb() -> a
gamers.associate.SlimeAttack.game.PackageManager -> gamers.associate.SlimeAttack.a.q:
    java.util.List packages -> a
    gamers.associate.SlimeAttack.game.WorldPackage currentPackage -> b
    java.util.List getPackages() -> a
    gamers.associate.SlimeAttack.game.WorldPackage getPackage(int) -> a
    int getPackageCount() -> b
    gamers.associate.SlimeAttack.game.WorldPackage getCurrentPackage() -> c
    void setCurrentPackage(gamers.associate.SlimeAttack.game.WorldPackage) -> a
gamers.associate.SlimeAttack.game.Rank -> gamers.associate.SlimeAttack.a.r:
    gamers.associate.SlimeAttack.game.Rank Lock -> a
    gamers.associate.SlimeAttack.game.Rank None -> b
    gamers.associate.SlimeAttack.game.Rank Bronze -> c
    gamers.associate.SlimeAttack.game.Rank Silver -> d
    gamers.associate.SlimeAttack.game.Rank Gold -> e
    int index -> f
    gamers.associate.SlimeAttack.game.Rank[] ENUM$VALUES -> g
    int index() -> a
    gamers.associate.SlimeAttack.game.Rank[] values() -> values
    gamers.associate.SlimeAttack.game.Rank valueOf(java.lang.String) -> valueOf
gamers.associate.SlimeAttack.game.Sharer -> gamers.associate.SlimeAttack.a.s:
    java.lang.String twitterTag -> a
    java.lang.String DefaultMessage -> b
    java.lang.String shareMessage -> c
    void setShareMessage(java.lang.String) -> a
gamers.associate.SlimeAttack.game.SlimeFactory -> gamers.associate.SlimeAttack.a.t:
    boolean IsLevelSelectionOn -> a
    boolean IsLevelSelectionShowButtons -> b
    boolean IsLevelDebugMode -> c
    boolean IsForceDiffDebug -> d
    int ForceDiff -> e
    int ForceLevel -> f
    boolean IsDebugBlocOn -> g
    java.lang.String ForceBlockPath -> h
    org.cocos2d.types.ccColor3B ColorSlime -> i
    org.cocos2d.types.ccColor3B ColorSlimeBorder -> j
    org.cocos2d.types.ccColor3B ColorSlimeLight -> k
    float Density -> l
    float SGSDensity -> m
    java.lang.String slimeFileExt -> n
    float WidthRatio -> af
    gamers.associate.SlimeAttack.SlimeAttack ContextActivity -> o
    gamers.associate.SlimeAttack.levels.ILevelBuilder LevelBuilder -> p
    boolean isAttached -> q
    gamers.associate.SlimeAttack.items.custom.SlimyFactory Slimy -> r
    gamers.associate.SlimeAttack.items.custom.SpawnPortalFactory SpawnPortal -> s
    gamers.associate.SlimeAttack.items.custom.PlatformFactory Platform -> t
    gamers.associate.SlimeAttack.items.custom.GoalPortalFactory GoalPortal -> u
    gamers.associate.SlimeAttack.items.custom.BumperAngleFactory BumperAngle -> v
    gamers.associate.SlimeAttack.items.custom.LevelEndFactory LevelEnd -> w
    gamers.associate.SlimeAttack.items.custom.HomeLevelHandlerFactory HomeLevelHandler -> x
    gamers.associate.SlimeAttack.items.custom.LavaFactory Lava -> y
    gamers.associate.SlimeAttack.items.custom.BoxFactory Box -> z
    gamers.associate.SlimeAttack.items.custom.PhysicPolygonFactory Polygon -> A
    gamers.associate.SlimeAttack.items.custom.ThumbnailFactory Thumbnail -> B
    gamers.associate.SlimeAttack.items.custom.BecBunsenFactory BecBunsen -> C
    gamers.associate.SlimeAttack.items.custom.ButtonFactory Button -> D
    gamers.associate.SlimeAttack.items.custom.CircularSawFactory CircularSaw -> E
    gamers.associate.SlimeAttack.items.custom.StarFactory Star -> F
    gamers.associate.SlimeAttack.items.custom.MenuNodeFactory MenuNode -> G
    gamers.associate.SlimeAttack.items.custom.LaserGunFactory LaserGun -> H
    gamers.associate.SlimeAttack.items.custom.TargetFactory Target -> I
    gamers.associate.SlimeAttack.items.custom.LaserBeamFactory LaserBeam -> J
    gamers.associate.SlimeAttack.items.custom.CocosFactory Sprite -> K
    gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorCorridor3 LevelGeneratorCorridor3 -> L
    gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorRectangle2 LevelGeneratorRectangle2 -> M
    gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorTutorial LevelGeneratorTutorial -> N
    gamers.associate.SlimeAttack.game.GameInformation GameInfo -> O
    gamers.associate.SlimeAttack.items.custom.RedFactory Red -> P
    gamers.associate.SlimeAttack.items.custom.GateFactory Gate -> Q
    gamers.associate.SlimeAttack.items.custom.LiquidFactory Liquid -> R
    gamers.associate.SlimeAttack.items.custom.LiquidSurfaceFactory LiquidSurface -> S
    gamers.associate.SlimeAttack.items.custom.TriggerTimeFactory TriggerTime -> T
    gamers.associate.SlimeAttack.items.custom.EvacuationPlugfactory EvacuationPlug -> U
    gamers.associate.SlimeAttack.items.custom.DirectorFactory Director -> V
    gamers.associate.SlimeAttack.items.custom.TeslaCoilFactory TeslaCoil -> W
    gamers.associate.SlimeAttack.items.custom.LightningFactory Lightning -> X
    gamers.associate.SlimeAttack.items.custom.EnergyBallFactory EnergyBall -> Y
    gamers.associate.SlimeAttack.items.custom.EnergyBallGunFactory EnergyBallGun -> Z
    gamers.associate.SlimeAttack.items.custom.CameraFactory Camera -> aa
    gamers.associate.SlimeAttack.items.custom.SlimySuccessFactory SlimySuccess -> ab
    gamers.associate.SlimeAttack.items.custom.StarCounterFactory StarCounter -> ac
    gamers.associate.SlimeAttack.game.PackageManager PackageManager -> ad
    gamers.associate.SlimeAttack.game.achievements.AchievementManager AchievementManager -> ae
    void init() -> a
    void attachAll(gamers.associate.SlimeAttack.game.Level,org.cocos2d.nodes.CCNode,com.badlogic.gdx.physics.box2d.World,float) -> a
    void detachAll() -> b
    void destroyAll() -> c
    void setDensity(float) -> a
    void triggerZoneColor(javax.microedition.khronos.opengles.GL10) -> a
    void triggerZoneAlertColor(javax.microedition.khronos.opengles.GL10) -> b
    float getScreenMidX() -> d
    float getScreenMidY() -> e
    org.cocos2d.nodes.CCLabel getLabel(java.lang.String,float) -> a
    org.cocos2d.nodes.CCLabel getLabel(java.lang.String) -> a
    float getWidthRatio() -> f
    org.cocos2d.types.ccColor4B getColorLight(int) -> a
    void moveToZeroY(float,org.cocos2d.layers.CCLayer) -> a
    void moveToZeroYFromBottom(float,org.cocos2d.layers.CCLayer) -> b
    void moveToZeroFromBottom$52184689(org.cocos2d.layers.CCLayer) -> a
    void playMenuMusic() -> g
    void playCreditMusic() -> h
gamers.associate.SlimeAttack.game.Sounds -> gamers.associate.SlimeAttack.a.u:
    boolean disableEffects -> b
    boolean isMusicPlaying -> a
    void preload() -> a
    void setEffectsDisable(boolean) -> a
    void preloadEffect(int) -> a
    void playEffect(int) -> b
    void preloadMusic(int) -> d
    void playMusic$2563266(int) -> c
gamers.associate.SlimeAttack.game.SurvivalGame -> gamers.associate.SlimeAttack.a.v:
    gamers.associate.SlimeAttack.game.SurvivalGame NewGame() -> n
    void reset() -> o
    void render(float) -> a
    gamers.associate.SlimeAttack.levels.GamePlay getType() -> k
    int getBaseScore() -> d
    int getBonusScore(int) -> a
    float getExtraDiff() -> G
    int getNormalBonus() -> H
    int getExtraBonus() -> I
    int getScore() -> c
    void lose() -> p
    void startModeInternal() -> q
gamers.associate.SlimeAttack.game.ThumbnailManager -> gamers.associate.SlimeAttack.a.w:
    float Thumbnail_Margin_Width -> a
    float Thumbnail_Margin_Height -> b
    gamers.associate.SlimeAttack.game.CameraManager cameraManager -> c
    java.util.HashMap thumbnails -> d
    gamers.associate.SlimeAttack.game.Level level -> e
    org.cocos2d.types.CGPoint tl -> f
    org.cocos2d.types.CGPoint tr -> g
    org.cocos2d.types.CGPoint br -> h
    org.cocos2d.types.CGPoint bl -> i
    org.cocos2d.types.CGPoint result -> j
    org.cocos2d.types.CGPoint vector -> k
    org.cocos2d.types.CGPoint st -> l
    float topPadding -> m
    org.cocos2d.types.CGRect thumbRect -> n
    void handle(java.util.ArrayList) -> a
    boolean intersect(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    void removeThumbnail(gamers.associate.SlimeAttack.items.base.ISelectable) -> a
    void reset() -> a
gamers.associate.SlimeAttack.game.TimeAttackGame -> gamers.associate.SlimeAttack.a.x:
    float defaultTime -> l
    float defaultCritic -> m
    float adTime -> n
    float stepCritic -> o
    int timeScore -> p
    int bonusScore -> a
    float startTime -> q
    float leftTime -> r
    float criticTime -> s
    boolean isStarted -> t
    boolean isGameOver -> u
    gamers.associate.SlimeAttack.game.Level level -> b
    float localRender -> v
    float adRender -> w
    boolean isCritic -> x
    org.cocos2d.actions.base.CCAction criticAction -> y
    int bonusTaken -> c
    boolean adHiddenTimer -> d
    float zoomRatio -> z
    int lastNormalTime -> A
    boolean isModeStarted -> B
    boolean hasPaused -> C
    gamers.associate.SlimeAttack.game.TimeAttackGame NewGame() -> r
    void reset() -> o
    float getLeftTime() -> m
    void render(float) -> a
    void setNormalTime() -> n
    void setLevel(gamers.associate.SlimeAttack.game.Level) -> a
    void activateSelection$2dd0007d() -> e
    void setIsStarted(boolean) -> c
    void setPause(boolean) -> a
    int getScore() -> c
    int getBaseScore() -> d
    int getBonusScore() -> s
    int getBonusScore(int) -> a
    void selectBegin$2dd0007d() -> f
    void startLevel() -> a
    void enterGameMode(float) -> e
    void setStartTime(int) -> c
    void setStartTime(float) -> b
    float getStartTime() -> t
    void setCriticTime(int) -> d
    void setCriticTime(float) -> c
    float getCriticTime() -> u
    void stop() -> b
    void setNewAliveSlimyCount(int) -> b
    void lose() -> p
    void setNewBonusTime() -> g
    int neededBonus() -> j
    void pause() -> v
    void resume() -> w
    boolean isStarted() -> h
    int bonusCount() -> i
    gamers.associate.SlimeAttack.levels.GamePlay getType() -> k
    void endMode() -> l
    void startModeInternal() -> q
    gamers.associate.SlimeAttack.game.Rank getRank(int,int) -> a
gamers.associate.SlimeAttack.game.TitleGenerator -> gamers.associate.SlimeAttack.a.y:
    java.util.Random rand -> a
    java.lang.String generateNewTitle() -> a
gamers.associate.SlimeAttack.game.Triangulate -> gamers.associate.SlimeAttack.a.z:
    float EPSILON -> a
    boolean process(java.util.ArrayList,java.util.ArrayList) -> a
gamers.associate.SlimeAttack.game.Util -> gamers.associate.SlimeAttack.a.aa:
    java.nio.FloatBuffer tmpFloatBuf -> a
    void draw$1b821e05(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGRect,float,float,float,float) -> a
    org.cocos2d.types.CGPoint mid(org.cocos2d.types.CGRect) -> a
    void getScaledRect(org.cocos2d.types.CGRect,float,float,float,org.cocos2d.types.CGRect) -> a
    java.lang.String getFormatTime(int) -> a
    void ccDrawCirclePlain$1f0352cc$49527ce9(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint,float) -> a
    void ccDrawTrianglePlain(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    java.nio.FloatBuffer getVertices(int) -> b
    float det(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
gamers.associate.SlimeAttack.game.WorldPackage -> gamers.associate.SlimeAttack.a.ab:
    java.lang.String name -> a
    java.util.List levels -> b
    int levelCount -> c
    boolean isLock -> d
    int order -> e
    java.lang.String backgroundPath -> f
    void defineBackgroundPath() -> c
    void defineName() -> a
    void defineLevelCount() -> b
    java.util.List getLevels() -> d
    java.lang.String getName() -> e
    void setName(java.lang.String) -> a
    void setLevelCount$13462e() -> f
    void createLevelList() -> l
    int getDifficulty(int) -> a
    boolean isLock() -> g
    int getOrder() -> h
    void setOrder(int) -> b
    java.lang.String getBackgroundPath() -> i
    void setBackgroundPath(java.lang.String) -> b
    int getLevelCount() -> j
    int getUnlockLevelCount() -> k
    gamers.associate.SlimeAttack.levels.LevelDefinition getNext(gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
gamers.associate.SlimeAttack.game.ZoomInterpolateAction -> gamers.associate.SlimeAttack.a.ac:
    void actionInternal$133aeb() -> a
gamers.associate.SlimeAttack.game.achievements.Achievement -> gamers.associate.SlimeAttack.a.a.a:
    java.lang.String name -> a
    java.lang.String description -> b
    boolean achieved -> c
    boolean isEndLevel -> d
    boolean lose -> e
    boolean isAchieved() -> a
    void test() -> b
    boolean testInternal() -> c
    boolean isEndLevel() -> d
    void load() -> e
    boolean isLose() -> f
gamers.associate.SlimeAttack.game.achievements.AchievementManager -> gamers.associate.SlimeAttack.a.a.b:
    java.util.HashMap achievements -> a
    java.util.List orderedAchievements -> b
    void add(gamers.associate.SlimeAttack.game.achievements.Achievement) -> a
    void handleEndLevelAchievements(boolean) -> a
    int getAchievedCount() -> a
    void test(java.lang.Class) -> a
    int getAchievementsCount() -> b
gamers.associate.SlimeAttack.game.achievements.AchievementStatistics -> gamers.associate.SlimeAttack.a.a.c:
    boolean isModeStory -> a
    boolean isModeSurvival -> b
    int levelDiff -> c
    int inARow -> d
    int levelNum -> e
    int consecutiveNoTutoWin -> f
    boolean isBoss -> g
    boolean isTuto -> h
    int totalStar -> i
    int neededBonus -> j
    float startTime -> k
    float leftTime -> l
    int landCount -> m
    int shotCount -> n
    float winLeftTime -> o
    long shotSpeed -> p
    int shotInAir -> q
    int unlockDifficulty -> r
    boolean enterCriticZone -> s
    boolean exitCriticZone -> t
    boolean electrified -> u
    boolean dissolved -> v
    boolean sliced -> w
    boolean splashed -> x
    boolean burned -> y
    boolean isLanded -> z
    int finishedSurvivalDifficulty -> A
    gamers.associate.SlimeAttack.game.Rank lastRank -> B
    float currentSpeed -> C
    float currentRotation -> D
    long jumpDuration -> E
    float jumpDistance -> F
    long shotTime -> G
    boolean zoomChanged -> H
    boolean bossKilled -> I
    long lastJumpStartTime -> J
    boolean miniRedKilled -> K
    int bonusTaken -> L
    boolean buttonPushed -> M
    boolean isMode() -> a
gamers.associate.SlimeAttack.game.achievements.AreYouSeriousAch -> gamers.associate.SlimeAttack.a.a.d:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.BronzeAgeAch -> gamers.associate.SlimeAttack.a.a.e:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.CallMeMaxAch -> gamers.associate.SlimeAttack.a.a.f:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.CarabinAch -> gamers.associate.SlimeAttack.a.a.g:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.DefuserAch -> gamers.associate.SlimeAttack.a.a.h:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.DividedAch -> gamers.associate.SlimeAttack.a.a.i:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.DontPushAch -> gamers.associate.SlimeAttack.a.a.j:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.DontStopAch -> gamers.associate.SlimeAttack.a.a.k:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.FlameOnAch -> gamers.associate.SlimeAttack.a.a.l:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.GoldFeverAch -> gamers.associate.SlimeAttack.a.a.m:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.GoldenBoyAch -> gamers.associate.SlimeAttack.a.a.n:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.GreenArrowAch -> gamers.associate.SlimeAttack.a.a.o:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.GreenFlashAch -> gamers.associate.SlimeAttack.a.a.p:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.GreenSquidAch -> gamers.associate.SlimeAttack.a.a.q:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.HardcoreAch -> gamers.associate.SlimeAttack.a.a.r:
    boolean testInternal() -> c
    void load() -> e
gamers.associate.SlimeAttack.game.achievements.JustNeededAch -> gamers.associate.SlimeAttack.a.a.s:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.KeepDiggingAch -> gamers.associate.SlimeAttack.a.a.t:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.LikeABirdAch -> gamers.associate.SlimeAttack.a.a.u:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.LiveLongAch -> gamers.associate.SlimeAttack.a.a.v:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.LuckyLukeAch -> gamers.associate.SlimeAttack.a.a.w:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.MarioStyleAch -> gamers.associate.SlimeAttack.a.a.x:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.MasterEvasionAch -> gamers.associate.SlimeAttack.a.a.y:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.MonteCristoAch -> gamers.associate.SlimeAttack.a.a.z:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.MotherShipAch -> gamers.associate.SlimeAttack.a.a.aa:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.NaniAch -> gamers.associate.SlimeAttack.a.a.ab:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.NormalSlimeAch -> gamers.associate.SlimeAttack.a.a.ac:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.PrisonBreakAch -> gamers.associate.SlimeAttack.a.a.ad:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.PuppetMasterAch -> gamers.associate.SlimeAttack.a.a.ae:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.PushButtonAch -> gamers.associate.SlimeAttack.a.a.af:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.RedAlertAch -> gamers.associate.SlimeAttack.a.a.ag:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.RobinHoodAch -> gamers.associate.SlimeAttack.a.a.ah:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.RoxedElectronAch -> gamers.associate.SlimeAttack.a.a.ai:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.SilverSurferAch -> gamers.associate.SlimeAttack.a.a.aj:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.SniperAch -> gamers.associate.SlimeAttack.a.a.ak:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.SonicBoomAch -> gamers.associate.SlimeAttack.a.a.al:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.SquishAch -> gamers.associate.SlimeAttack.a.a.am:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.SupermanAch -> gamers.associate.SlimeAttack.a.a.an:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.TheDoctorAch -> gamers.associate.SlimeAttack.a.a.ao:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.TheImmortalAch -> gamers.associate.SlimeAttack.a.a.ap:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.TimeOutAch -> gamers.associate.SlimeAttack.a.a.aq:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.UnlockExtremAch -> gamers.associate.SlimeAttack.a.a.ar:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.UnlockHardAch -> gamers.associate.SlimeAttack.a.a.as:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.UnlockNormalAch -> gamers.associate.SlimeAttack.a.a.at:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.game.achievements.YipikayeAch -> gamers.associate.SlimeAttack.a.a.au:
    boolean testInternal() -> c
gamers.associate.SlimeAttack.items.base.CCSpritePolygon -> gamers.associate.SlimeAttack.b.a.a:
    java.nio.FloatBuffer vertices -> a
    java.nio.FloatBuffer texCoords -> b
    java.nio.FloatBuffer colors -> c
    org.cocos2d.types.CGPoint[] baseArray -> d
    gamers.associate.SlimeAttack.items.base.CCSpritePolygon sprite(org.cocos2d.nodes.CCSpriteFrame,float,float) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void setVertices(org.cocos2d.types.CGPoint[]) -> a
gamers.associate.SlimeAttack.items.base.CCSpriteRepeat -> gamers.associate.SlimeAttack.b.a.b:
    float width -> e
    float height -> f
    gamers.associate.SlimeAttack.items.base.CCSpriteRepeat sprite(org.cocos2d.nodes.CCSpriteFrame,float,float) -> b
    void setTextureRect(org.cocos2d.types.CGRect,java.lang.Boolean) -> a
    void setDisplayFrame(org.cocos2d.nodes.CCSpriteFrame) -> a
    void setTexture(org.cocos2d.opengl.CCTexture2D) -> a
gamers.associate.SlimeAttack.items.base.GameItem -> gamers.associate.SlimeAttack.b.a.c:
    java.util.UUID id -> e
    org.cocos2d.types.CGPoint position -> f
    float angle -> g
    float width -> h
    float height -> i
    boolean isPaused -> j
    boolean isActive -> k
    java.lang.String name -> a
    java.util.UUID getId() -> x
    void destroy() -> y
    void render(float) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    org.cocos2d.types.CGPoint getPosition() -> z
    void setPause(boolean) -> a
    void pause() -> v
    void resume() -> w
    void setAngle(float) -> d
    float getAngle() -> A
    void setPosition(org.cocos2d.types.CGPoint) -> a
    void initItem() -> B
    boolean isActive() -> C
    void setActive(boolean) -> b
    float getHeight() -> D
    float getWidth() -> E
    java.lang.String getName() -> F
    void setName(java.lang.String) -> a
    void setSize(float,float) -> a
gamers.associate.SlimeAttack.items.base.GameItemCocos -> gamers.associate.SlimeAttack.b.a.d:
    java.util.Hashtable animationList -> a
    org.cocos2d.actions.base.CCAction currentAction -> b
    org.cocos2d.nodes.CCSprite sprite -> c
    org.cocos2d.nodes.CCNode rootNode -> d
    gamers.associate.SlimeAttack.items.base.SpriteType spriteType -> l
    boolean attachedToRoot -> m
    int zOrder -> n
    org.cocos2d.types.CGSize referenceSize -> o
    java.lang.String referenceAnimationName -> r
    java.lang.String pList -> s
    java.lang.String frameName -> t
    int frameCount -> u
    gamers.associate.SlimeAttack.items.custom.SpriteAction spriteAction -> v
    boolean positionChanged -> p
    boolean angleChanged -> q
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$base$SpriteType -> w
    void destroy() -> y
    org.cocos2d.nodes.CCSprite getSprite() -> l_
    java.lang.String getReferenceAnimationName() -> b
    void setReferenceAnimationName(java.lang.String) -> b
    void transformTexture() -> j
    void setAnimationList(java.util.Hashtable) -> a
    void render(float) -> a
    org.cocos2d.nodes.CCAnimation createAnim(java.lang.String,int) -> a
    org.cocos2d.nodes.CCAnimation createAnim(java.lang.String,int,float) -> a
    org.cocos2d.nodes.CCSpriteFrame getAnimFirstFrame(java.lang.String) -> c
    org.cocos2d.nodes.CCSpriteFrame getReferenceFirstFrame() -> k
    void pause() -> v
    void resume() -> w
    void initItem() -> B
    void postSpriteInit() -> c
    void runReferenceAction() -> i_
    void postCreateSprite(org.cocos2d.nodes.CCSprite) -> a
    gamers.associate.SlimeAttack.items.base.SpriteType getSpriteType() -> k_
    void setRootNode(org.cocos2d.nodes.CCNode) -> a
    void setPosition(org.cocos2d.types.CGPoint) -> a
    void setScale(float) -> b
    void setSize(float,float) -> a
    void setAngle(float) -> d
    void setSpriteType(gamers.associate.SlimeAttack.items.base.SpriteType) -> a
    java.lang.String getpList() -> j_
    void setpList(java.lang.String) -> d
    void setFrameName(java.lang.String) -> e
    java.lang.String getFrameName() -> g
    void setFrameCount(int) -> a
    int getFrameCount() -> h
    gamers.associate.SlimeAttack.items.custom.SpriteAction getSpriteAction() -> i
    void setSpriteAction(gamers.associate.SlimeAttack.items.custom.SpriteAction) -> a
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$base$SpriteType() -> l
gamers.associate.SlimeAttack.items.base.GameItemCocosFactory -> gamers.associate.SlimeAttack.b.a.e:
    void attach(gamers.associate.SlimeAttack.game.IGameItemHandler,org.cocos2d.nodes.CCNode) -> a
    void detach() -> a
gamers.associate.SlimeAttack.items.base.GameItemFactory -> gamers.associate.SlimeAttack.b.a.f:
    boolean isAttached -> a
    gamers.associate.SlimeAttack.game.Level level -> b
    void attach(gamers.associate.SlimeAttack.game.Level) -> a
    void detach() -> a
    gamers.associate.SlimeAttack.items.base.GameItem create(java.lang.String) -> a
    gamers.associate.SlimeAttack.items.base.GameItem create() -> b
    gamers.associate.SlimeAttack.items.base.GameItem create$5636917e(java.lang.String) -> b
    gamers.associate.SlimeAttack.items.base.GameItem instantiate$c8a5a38() -> c
gamers.associate.SlimeAttack.items.base.GameItemPhysic -> gamers.associate.SlimeAttack.b.a.g:
    short Category_Level -> r
    short Category_InGame -> s
    short Category_OutGame -> t
    com.badlogic.gdx.physics.box2d.Body body -> u
    float bodyWidth -> v
    float bodyHeight -> w
    java.util.ArrayList contacts -> x
    boolean noStick -> y
    boolean IsAllSensor -> z
    boolean isPhysicDisabled -> A
    boolean bodyCategorySwitched -> D
    com.badlogic.gdx.math.Vector2 transformVector -> E
    boolean forcePosition -> F
    void destroy() -> y
    void disablePhysic() -> j
    void destroyBody() -> k
    void initItem() -> B
    void initBody() -> l
    com.badlogic.gdx.physics.box2d.Body getBody() -> m
    void render(float) -> a
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void setAngle(float) -> d
    void handleSpecialRemove() -> n
    boolean isNoStick() -> o
    void setNoStick(boolean) -> c
    boolean isIsAllSensor() -> p
    void swithBodyCategory() -> q
    void setForcePosition$1385ff() -> r
gamers.associate.SlimeAttack.items.base.GameItemPhysicFactory -> gamers.associate.SlimeAttack.b.a.h:
gamers.associate.SlimeAttack.items.base.GameItemPhysicFx -> gamers.associate.SlimeAttack.b.a.i:
    com.badlogic.gdx.physics.box2d.World world -> B
    float worldRatio -> C
    void destroy() -> y
gamers.associate.SlimeAttack.items.base.GameItemPhysicFxFactory -> gamers.associate.SlimeAttack.b.a.j:
    com.badlogic.gdx.physics.box2d.World world -> a
    float worldRatio -> b
    void attach(gamers.associate.SlimeAttack.game.IGameItemHandler,org.cocos2d.nodes.CCNode,com.badlogic.gdx.physics.box2d.World,float) -> a
    void detach() -> a
gamers.associate.SlimeAttack.items.base.IBurnable -> gamers.associate.SlimeAttack.b.a.k:
    void burn() -> a
gamers.associate.SlimeAttack.items.base.IDissolvable -> gamers.associate.SlimeAttack.b.a.l:
    void dissolve() -> e
gamers.associate.SlimeAttack.items.base.IElectrificable -> gamers.associate.SlimeAttack.b.a.m:
    void electrify() -> f
    org.cocos2d.types.CGPoint getPosition() -> z
    boolean isActive() -> C
gamers.associate.SlimeAttack.items.base.ISelectable -> gamers.associate.SlimeAttack.b.a.n:
    boolean canSelect(org.cocos2d.types.CGPoint) -> b
    void selectionMove(org.cocos2d.types.CGPoint) -> c
    void selectionStop(org.cocos2d.types.CGPoint) -> d
    void select(org.cocos2d.types.CGPoint) -> e
    void unselect() -> d_
    org.cocos2d.types.CGPoint getPosition() -> z
    org.cocos2d.types.CGRect getSelectionRect() -> d
    org.cocos2d.nodes.CCSprite getThumbail() -> m_
    org.cocos2d.nodes.CCNode getRootNode() -> e_
    boolean isActive() -> C
    boolean simpleSelect() -> f_
    boolean isThumbnailAwaysOn() -> g_
    boolean isThumbnailActive() -> h_
gamers.associate.SlimeAttack.items.base.ITrigerable -> gamers.associate.SlimeAttack.b.a.o:
    java.lang.String getName() -> F
    void trigger$75ba1f9b() -> a_
    void triggerOn$5d527811() -> b_
    void triggerOff$5d527811() -> c_
    org.cocos2d.types.CGPoint getPosition() -> z
gamers.associate.SlimeAttack.items.base.ItemFactoryBase -> gamers.associate.SlimeAttack.b.a.p:
    java.util.Hashtable sharedAnimations -> c
    org.cocos2d.nodes.CCSpriteSheet spriteSheet -> d
    boolean isInit -> e
    boolean isAttached -> f
    org.cocos2d.nodes.CCNode rootNode -> g
    float ratio -> h
    gamers.associate.SlimeAttack.game.IGameItemHandler itemHandler -> i
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$base$SpriteType -> a
    void initAnimation() -> b
    void createAnimList() -> c
    org.cocos2d.nodes.CCAnimation createAnim(java.lang.String,int) -> a
    org.cocos2d.nodes.CCAnimation createAnim(java.lang.String,int,float) -> a
    java.lang.String getPlistPng() -> d
    void destroy() -> e
    gamers.associate.SlimeAttack.items.base.GameItemCocos create(float,float) -> a
    gamers.associate.SlimeAttack.items.base.GameItemCocos create(float,float,float,float) -> a
    gamers.associate.SlimeAttack.items.base.GameItemCocos create(java.lang.String,float,float,float,float) -> a
    gamers.associate.SlimeAttack.items.base.GameItemCocos createBL(java.lang.String,float,float,float,float) -> b
    gamers.associate.SlimeAttack.items.base.GameItemCocos createBL(float,float,float,float) -> b
    void preInit(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> a
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    org.cocos2d.nodes.CCSprite getAnimatedSprite(java.lang.String,float) -> a
    org.cocos2d.actions.base.CCAction getAnimation$49a2513d(java.lang.String) -> a
    org.cocos2d.actions.base.CCAction getAnimation(java.lang.String) -> b
    org.cocos2d.actions.base.CCAction getAnimation$ad9f91(java.lang.String,float) -> b
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$base$SpriteType() -> a
gamers.associate.SlimeAttack.items.base.SpriteSheetCacheInfo -> gamers.associate.SlimeAttack.b.a.q:
    int Included_For_Attach -> a
    int Excluded_For_Attach -> b
    java.lang.String name -> c
    org.cocos2d.nodes.CCSpriteSheet spriteSheet -> d
    int zOrder -> e
    int attachType -> f
    org.cocos2d.nodes.CCSpriteSheet getSpriteSheet() -> a
    int getZOrder() -> b
    java.lang.String getName() -> c
    int getAttachType() -> d
gamers.associate.SlimeAttack.items.base.SpriteSheetFactory -> gamers.associate.SlimeAttack.b.a.r:
    java.util.Hashtable SpriteSheetList -> b
    org.cocos2d.nodes.CCNode rootNode -> c
    boolean isAttached -> d
    int zDefault -> a
    void add(java.lang.String,int) -> a
    void add(java.lang.String,boolean,int) -> a
    org.cocos2d.nodes.CCSpriteSheet getSpriteSheet(java.lang.String) -> a
    void destroy() -> a
    void attachAll(org.cocos2d.nodes.CCNode) -> a
    void attach(java.lang.String,org.cocos2d.nodes.CCNode) -> a
    void detachAll() -> b
gamers.associate.SlimeAttack.items.base.SpriteType -> gamers.associate.SlimeAttack.b.a.s:
    gamers.associate.SlimeAttack.items.base.SpriteType UNKNOWN -> a
    gamers.associate.SlimeAttack.items.base.SpriteType ANIM_SCALE -> b
    gamers.associate.SlimeAttack.items.base.SpriteType ANIM_SCALE_DIRECT -> c
    gamers.associate.SlimeAttack.items.base.SpriteType SINGLE_SCALE -> d
    gamers.associate.SlimeAttack.items.base.SpriteType ANIM_REPEAT -> e
    gamers.associate.SlimeAttack.items.base.SpriteType SINGLE_REPEAT -> f
    gamers.associate.SlimeAttack.items.base.SpriteType POLYGON_REPEAT -> g
    gamers.associate.SlimeAttack.items.base.SpriteType SINGLE_SCALE_DIRECT -> h
    gamers.associate.SlimeAttack.items.base.SpriteType NONE -> i
    gamers.associate.SlimeAttack.items.base.SpriteType[] ENUM$VALUES -> j
    gamers.associate.SlimeAttack.items.base.SpriteType[] values() -> values
    gamers.associate.SlimeAttack.items.base.SpriteType valueOf(java.lang.String) -> valueOf
gamers.associate.SlimeAttack.items.base.TextureAnimation -> gamers.associate.SlimeAttack.b.a.t:
    void createFramesFromFiles(java.lang.String,int) -> a
    java.lang.String keyName(java.lang.String,int) -> b
    java.lang.String formatFrameNumber(int) -> a
gamers.associate.SlimeAttack.items.base.TextureAnimation$1 -> gamers.associate.SlimeAttack.b.a.u:
    java.lang.String val$path -> a
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
gamers.associate.SlimeAttack.items.custom.BecBunsen -> gamers.associate.SlimeAttack.b.b.a:
    java.lang.String Anim_Base -> D
    java.lang.String Anim_Wait -> E
    java.lang.String Anim_Starting -> F
    float Default_Width -> G
    float Default_Height -> H
    float Reference_Width -> I
    float Reference_Height -> J
    float Reference_Fire_Width -> K
    float Reference_Fire_Height -> L
    float Reference_Base_Width -> M
    float Reference_Base_Height -> N
    float base_width -> O
    float base_height -> P
    float fire_width -> Q
    float fire_height -> R
    boolean isOn -> S
    boolean startOn -> T
    float animDelay -> U
    void setAnimDelay(float) -> c
    float getAnimDelay() -> s
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void turnOn(boolean) -> e
    void turnOff(boolean) -> f
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void trigger$75ba1f9b() -> a_
    void setStartOn(boolean) -> d
    void initanimation() -> t
    boolean getStartOn() -> u
    void triggerOn$5d527811() -> b_
    void triggerOff$5d527811() -> c_
gamers.associate.SlimeAttack.items.custom.BecBunsenFactory -> gamers.associate.SlimeAttack.b.b.b:
    boolean isOn -> j
    float delay -> k
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.BecBunsen createBL(float,float,float,float,java.lang.String,float,boolean) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
gamers.associate.SlimeAttack.items.custom.Box -> gamers.associate.SlimeAttack.b.b.c:
    java.lang.String Anim_Base_tube -> D
    java.lang.String Anim_Base_bottle -> E
    java.lang.String Anim_Base_glassbox -> F
    java.lang.String Anim_Base_multitubes -> G
    boolean chainMode -> H
    int type -> I
    boolean isStatic -> J
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    int getType() -> s
    boolean isStatic() -> t
gamers.associate.SlimeAttack.items.custom.BoxFactory -> gamers.associate.SlimeAttack.b.b.d:
    int currentType -> j
    boolean isStatic -> k
    boolean isStickable -> l
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.Box create(java.lang.String,float,float,float,float,int,boolean,boolean) -> a
    gamers.associate.SlimeAttack.items.custom.Box createTubeBL(java.lang.String,float,float,float,float,boolean,boolean) -> a
    gamers.associate.SlimeAttack.items.custom.Box createMultitubesBL(java.lang.String,float,float,float,float,boolean,boolean) -> b
    gamers.associate.SlimeAttack.items.custom.Box createGlassboxBL(java.lang.String,float,float,float,float,boolean,boolean) -> c
    gamers.associate.SlimeAttack.items.custom.Box createBottleBL(java.lang.String,float,float,float,float,boolean,boolean) -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.BumperAngle -> gamers.associate.SlimeAttack.b.b.e:
    float Default_Powa -> D
    java.lang.String Anim_Wait -> E
    java.lang.String Anim_Bump -> F
    float Default_Width -> G
    float Default_Height -> H
    float Reference_Width -> I
    float Reference_Height -> J
    float powa -> K
    void setPowa(float) -> c
    void initBody() -> l
    void waitAnim() -> s
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
gamers.associate.SlimeAttack.items.custom.BumperAngleFactory -> gamers.associate.SlimeAttack.b.b.f:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos create(float,float,float,float) -> a
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.Button -> gamers.associate.SlimeAttack.b.b.g:
    java.lang.String Anim_Wait_On -> D
    java.lang.String Anim_Wait_Off -> E
    java.lang.String Anim_Countdown -> F
    float Only_Once -> I
    float Default_Width -> G
    float Default_Height -> H
    float Reference_Width -> J
    float Reference_Height -> K
    java.lang.String target -> L
    float resetTime -> M
    boolean isEnabled -> N
    boolean isOn -> O
    org.cocos2d.actions.base.CCAction waitAnim -> P
    void setTarget(java.lang.String) -> f
    java.lang.String getTarget() -> s
    void setResetTime(float) -> c
    float getResetTime() -> t
    void initBody() -> l
    void waitAnim() -> u
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
gamers.associate.SlimeAttack.items.custom.ButtonFactory -> gamers.associate.SlimeAttack.b.b.h:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.Button createBL(java.lang.String,float,float,float,float,java.lang.String,float) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.Camera -> gamers.associate.SlimeAttack.b.b.i:
    java.lang.String Anim_Wait -> D
    float Default_Width -> E
    float Default_Height -> F
    float Default_fov -> G
    float Default_distance -> H
    float Reference_Width -> I
    float Reference_Height -> J
    boolean isOn -> K
    java.util.List targets -> L
    float fov -> M
    float viewDistance -> N
    boolean startOn -> O
    java.lang.String targetName -> P
    org.cocos2d.types.CGPoint targetPoint -> Q
    org.cocos2d.types.CGPoint v1 -> R
    org.cocos2d.types.CGPoint v2 -> S
    boolean spoted -> T
    boolean vComputed -> U
    float rotateTime -> V
    float rotateAngle -> W
    float baseAngle -> X
    boolean baseAngleDefined -> Y
    org.cocos2d.types.CGPoint tmp1 -> Z
    org.cocos2d.types.CGPoint tmp2 -> aa
    int miniTimer -> ab
    float rotateAngleCurrent -> ac
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    boolean isStartOn() -> s
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void render(float) -> a
    void initState() -> t
    java.lang.String getTargetName() -> u
    float getFov() -> G
    float getViewDistance() -> H
    float getRotateTime() -> I
    float getRotateAngle() -> J
gamers.associate.SlimeAttack.items.custom.CameraFactory -> gamers.associate.SlimeAttack.b.b.j:
    java.lang.String targetName -> j
    boolean startOn -> k
    float fov -> l
    float viewdistance -> m
    float rotateTime -> n
    float rotateAngle -> o
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.Camera createBL(java.lang.String,float,float,float,float,java.lang.String,boolean,float,float,float,float) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.CircularSaw -> gamers.associate.SlimeAttack.b.b.k:
    java.lang.String Anim_Running -> D
    java.lang.String Anim_Wait -> E
    float Default_Width -> F
    float Default_Height -> G
    float Reference_Width -> H
    float Reference_Height -> I
    boolean isOn -> J
    boolean startOn -> K
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void turnOn() -> u
    void animateOn() -> G
    void turnOff() -> H
    void animateOff() -> I
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void trigger$75ba1f9b() -> a_
    void setStartOn(boolean) -> d
    boolean getStartOn() -> s
    void initAnimation() -> t
    void triggerOn$5d527811() -> b_
    void triggerOff$5d527811() -> c_
gamers.associate.SlimeAttack.items.custom.CircularSawFactory -> gamers.associate.SlimeAttack.b.b.l:
    boolean isOn -> j
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.CircularSaw createBL(float,float,float,float,java.lang.String,boolean) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
gamers.associate.SlimeAttack.items.custom.CocosFactory -> gamers.associate.SlimeAttack.b.b.m:
    java.lang.String currentPlistName -> a
    java.lang.String currentFrameName -> b
    int currentFrameCount -> j
    gamers.associate.SlimeAttack.items.custom.SpriteAction spriteAction -> k
    org.cocos2d.nodes.CCAnimation animation -> l
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos create$3f3d532(java.lang.String,float,float,float,float,java.lang.String,java.lang.String) -> a
    gamers.associate.SlimeAttack.items.base.GameItemCocos createBL(java.lang.String,float,float,float,float,java.lang.String,java.lang.String,int) -> a
    void createDynamicAnimList() -> f
    void preInit(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> a
    gamers.associate.SlimeAttack.items.base.GameItem createBL(java.lang.String,float,float,float,float,java.lang.String,java.lang.String,int,gamers.associate.SlimeAttack.items.custom.SpriteAction) -> a
gamers.associate.SlimeAttack.items.custom.Director -> gamers.associate.SlimeAttack.b.b.n:
    java.lang.String target -> a
    gamers.associate.SlimeAttack.items.custom.SpriteAction action -> b
    boolean isInit -> c
    void render(float) -> a
    java.lang.String getTarget() -> a
    gamers.associate.SlimeAttack.items.custom.SpriteAction getAction() -> b
gamers.associate.SlimeAttack.items.custom.DirectorFactory -> gamers.associate.SlimeAttack.b.b.o:
    java.lang.String target -> c
    gamers.associate.SlimeAttack.items.custom.SpriteAction action -> d
    gamers.associate.SlimeAttack.items.custom.Director create(java.lang.String,java.lang.String,gamers.associate.SlimeAttack.items.custom.SpriteAction) -> a
    gamers.associate.SlimeAttack.items.base.GameItem instantiate$c8a5a38() -> c
gamers.associate.SlimeAttack.items.custom.EnergyBall -> gamers.associate.SlimeAttack.b.b.p:
    java.lang.String Anim_Wait -> D
    float Default_Width -> G
    float Default_Height -> H
    float Reference_Width -> E
    float Reference_Height -> F
    float Default_Body_Width -> I
    float Default_Body_Height -> J
    org.cocos2d.types.CGPoint tmp -> K
    boolean move -> L
    org.cocos2d.types.CGPoint direction -> M
    float speed -> N
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void waitAnim() -> s
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void runReferenceAction() -> i_
    void moveTo(org.cocos2d.types.CGPoint,float) -> a
    void render(float) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    float getMoveCoord(float,float) -> b
gamers.associate.SlimeAttack.items.custom.EnergyBallFactory -> gamers.associate.SlimeAttack.b.b.q:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.EnergyBallGun -> gamers.associate.SlimeAttack.b.b.r:
    float Default_BallSpeed -> D
    float Default_WaitTime -> E
    java.util.List targets -> L
    float ballSpeed -> M
    float waitTime -> N
    float nextShoot -> O
    void render(float) -> a
    float getBallSpeed() -> s
    void setBallSpeed(float) -> c
    float getWaitTime() -> t
    void setWaitTime(float) -> e
gamers.associate.SlimeAttack.items.custom.EnergyBallGunFactory -> gamers.associate.SlimeAttack.b.b.s:
    boolean isOn -> j
    java.lang.String target -> k
    float ballSpeed -> l
    float waitTime -> m
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.EnergyBallGun createBL(float,float,float,float,java.lang.String,java.lang.String,boolean,float,float) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
gamers.associate.SlimeAttack.items.custom.EvacuationPlug -> gamers.associate.SlimeAttack.b.b.t:
    java.lang.String Anim_Base -> D
    float Default_Width -> E
    float Default_Height -> F
    boolean isRemoveNextStep -> G
    float getHeightFromWidth(float) -> c
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void render(float) -> a
gamers.associate.SlimeAttack.items.custom.EvacuationPlugfactory -> gamers.associate.SlimeAttack.b.b.u:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.Gate -> gamers.associate.SlimeAttack.b.b.v:
    java.lang.String Anim_Closed -> r
    java.lang.String Anim_Opened -> s
    java.lang.String Anim_Opening -> t
    float Default_Width -> u
    float Default_Height -> v
    org.cocos2d.actions.base.CCAction waitAction -> w
    java.lang.String getReferenceAnimationName() -> b
    void closed() -> j
gamers.associate.SlimeAttack.items.custom.GateFactory -> gamers.associate.SlimeAttack.b.b.w:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.GoalPortal -> gamers.associate.SlimeAttack.b.b.x:
    java.lang.String Anim_Goal_Portal -> D
    java.lang.String thumbnail -> G
    float Default_Width -> E
    float Default_Height -> F
    org.cocos2d.nodes.CCSprite thumbnailSprite -> H
    boolean nextStepActivate -> I
    void initBody() -> l
    void createPortal() -> s
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void render(float) -> a
    void setActive(boolean) -> b
    org.cocos2d.actions.base.CCFiniteTimeAction getAnimatePortalEnterReference() -> t
    boolean canSelect(org.cocos2d.types.CGPoint) -> b
    void selectionMove(org.cocos2d.types.CGPoint) -> c
    void selectionStop(org.cocos2d.types.CGPoint) -> d
    void select(org.cocos2d.types.CGPoint) -> e
    void unselect() -> d_
    org.cocos2d.types.CGRect getSelectionRect() -> d
    org.cocos2d.nodes.CCSprite getThumbail() -> m_
    org.cocos2d.nodes.CCNode getRootNode() -> e_
    boolean simpleSelect() -> f_
    boolean isThumbnailAwaysOn() -> g_
    boolean isThumbnailActive() -> h_
gamers.associate.SlimeAttack.items.custom.GoalPortalFactory -> gamers.associate.SlimeAttack.b.b.y:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.HomeLevelHandler -> gamers.associate.SlimeAttack.b.b.z:
    long startHome -> a
    double nextRand -> b
    int maxSlime -> c
    double minSpawn -> d
    double maxSpawn -> l
    boolean isPaused -> m
    gamers.associate.SlimeAttack.items.custom.SpawnPortal spawnPortal -> n
    void setPortal(gamers.associate.SlimeAttack.items.custom.SpawnPortal) -> a
    void render(float) -> a
gamers.associate.SlimeAttack.items.custom.HomeLevelHandlerFactory -> gamers.associate.SlimeAttack.b.b.aa:
    gamers.associate.SlimeAttack.items.base.GameItem instantiate$c8a5a38() -> c
gamers.associate.SlimeAttack.items.custom.LaserBeam -> gamers.associate.SlimeAttack.b.b.ab:
    float Default_Height -> D
    org.cocos2d.types.CGPoint source -> E
    org.cocos2d.types.CGPoint target -> F
    boolean isOn -> G
    org.cocos2d.types.CGPoint ref -> H
    org.cocos2d.types.CGPoint diff -> I
    gamers.associate.SlimeAttack.items.base.ITrigerable targetItem -> J
    gamers.associate.SlimeAttack.items.custom.LaserGun sourceItem -> K
    org.cocos2d.types.CGPoint tmp -> L
    void setSource(org.cocos2d.types.CGPoint) -> b
    void setTarget(org.cocos2d.types.CGPoint) -> c
    void setOn(boolean) -> d
    void refreshBeam() -> s
    void refresh() -> G
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void switchOn() -> t
    void switchOff() -> u
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void setTargetItem(gamers.associate.SlimeAttack.items.base.ITrigerable) -> a
    void setSourceItem(gamers.associate.SlimeAttack.items.custom.LaserGun) -> a
gamers.associate.SlimeAttack.items.custom.LaserBeamFactory -> gamers.associate.SlimeAttack.b.b.ac:
    org.cocos2d.types.CGPoint source -> j
    org.cocos2d.types.CGPoint target -> k
    boolean isOn -> l
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.LaserBeam create$79d11647(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
gamers.associate.SlimeAttack.items.custom.LaserGun -> gamers.associate.SlimeAttack.b.b.ad:
    java.lang.String Anim_On -> F
    java.lang.String Anim_Wait -> G
    java.lang.String Anim_Firing -> H
    float Default_Width -> I
    float Default_Height -> J
    float Reference_Width -> D
    float Reference_Height -> E
    float Default_Beam_Offset -> L
    boolean isOn -> M
    boolean turningOn -> K
    boolean startOn -> N
    java.lang.String target -> O
    java.util.ArrayList beam -> P
    float beamOffset -> Q
    org.cocos2d.types.CGPoint tmp -> R
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void turnOn(boolean) -> e
    void turnOff(boolean) -> f
    void trigger$75ba1f9b() -> a_
    void setStartOn(boolean) -> d
    boolean getStartOn() -> u
    void initanimation() -> G
    void setTarget(java.lang.String) -> f
    java.lang.String getTarget() -> H
    java.util.ArrayList getBeam() -> s
    org.cocos2d.types.CGPoint getSourcePoint() -> I
    void render(float) -> a
    boolean isOn() -> J
    void triggerOn$5d527811() -> b_
    void triggerOff$5d527811() -> c_
gamers.associate.SlimeAttack.items.custom.LaserGunFactory -> gamers.associate.SlimeAttack.b.b.ae:
    boolean isOn -> j
    java.lang.String target -> k
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.LaserGun createBL(float,float,float,float,java.lang.String,java.lang.String,boolean) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
gamers.associate.SlimeAttack.items.custom.Lava -> gamers.associate.SlimeAttack.b.b.af:
    java.lang.String Anim_Init -> D
    void initBody() -> l
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void runReferenceAction() -> i_
    java.lang.String getReferenceAnimationName() -> b
gamers.associate.SlimeAttack.items.custom.LavaFactory -> gamers.associate.SlimeAttack.b.b.ag:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.LevelEnd -> gamers.associate.SlimeAttack.b.b.ah:
    void initBody() -> l
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
gamers.associate.SlimeAttack.items.custom.LevelEndFactory -> gamers.associate.SlimeAttack.b.b.ai:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.Lightning -> gamers.associate.SlimeAttack.b.b.aj:
    float DefaultLife -> a
    org.cocos2d.types.CGPoint tmp -> b
    org.cocos2d.types.CGPoint ref -> c
    org.cocos2d.types.CGPoint tmpDist -> d
    float LigthningHeightRatio -> l
    gamers.associate.SlimeAttack.items.base.GameItem sprite -> m
    float life -> n
    gamers.associate.SlimeAttack.items.base.GameItem source -> o
    gamers.associate.SlimeAttack.items.base.IElectrificable target -> p
    boolean isEnded -> q
    void render(float) -> a
    boolean isEnded() -> a
gamers.associate.SlimeAttack.items.custom.LightningFactory -> gamers.associate.SlimeAttack.b.b.ak:
gamers.associate.SlimeAttack.items.custom.Liquid -> gamers.associate.SlimeAttack.b.b.al:
    java.lang.String Anim_Init -> D
    void initBody() -> l
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void runReferenceAction() -> i_
    java.lang.String getReferenceAnimationName() -> b
gamers.associate.SlimeAttack.items.custom.LiquidFactory -> gamers.associate.SlimeAttack.b.b.am:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.LiquidSurface -> gamers.associate.SlimeAttack.b.b.an:
    java.lang.String Anim_Init -> D
    float Default_Height -> E
    void initBody() -> l
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void runReferenceAction() -> i_
    java.lang.String getReferenceAnimationName() -> b
gamers.associate.SlimeAttack.items.custom.LiquidSurfaceFactory -> gamers.associate.SlimeAttack.b.b.ao:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.MenuNode -> gamers.associate.SlimeAttack.b.b.ap:
    java.lang.String Anim_Node -> r
    float Default_Width -> s
    float Default_Height -> t
    java.lang.String nodeId -> u
    java.lang.String targetLevel -> v
    boolean isSelected -> w
    org.cocos2d.types.CGRect scaledRect -> x
    java.util.HashMap connections -> y
    gamers.associate.SlimeAttack.levels.LevelDefinition levelDef -> z
    boolean postBuildParsed -> A
    java.util.ArrayList parents -> B
    java.lang.String getReferenceAnimationName() -> b
    void createPortal() -> k
    void setTargetLevel(java.lang.String) -> f
    void setNodeId(java.lang.String) -> g
    java.lang.String getNodeId() -> l
    boolean canSelect(org.cocos2d.types.CGPoint) -> b
    org.cocos2d.nodes.CCNode getRootNode() -> e_
    org.cocos2d.types.CGRect getSelectionRect() -> d
    org.cocos2d.nodes.CCSprite getThumbail() -> m_
    void select(org.cocos2d.types.CGPoint) -> e
    void selectionMove(org.cocos2d.types.CGPoint) -> c
    void selectionStop(org.cocos2d.types.CGPoint) -> d
    boolean simpleSelect() -> f_
    void initItem() -> B
    void handleLockState() -> o
    void unselect() -> d_
    void addConnection(java.lang.String) -> h
    gamers.associate.SlimeAttack.levels.LevelDefinition getLevelDefinition() -> p
    void setUnlock$1385ff() -> m
    void unlockChildConnectionsGraph(gamers.associate.SlimeAttack.items.custom.MenuNode) -> a
    void destroy() -> y
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    boolean isCurrentSelection() -> n
    void setCurrentSelection(boolean) -> c
    boolean isThumbnailAwaysOn() -> g_
    boolean isThumbnailActive() -> h_
gamers.associate.SlimeAttack.items.custom.MenuNodeFactory -> gamers.associate.SlimeAttack.b.b.aq:
    java.util.HashMap nodes -> a
    java.lang.String name -> b
    java.lang.String target -> j
    java.lang.String conn1 -> k
    java.lang.String conn2 -> l
    java.lang.String conn3 -> m
    java.lang.String conn4 -> n
    gamers.associate.SlimeAttack.items.custom.MenuNode currentNode -> o
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.MenuNode createBL(float,float,float,float,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void addConnection(gamers.associate.SlimeAttack.items.custom.MenuNode,java.lang.String) -> a
    void setCurrentNode(gamers.associate.SlimeAttack.items.custom.MenuNode) -> a
    gamers.associate.SlimeAttack.items.custom.MenuNode getCurrentNode() -> f
    gamers.associate.SlimeAttack.items.custom.MenuNode get(java.lang.String) -> c
    void remove(java.lang.String) -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void initItem(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> b
gamers.associate.SlimeAttack.items.custom.MenuSprite -> gamers.associate.SlimeAttack.b.b.ar:
    float Width -> a
    float Height -> b
    float ControlSquareWidth -> c
    float ControlSquareHeight -> d
    float SquareEmptyWidth -> e
    float SquareEmptyHeight -> f
gamers.associate.SlimeAttack.items.custom.PhysicPolygon -> gamers.associate.SlimeAttack.b.b.as:
    java.lang.String Anim_Base_Fill -> D
    java.lang.String Anim_Base_Empty -> E
    org.cocos2d.types.CGPoint[] vertices -> F
    org.cocos2d.types.CGPoint[] bodyPoints -> G
    boolean isDynamic -> H
    int type -> I
    void initPoly(boolean,org.cocos2d.types.CGPoint[]) -> a
    void postCreateSprite(org.cocos2d.nodes.CCSprite) -> a
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void runReferenceAction() -> i_
    int getType() -> s
    boolean isDynamic() -> t
    org.cocos2d.types.CGPoint[] getBodyPoints() -> u
gamers.associate.SlimeAttack.items.custom.PhysicPolygonFactory -> gamers.associate.SlimeAttack.b.b.at:
    boolean isDynamic -> j
    org.cocos2d.types.CGPoint[] bodyPoints -> k
    int currentType -> l
    boolean isStickable -> m
    gamers.associate.SlimeAttack.items.custom.PhysicPolygon create(java.lang.String,float,float,float,float,boolean,org.cocos2d.types.CGPoint[],int,boolean) -> a
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void preInit(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.Platform -> gamers.associate.SlimeAttack.b.b.au:
    float Default_Height -> D
    java.lang.String Anim_Base_Sticky -> E
    java.lang.String Anim_Base_Bump -> F
    java.lang.String Anim_Base_NoSticky -> G
    java.lang.String Anim_Base_Icy -> H
    java.lang.String Anim_Base_Wall -> I
    java.lang.String Anim_Base_Corner -> J
    java.lang.String Anim_Base_T -> K
    java.lang.String Anim_Base_Cross -> L
    java.lang.String Anim_Base_End -> M
    java.lang.String Anim_Base_NoSticky_Corner -> N
    java.lang.String Anim_Base_NoSticky_End -> O
    int type -> P
    boolean move -> Q
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    int getType() -> s
    void animate() -> t
gamers.associate.SlimeAttack.items.custom.PlatformFactory -> gamers.associate.SlimeAttack.b.b.av:
    int currentType -> j
    boolean currentMove -> k
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.Platform createBL(java.lang.String,float,float,float,float) -> c
    gamers.associate.SlimeAttack.items.custom.Platform create(java.lang.String,float,float,float,float,int) -> a
    gamers.associate.SlimeAttack.items.custom.Platform create$7365167f(float,float,float) -> a
    gamers.associate.SlimeAttack.items.custom.Platform createBumpBL(java.lang.String,float,float,float,float) -> d
    gamers.associate.SlimeAttack.items.custom.Platform createNoStickyBL(java.lang.String,float,float,float,float) -> e
    gamers.associate.SlimeAttack.items.custom.Platform createIcyBL(java.lang.String,float,float,float,float) -> f
    gamers.associate.SlimeAttack.items.custom.Platform createWallBL(java.lang.String,float,float,float,float) -> g
    gamers.associate.SlimeAttack.items.custom.Platform createCornerBL(java.lang.String,float,float,float,float) -> h
    gamers.associate.SlimeAttack.items.custom.Platform createTBL(java.lang.String,float,float,float,float) -> i
    gamers.associate.SlimeAttack.items.custom.Platform createCrossBL(java.lang.String,float,float,float,float) -> j
    gamers.associate.SlimeAttack.items.custom.Platform createEndBL(java.lang.String,float,float,float,float) -> k
    gamers.associate.SlimeAttack.items.custom.Platform createNoStickyCornerBL(java.lang.String,float,float,float,float) -> l
    gamers.associate.SlimeAttack.items.custom.Platform createNoStickyEndBL(java.lang.String,float,float,float,float) -> m
    gamers.associate.SlimeAttack.items.base.GameItemCocos createBL(java.lang.String,float,float,float,float) -> b
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.RankFactory -> gamers.associate.SlimeAttack.b.b.aw:
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$game$Rank -> a
    org.cocos2d.nodes.CCSprite getSprite(gamers.associate.SlimeAttack.game.Rank) -> a
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$game$Rank() -> a
gamers.associate.SlimeAttack.items.custom.Red -> gamers.associate.SlimeAttack.b.b.ax:
    float Default_Body_Width -> D
    float Default_Body_Height -> E
    java.lang.String thumbnail -> M
    java.lang.String Anim_Bite -> F
    java.lang.String Anim_Breaking -> G
    java.lang.String Anim_Contracting -> H
    java.lang.String Anim_Wait -> I
    java.lang.String Anim_WaitDefense -> J
    java.lang.String Anim_WaitDead -> K
    java.lang.String Anim_Turning -> L
    float SlimeMaxDistance -> N
    int maxWaitJump -> O
    float minTimeBeforeHit -> P
    long lastHitTime -> Q
    long nextTrigger -> R
    boolean waitTrigger -> S
    int life -> T
    gamers.associate.SlimeAttack.items.custom.RedState state -> U
    org.cocos2d.actions.base.CCAction waitAction -> V
    org.cocos2d.actions.base.CCAction waitActionDefense -> W
    org.cocos2d.actions.base.CCAction waitActionDead -> X
    org.cocos2d.actions.base.CCAction currentWait -> Y
    com.badlogic.gdx.math.Vector2 impulse -> Z
    java.util.Random rand -> aa
    boolean isBoss -> ab
    float densityBoss -> ac
    float densityNorm -> ad
    float currentDir -> ae
    com.badlogic.gdx.physics.box2d.Body normalBody -> af
    org.cocos2d.nodes.CCSprite thumbnailSprite -> ag
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$custom$RedState -> ah
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void prepareNextJump(int) -> c
    void goToDeadState() -> G
    void waitAnimReal() -> s
    void switchWait(gamers.associate.SlimeAttack.items.custom.RedState) -> a
    void render(float) -> a
    int impulse$8d296f0(gamers.associate.SlimeAttack.items.base.GameItem,gamers.associate.SlimeAttack.items.base.GameItemPhysic,int,int) -> a
    boolean isBoss() -> t
    int getLife() -> u
    void setLife(int) -> b
    boolean canSelect(org.cocos2d.types.CGPoint) -> b
    void selectionMove(org.cocos2d.types.CGPoint) -> c
    void selectionStop(org.cocos2d.types.CGPoint) -> d
    void select(org.cocos2d.types.CGPoint) -> e
    void unselect() -> d_
    org.cocos2d.types.CGRect getSelectionRect() -> d
    org.cocos2d.nodes.CCSprite getThumbail() -> m_
    org.cocos2d.nodes.CCNode getRootNode() -> e_
    boolean simpleSelect() -> f_
    boolean isThumbnailAwaysOn() -> g_
    boolean isThumbnailActive() -> h_
    void dissolve() -> e
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$custom$RedState() -> H
gamers.associate.SlimeAttack.items.custom.RedFactory -> gamers.associate.SlimeAttack.b.b.ay:
    boolean isBoss -> j
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.Red createBL(java.lang.String,float,float,float,float,boolean) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.RedState -> gamers.associate.SlimeAttack.b.b.az:
    gamers.associate.SlimeAttack.items.custom.RedState Wait -> a
    gamers.associate.SlimeAttack.items.custom.RedState PrepareAttack -> b
    gamers.associate.SlimeAttack.items.custom.RedState Attack -> c
    gamers.associate.SlimeAttack.items.custom.RedState Defense -> d
    gamers.associate.SlimeAttack.items.custom.RedState Dead -> e
    gamers.associate.SlimeAttack.items.custom.RedState[] ENUM$VALUES -> f
    gamers.associate.SlimeAttack.items.custom.RedState[] values() -> values
    gamers.associate.SlimeAttack.items.custom.RedState valueOf(java.lang.String) -> valueOf
gamers.associate.SlimeAttack.items.custom.Slimy -> gamers.associate.SlimeAttack.b.b.ba:
    java.lang.String Anim_Burned_Wait -> D
    java.lang.String Anim_Burning -> E
    java.lang.String Anim_Buzz -> F
    java.lang.String Anim_Dissolve -> G
    java.lang.String Anim_Electrified -> H
    java.lang.String Anim_Electrified_Short -> I
    java.lang.String Anim_Falling -> J
    java.lang.String Anim_Landing_H -> K
    java.lang.String Anim_Landing_V -> L
    java.lang.String Anim_Sliced -> M
    java.lang.String Anim_Spawn -> N
    java.lang.String Anim_Spawn_Falling -> O
    java.lang.String Anim_Splash -> P
    java.lang.String Anim_Success -> Q
    java.lang.String Anim_Teleport -> R
    java.lang.String Anim_Wait_H -> S
    java.lang.String Anim_Wait_V -> T
    float Default_Width -> U
    float Default_Height -> V
    float Default_Body_Width -> W
    float Default_Body_Height -> X
    float AnimSuccess_Width -> Y
    float Reference_Width -> af
    float Reference_Height -> ag
    float deathDelayTime -> ah
    java.lang.Boolean isLanded -> Z
    org.cocos2d.actions.base.CCAction waitAction -> aa
    java.lang.Boolean isDead -> ab
    java.lang.Boolean isDying -> ac
    boolean hasLanded -> ad
    java.lang.String Anim_LastDeath -> ae
    void initBody() -> l
    void createFixture() -> s
    void waitAnim() -> t
    void land() -> u
    void render(float) -> a
    void win() -> G
    void lose() -> H
    void burn() -> a
    void splash() -> I
    void slice() -> J
    void electrify() -> f
    void dissolve() -> e
    void killInAction(java.lang.String) -> f
    void prekill() -> K
    void kill() -> L
    boolean isDead() -> M
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
    void contactInternal(gamers.associate.SlimeAttack.game.ContactInfo) -> b
    void runReferenceAction() -> i_
    void handleSpecialRemove() -> n
    boolean isAlive() -> N
    void fadeDestroy() -> O
    void detach(gamers.associate.SlimeAttack.items.base.GameItemPhysic) -> a
    void detach() -> P
gamers.associate.SlimeAttack.items.custom.SlimyFactory -> gamers.associate.SlimeAttack.b.b.bb:
    int currentType -> j
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.Slimy create(java.lang.String,float,float,float) -> a
    gamers.associate.SlimeAttack.items.custom.SlimyJump createJump$2e1d14b(java.lang.String,float,float) -> a
    gamers.associate.SlimeAttack.items.custom.Slimy create(java.lang.String,float,float,float,int) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.SlimyGrow -> gamers.associate.SlimeAttack.b.b.bc:
    int Max_Grow -> af
    int counter -> ag
    boolean isEaten -> ah
    int targetGrowDif -> ai
    void contactInternal(gamers.associate.SlimeAttack.game.ContactInfo) -> b
    void render(float) -> a
    void kill() -> L
    void scale(float) -> c
gamers.associate.SlimeAttack.items.custom.SlimyJump -> gamers.associate.SlimeAttack.b.b.bd:
    java.lang.String thumbSprite -> af
    java.lang.String Anim_Dbz_Aura -> ag
    java.lang.String Anim_Arrow -> ah
    float Default_Powa -> ai
    float Max_Impulse -> aj
    float Default_Selection_Width -> ak
    float Default_Selection_Height -> al
    float MaxAuraSize -> am
    float MinAuraSize -> an
    org.cocos2d.types.CGPoint target -> ao
    com.badlogic.gdx.math.Vector2 targetImpulse -> ap
    com.badlogic.gdx.math.Vector2 worldImpulse -> aq
    boolean selected -> ar
    org.cocos2d.types.CGPoint worldSelect -> as
    float powa -> at
    org.cocos2d.types.CGRect scaledRect -> au
    org.cocos2d.types.CGRect selectionRect -> av
    org.cocos2d.nodes.CCSprite thumbnailSprite -> aw
    org.cocos2d.nodes.CCSpriteSheet auraSheet -> ax
    org.cocos2d.nodes.CCSprite arrowSprite -> ay
    float arrowScale -> az
    float arrowAngleShift -> aA
    boolean isDisabled -> aB
    float scaledShoot -> aC
    org.cocos2d.actions.base.CCAction actionSelect -> aD
    boolean stickHandled -> aE
    com.badlogic.gdx.physics.box2d.joints.DistanceJointDef currentJointDef -> aF
    com.badlogic.gdx.physics.box2d.Joint currentJoint -> aG
    org.cocos2d.types.CGPoint jointStart -> aH
    org.cocos2d.types.CGPoint selectStart -> aI
    org.cocos2d.types.CGPoint selectScreenStart -> aJ
    org.cocos2d.types.CGPoint selectScreenEnd -> aK
    org.cocos2d.types.CGPoint absoluteScreenStart -> aL
    gamers.associate.SlimeAttack.items.base.GameItemPhysic contactWith -> aM
    float maxContactManifold -> aN
    org.cocos2d.particlesystem.CCParticleSystem emitter -> aO
    float emitterStartSize -> aP
    int numberOfJump -> aQ
    int[] jumpSound -> aR
    long selectStartTime -> aS
    org.cocos2d.types.CGPoint jumpPosition -> aT
    org.cocos2d.types.CGPoint jumpLength -> aU
    boolean cancelNextRotationStat -> aV
    void selectionMove(org.cocos2d.types.CGPoint) -> c
    void computeTarget(org.cocos2d.types.CGPoint) -> f
    void computeScreenStart(org.cocos2d.types.CGPoint) -> g
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    boolean canSelect(org.cocos2d.types.CGPoint) -> b
    void select(org.cocos2d.types.CGPoint) -> e
    void unselect() -> d_
    void selectionStop(org.cocos2d.types.CGPoint) -> d
    void render(float) -> a
    org.cocos2d.types.CGRect getSelectionRect() -> d
    void contactInternal(gamers.associate.SlimeAttack.game.ContactInfo) -> b
    org.cocos2d.nodes.CCSprite getThumbail() -> m_
    org.cocos2d.nodes.CCNode getRootNode() -> e_
    boolean isActive() -> C
    void postSpriteInit() -> c
    void destroy() -> y
    void win() -> G
    void kill() -> L
    boolean simpleSelect() -> f_
    void prekill() -> K
    void detachCurrentJoin() -> Q
    void detach(gamers.associate.SlimeAttack.items.base.GameItemPhysic) -> a
    void detach() -> P
    boolean isThumbnailAwaysOn() -> g_
    boolean isThumbnailActive() -> h_
gamers.associate.SlimeAttack.items.custom.SlimySuccess -> gamers.associate.SlimeAttack.b.b.be:
    java.lang.String Anim_Afro -> r
    java.lang.String Anim_Cosmonaut -> s
    java.lang.String Anim_Hawaiian -> t
    java.lang.String Anim_Sombrero -> u
    java.lang.String getAnimationName(int) -> b
    java.lang.String getReferenceAnimationName() -> b
gamers.associate.SlimeAttack.items.custom.SlimySuccessFactory -> gamers.associate.SlimeAttack.b.b.bf:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
gamers.associate.SlimeAttack.items.custom.SpawnPortal -> gamers.associate.SlimeAttack.b.b.bg:
    java.lang.String Anim_Spawn_Portal -> r
    void createPortal() -> j
    void MovePortalInLine$2548a35(float) -> c
    gamers.associate.SlimeAttack.items.custom.Slimy spawn() -> k
    java.lang.String getReferenceAnimationName() -> b
gamers.associate.SlimeAttack.items.custom.SpawnPortalFactory -> gamers.associate.SlimeAttack.b.b.bh:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.SpriteAction -> gamers.associate.SlimeAttack.b.b.bi:
    int noActionReserved -> a
    int MoveBL -> b
    int FadeIn -> c
    int MoveL -> d
    int MoveB -> e
    int MoveR -> f
    int MoveT -> g
    int Move -> h
    int Rotate -> i
    int actionCode -> j
    float actionValue -> k
    float actionValue2 -> l
    float actionTime -> m
    boolean inverse -> n
    boolean repeat -> o
    float originalDelay -> p
    boolean resetPosition -> q
    float delayBefore -> r
    org.cocos2d.nodes.CCSprite sprite -> s
    float originalX -> t
    float originalY -> u
    void apply(org.cocos2d.nodes.CCSprite) -> a
    int getActionCode() -> a
    float getActionValue() -> b
    float getActionValue2() -> c
    float getActionTime() -> d
    boolean getInverse() -> e
    boolean getRepeat() -> f
    float getOriginalDelay() -> g
    boolean getResetPosition() -> h
    float getDelayBefore() -> i
gamers.associate.SlimeAttack.items.custom.Star -> gamers.associate.SlimeAttack.b.b.bj:
    java.lang.String Anim_Wait -> D
    java.lang.String Anim_Fade -> E
    float Default_Width -> F
    float Default_Height -> G
    float Reference_Width -> H
    float Reference_Height -> I
    java.lang.String BaseFrameName -> J
    boolean fading -> K
    void initBody() -> l
    void waitAnim() -> s
    java.lang.String getReferenceAnimationName() -> b
    void handleContact(gamers.associate.SlimeAttack.game.ContactInfo) -> a
gamers.associate.SlimeAttack.items.custom.StarCounter -> gamers.associate.SlimeAttack.b.b.bk:
    java.lang.String Anim_OneCell_Target_Empty -> r
    java.lang.String Anim_OneCell_Target_Green -> s
    java.lang.String Anim_Start_Empty -> t
    java.lang.String Anim_Start_Green -> u
    java.lang.String Anim_Start_Gold -> v
    java.lang.String Anim_Start_Target_Empty -> w
    java.lang.String Anim_Start_Target_Green -> x
    java.lang.String Anim_Cell_Empty -> y
    java.lang.String Anim_Cell_Green -> z
    java.lang.String Anim_Cell_Gold -> A
    java.lang.String Anim_Cell_Target_Empty -> B
    java.lang.String Anim_Cell_Target_Green -> C
    java.lang.String Anim_End_Empty -> D
    java.lang.String Anim_End_Green -> E
    java.lang.String Anim_End_Gold -> F
    java.lang.String Anim_End_Target_Empty -> G
    java.lang.String Anim_End_Target_Green -> H
    float Default_Width -> I
    float Default_Height -> J
    float Default_Width_OneCell -> K
    float Default_Height_OneCell -> L
    gamers.associate.SlimeAttack.items.custom.StarCounterType counterType -> M
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$custom$StarCounterType -> N
    float getOneCellWidthRatio() -> j
    float getOneCellHeightRation() -> k
    java.lang.String getReferenceAnimationName() -> b
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$items$custom$StarCounterType() -> l
gamers.associate.SlimeAttack.items.custom.StarCounterFactory -> gamers.associate.SlimeAttack.b.b.bl:
    gamers.associate.SlimeAttack.items.custom.StarCounterType currentType -> a
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.StarCounter create(float,float,float,float,int,int,int) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.StarCounterType -> gamers.associate.SlimeAttack.b.b.bm:
    gamers.associate.SlimeAttack.items.custom.StarCounterType Start_Green -> a
    gamers.associate.SlimeAttack.items.custom.StarCounterType Start_Gold -> b
    gamers.associate.SlimeAttack.items.custom.StarCounterType Start_Target -> c
    gamers.associate.SlimeAttack.items.custom.StarCounterType Cell_Green -> d
    gamers.associate.SlimeAttack.items.custom.StarCounterType Cell_Gold -> e
    gamers.associate.SlimeAttack.items.custom.StarCounterType Cell_Target -> f
    gamers.associate.SlimeAttack.items.custom.StarCounterType End_Green -> g
    gamers.associate.SlimeAttack.items.custom.StarCounterType End_Gold -> h
    gamers.associate.SlimeAttack.items.custom.StarCounterType End_Target -> i
    gamers.associate.SlimeAttack.items.custom.StarCounterType OneCell_Target -> j
    gamers.associate.SlimeAttack.items.custom.StarCounterType[] ENUM$VALUES -> k
    gamers.associate.SlimeAttack.items.custom.StarCounterType[] values() -> values
    gamers.associate.SlimeAttack.items.custom.StarCounterType valueOf(java.lang.String) -> valueOf
gamers.associate.SlimeAttack.items.custom.StarFactory -> gamers.associate.SlimeAttack.b.b.bn:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.Target -> gamers.associate.SlimeAttack.b.b.bo:
    java.lang.String Anim_Base -> r
    java.lang.String getReferenceAnimationName() -> b
    void trigger$75ba1f9b() -> a_
    void triggerOn$5d527811() -> b_
    void triggerOff$5d527811() -> c_
gamers.associate.SlimeAttack.items.custom.TargetFactory -> gamers.associate.SlimeAttack.b.b.bp:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.TeslaCoil -> gamers.associate.SlimeAttack.b.b.bq:
    java.lang.String Anim_Wait -> D
    java.lang.String Anim_Ligthning -> E
    float Default_Width -> F
    float Default_Height -> G
    float Default_StrikeDistance -> H
    float Reference_Width -> I
    float Reference_Height -> J
    float Default_Beam_Offset -> K
    float beamOffset -> L
    org.cocos2d.types.CGPoint tmp -> M
    boolean isOn -> N
    boolean startOn -> O
    float strikeDistance -> P
    float tmpDistance -> Q
    gamers.associate.SlimeAttack.items.custom.Lightning lightning -> R
    void trigger$75ba1f9b() -> a_
    void initBody() -> l
    java.lang.String getReferenceAnimationName() -> b
    void turnOn() -> G
    void turnOff(boolean) -> d
    boolean isStartOn() -> s
    void initState() -> t
    void render(float) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    float getStrikeDistance() -> u
    void triggerOn$5d527811() -> b_
    void triggerOff$5d527811() -> c_
gamers.associate.SlimeAttack.items.custom.TeslaCoilFactory -> gamers.associate.SlimeAttack.b.b.br:
    boolean startOn -> j
    float strikeDistance -> k
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    gamers.associate.SlimeAttack.items.custom.TeslaCoil createBL(float,float,float,float,java.lang.String,boolean,float) -> a
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.Thumbnail -> gamers.associate.SlimeAttack.b.b.bs:
    java.lang.String Thumbnail_back -> r
    gamers.associate.SlimeAttack.items.base.ISelectable target -> v
    boolean isSelected -> w
    org.cocos2d.nodes.CCSprite targetThumbnail -> x
    org.cocos2d.types.CGRect selectionRect -> y
    org.cocos2d.types.CGRect scaledRect -> z
    float targetOriginalScale -> A
    float Default_Selection_Width -> B
    float Default_Selection_Height -> C
    float Reference_Width -> s
    float Reference_Height -> t
    float Reference_Inside_Margin -> u
    void setTarget(gamers.associate.SlimeAttack.items.base.ISelectable) -> a
    boolean canSelect(org.cocos2d.types.CGPoint) -> b
    org.cocos2d.types.CGRect getSelectionRect() -> d
    void select(org.cocos2d.types.CGPoint) -> e
    void selectionMove(org.cocos2d.types.CGPoint) -> c
    void selectionStop(org.cocos2d.types.CGPoint) -> d
    void unselect() -> d_
    org.cocos2d.nodes.CCSprite getThumbail() -> m_
    org.cocos2d.nodes.CCNode getRootNode() -> e_
    void setPosition(org.cocos2d.types.CGPoint) -> a
    void setAngle(float) -> d
    void destroy() -> y
    void setScale(float) -> b
    java.lang.String getReferenceAnimationName() -> b
    boolean isActive() -> C
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    boolean simpleSelect() -> f_
    void pause() -> v
    void resume() -> w
    boolean isThumbnailAwaysOn() -> g_
    boolean isThumbnailActive() -> h_
gamers.associate.SlimeAttack.items.custom.ThumbnailFactory -> gamers.associate.SlimeAttack.b.b.bt:
    void createAnimList() -> c
    java.lang.String getPlistPng() -> d
    void runFirstAnimations(gamers.associate.SlimeAttack.items.base.GameItemCocos) -> c
    gamers.associate.SlimeAttack.items.base.GameItemCocos instantiate(float,float,float,float) -> c
gamers.associate.SlimeAttack.items.custom.TriggerTime -> gamers.associate.SlimeAttack.b.b.bu:
    java.lang.String target -> a
    float interval -> b
    float deltaSum -> c
    float intervalNormalize -> d
    void render(float) -> a
    java.lang.String getTarget() -> a
    float getInterval() -> b
gamers.associate.SlimeAttack.items.custom.TriggerTimeFactory -> gamers.associate.SlimeAttack.b.b.bv:
    java.lang.String target -> c
    float interval -> d
    gamers.associate.SlimeAttack.items.custom.TriggerTime create$4e460c5a(java.lang.String,float) -> a
    gamers.associate.SlimeAttack.items.base.GameItem instantiate$c8a5a38() -> c
gamers.associate.SlimeAttack.layers.AchievementItemLayer -> gamers.associate.SlimeAttack.c.a:
    org.cocos2d.nodes.CCLabel title -> a
    org.cocos2d.menus.CCMenu achievementMenu -> b
    float height -> c
    float scale -> d
    float width -> e
    float padding -> f
    org.cocos2d.types.CGPoint pos -> g
    void onEnter() -> a
gamers.associate.SlimeAttack.layers.BackgoundLayer -> gamers.associate.SlimeAttack.c.b:
gamers.associate.SlimeAttack.layers.CanvasItemLayer -> gamers.associate.SlimeAttack.c.c:
    float width -> a
    float height -> b
    float paddingX -> c
    float paddingY -> d
    float labelY -> e
    float labelX -> f
    org.cocos2d.nodes.CCLabel label -> g
    org.cocos2d.nodes.CCSprite canvas -> h
    float scaleX -> i
    float scaleY -> j
    float getFontSize() -> b
    void onEnter() -> a
    void defineLabelPosition() -> c
    java.lang.String getTitle() -> d
    java.lang.String getBackgroundPath() -> e
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    void select() -> f
    org.cocos2d.layers.CCScene getTransition() -> g
gamers.associate.SlimeAttack.layers.ChooseModeLayer -> gamers.associate.SlimeAttack.c.d:
    org.cocos2d.layers.CCScene scene -> a
    gamers.associate.SlimeAttack.layers.AchievementItemLayer achievementItem -> b
    gamers.associate.SlimeAttack.layers.StoryModeItemLayer story -> c
    gamers.associate.SlimeAttack.layers.SurvivalModeItemLayer survival -> d
    org.cocos2d.layers.CCScene getScene() -> b
    void onEnter() -> a
    void goBack() -> c
gamers.associate.SlimeAttack.layers.ChooseSurvivalDifficultyLayer -> gamers.associate.SlimeAttack.c.e:
    org.cocos2d.layers.CCScene scene -> a
    org.cocos2d.nodes.CCLabel title -> b
    java.util.List items -> c
    float colorHeight -> d
    org.cocos2d.layers.CCScene getScene() -> b
    gamers.associate.SlimeAttack.layers.SurvivalItemLayer addSurvivalItem$39df568a(java.lang.String,int,float) -> a
    void onEnter() -> a
    void onExit() -> n_
    void goBack() -> c
gamers.associate.SlimeAttack.layers.CreditInfo -> gamers.associate.SlimeAttack.c.f:
    java.lang.String category -> a
    java.lang.String[] names -> b
    java.lang.String getCategory() -> a
    java.lang.String[] getNames() -> b
gamers.associate.SlimeAttack.layers.CreditLayer -> gamers.associate.SlimeAttack.c.g:
    java.lang.String vcr -> a
    java.lang.String amz -> b
    java.lang.String gcc -> c
    java.lang.String mbn -> d
    java.util.List infos -> e
    java.util.List infosDisclaimer -> f
    org.cocos2d.types.CGPoint endPos -> g
    java.util.Random random -> h
    int lastPick -> i
    void onEnter() -> a
    void onExit() -> n_
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    void goHome() -> b
    void addInfo(java.lang.String,java.lang.String[]) -> a
    void addInfoDisclaimer(java.lang.String) -> a
    void goBack() -> c
gamers.associate.SlimeAttack.layers.EndLevelLayer -> gamers.associate.SlimeAttack.c.h:
    org.cocos2d.nodes.CCSprite slime -> a
    org.cocos2d.nodes.CCSprite star -> b
    org.cocos2d.opengl.CCBitmapFontAtlas starCountLabel -> c
    org.cocos2d.opengl.CCBitmapFontAtlas scoreLabel -> d
    org.cocos2d.opengl.CCBitmapFontAtlas totalScoreLabel -> e
    org.cocos2d.menus.CCMenu menu -> f
    org.cocos2d.menus.CCMenuItemSprite nextMenu -> g
    org.cocos2d.menus.CCMenuItemSprite restartMenu -> h
    org.cocos2d.menus.CCMenuItemSprite homeMenu -> i
    int previousTarget -> j
    org.cocos2d.nodes.CCSprite rankStar -> k
    int lastScore -> F
    int targetScore -> G
    int currentScore -> H
    int totalStars -> I
    int currentStars -> J
    int targetStars -> K
    org.cocos2d.types.CGPoint slimyPos -> L
    boolean scoreCountEnd -> M
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    void setScore(int) -> b
    void setStars(int) -> g
    void enable() -> b
    void disable() -> c
    org.cocos2d.opengl.CCBitmapFontAtlas getMenuLabel(java.lang.String) -> a
    void setNextEnabled$1385ff() -> e
    void setVictory(int) -> a
    void setLose() -> f
    void initStar() -> g
    void initSlime(java.lang.String,float,boolean) -> a
    void tick(float) -> a
    void setTotalScore$1385ff() -> h
    void setTotalScore(int,boolean) -> a
    void onEnter() -> a
gamers.associate.SlimeAttack.layers.GALogoLayer -> gamers.associate.SlimeAttack.c.i:
    org.cocos2d.layers.CCScene scene -> a
    org.cocos2d.nodes.CCSprite sprite -> b
    float scaleTarget -> c
    gamers.associate.SlimeAttack.game.Level currentLevel -> d
    gamers.associate.SlimeAttack.layers.GALogoLayer logoLayer -> e
    boolean loaded -> f
    org.cocos2d.nodes.CCLabel loadLabel -> g
    long nextBeat -> h
    int step -> i
    boolean heartBeating -> j
    org.cocos2d.actions.UpdateCallback nextCallback -> k
    org.cocos2d.layers.CCScene scene() -> b
    void onEnter() -> a
    void onExit() -> n_
    void heartbeat() -> c
    void load() -> e
    boolean access$0() -> f
    long access$1(gamers.associate.SlimeAttack.layers.GALogoLayer) -> a
    boolean access$2() -> g
    int access$3(gamers.associate.SlimeAttack.layers.GALogoLayer) -> b
    void access$4(gamers.associate.SlimeAttack.game.Level) -> a
    org.cocos2d.actions.UpdateCallback access$5(gamers.associate.SlimeAttack.layers.GALogoLayer) -> c
    void access$6(gamers.associate.SlimeAttack.layers.GALogoLayer,int) -> a
gamers.associate.SlimeAttack.layers.GALogoLayer$1 -> gamers.associate.SlimeAttack.c.j:
    gamers.associate.SlimeAttack.layers.GALogoLayer this$0 -> a
    void update(float) -> a
gamers.associate.SlimeAttack.layers.HomeLayer -> gamers.associate.SlimeAttack.c.k:
    float shareScale -> a
    gamers.associate.SlimeAttack.layers.HomeLayer layer -> b
    gamers.associate.SlimeAttack.items.custom.SpawnPortal spawner -> c
    float baseShift -> d
    float shiftTitle -> e
    float shiftMenu -> f
    float shiftBeta -> g
    org.cocos2d.nodes.CCSprite titleSprite -> h
    org.cocos2d.menus.CCMenu shareMenu -> i
    org.cocos2d.layers.CCLayer top -> j
    org.cocos2d.menus.CCMenu creditMenu -> k
    org.cocos2d.nodes.CCLabel betaLabel -> F
    org.cocos2d.menus.CCMenu menu -> G
    gamers.associate.SlimeAttack.layers.HomeLayer get() -> b
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    void onEnter() -> a
    void onExit() -> n_
    void setSpawner(gamers.associate.SlimeAttack.items.custom.SpawnPortal) -> a
    org.cocos2d.menus.CCMenu getHomeMenuButton(org.cocos2d.nodes.CCNode,java.lang.String) -> a
    org.cocos2d.menus.CCMenu getBackButton(org.cocos2d.nodes.CCNode,java.lang.String) -> b
    org.cocos2d.menus.CCMenu getPauseButton(org.cocos2d.nodes.CCNode,java.lang.String) -> c
    org.cocos2d.menus.CCMenu getMenuButton(java.lang.String,org.cocos2d.nodes.CCNode,java.lang.String) -> a
    org.cocos2d.menus.CCMenu getMenuButton(java.lang.String,float,float,org.cocos2d.nodes.CCNode,java.lang.String) -> a
    org.cocos2d.nodes.CCSprite addBkgChangeDiff(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.nodes.CCSprite addBkgSplash(org.cocos2d.nodes.CCNode) -> b
    org.cocos2d.nodes.CCSprite addBkg(org.cocos2d.nodes.CCNode,int,int,java.lang.String) -> a
    org.cocos2d.menus.CCMenu getNewShareButton$523ded83(java.lang.String,float,float) -> a
gamers.associate.SlimeAttack.layers.HudLayer -> gamers.associate.SlimeAttack.c.l:
    java.lang.String Count_Text -> a
    org.cocos2d.opengl.CCBitmapFontAtlas countLabel -> b
    float countX -> c
    org.cocos2d.menus.CCMenu menu -> d
    org.cocos2d.opengl.CCBitmapFontAtlas title -> e
    org.cocos2d.opengl.CCBitmapFontAtlas scoreTaken -> f
    org.cocos2d.types.CGPoint tmp -> g
    org.cocos2d.nodes.CCSprite starSprite -> h
    java.util.List starsToAdd -> i
    java.util.List starsToDelete -> j
    java.util.List starsTaken -> k
    float starX -> F
    float starY -> G
    java.lang.Object sync -> H
    java.util.List gameItems -> I
    java.util.List gameItemsToAdd -> J
    java.util.List gameItemstoRemove -> K
    java.util.List starCounters -> L
    int counterIdx -> M
    org.cocos2d.menus.CCMenu selectLevelMenu -> N
    org.cocos2d.menus.CCMenu rebuildLevelMenu -> O
    boolean hideCount -> P
    org.cocos2d.nodes.CCLabel timesup -> Q
    java.lang.String currentTitle -> R
    org.cocos2d.opengl.CCBitmapFontAtlas getMenuLabel$3e00e01a(float,org.cocos2d.types.ccColor3B) -> a
    void onEnter() -> a
    void upudateStarsCount() -> b
    void gameBegin() -> c
    void onExit() -> n_
    void setHudText(java.lang.String) -> a
    void setHudStartText(java.lang.String) -> b
    void hideHudText() -> e
    org.cocos2d.opengl.CCBitmapFontAtlas getLabel() -> f
    org.cocos2d.menus.CCMenu getMenu() -> g
    void setTitle(java.lang.String) -> c
    void starTaken(org.cocos2d.types.CGPoint) -> a
    void render$133aeb() -> h
    void addItemToAdd(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void attachToFactory() -> i
    void resetLevel() -> j
    void setHideCount(boolean) -> a
    void timesup() -> k
gamers.associate.SlimeAttack.layers.IBackableLayer -> gamers.associate.SlimeAttack.c.m:
    void goBack() -> c
gamers.associate.SlimeAttack.layers.IScrollable -> gamers.associate.SlimeAttack.c.n:
    void toRight$5d527811() -> b
    void toLeft$5d527811() -> e
gamers.associate.SlimeAttack.layers.LevelLayer -> gamers.associate.SlimeAttack.c.o:
    gamers.associate.SlimeAttack.game.Level level -> a
    java.util.ArrayList touchList -> b
    boolean isZoomAction -> c
    float lastDistance -> d
    float lastZoomDelta -> e
    boolean isMoveCameraActivated -> f
    boolean isZoomCameraActivated -> g
    org.cocos2d.actions.UpdateCallback tickCallback -> h
    void onEnter() -> a
    void onExit() -> n_
    void tick(float) -> a
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    org.cocos2d.types.CGPoint getGamePoint(org.cocos2d.types.CGPoint) -> a
    int getPointerIndex(android.view.MotionEvent) -> e
    gamers.associate.SlimeAttack.layers.TouchInfo getTouch(android.view.MotionEvent,int) -> a
    float getGameY(float) -> g
    void reset() -> b
    void setMoveCameraActivated(boolean) -> a
    void setZoomCameraActivated(boolean) -> b
gamers.associate.SlimeAttack.layers.LevelLayer$1 -> gamers.associate.SlimeAttack.c.p:
    gamers.associate.SlimeAttack.layers.LevelLayer this$0 -> a
    void update(float) -> a
gamers.associate.SlimeAttack.layers.MessageInfo -> gamers.associate.SlimeAttack.c.q:
    java.lang.String text -> a
    java.lang.String getText() -> a
gamers.associate.SlimeAttack.layers.MessageLayer -> gamers.associate.SlimeAttack.c.r:
    org.cocos2d.nodes.CCLabel message -> a
    org.cocos2d.types.CGPoint hidePos -> b
    float width -> c
    float height -> d
    org.cocos2d.types.CGPoint basePos -> e
    gamers.associate.SlimeAttack.layers.MessageLayer layer -> f
    java.util.Queue messages -> g
    boolean isShowing -> h
    org.cocos2d.nodes.CCSprite icon -> i
    float iconWidth -> j
    float fntSize -> k
    org.cocos2d.layers.CCColorLayer colored -> F
    float messageWidthSizeBase -> G
    float messageX -> H
    gamers.associate.SlimeAttack.layers.MessageLayer get() -> b
    void show(java.lang.String) -> a
    void onExit() -> n_
gamers.associate.SlimeAttack.layers.ModeItemLayer -> gamers.associate.SlimeAttack.c.s:
    float screenScaleY -> k
    void defineLabelPosition() -> c
    float getFontSize() -> b
gamers.associate.SlimeAttack.layers.PauseLayer -> gamers.associate.SlimeAttack.c.t:
    java.lang.String scoreTxt -> d
    org.cocos2d.menus.CCMenu menu -> e
    org.cocos2d.menus.CCMenuItemLabel scoreMaxLabel -> f
    float Scale -> a
    float PaddingX -> b
    float PaddingY -> c
    org.cocos2d.nodes.CCSprite arrowSpriteT -> g
    org.cocos2d.nodes.CCSprite arrowSpriteR -> h
    org.cocos2d.nodes.CCSprite arrowSpriteB -> i
    org.cocos2d.nodes.CCSprite arrowSpriteL -> j
    org.cocos2d.menus.CCMenuItemSprite restartMenu -> k
    org.cocos2d.menus.CCMenuItemSprite homeMenu -> F
    void setMenuPos(org.cocos2d.menus.CCMenuItem,int) -> a
    void setMaxScore(int) -> a
    void enable() -> b
    void setArrowAction(org.cocos2d.nodes.CCSprite) -> a
    void onEnter() -> a
    void gameStarted(boolean) -> a
    void disable() -> c
gamers.associate.SlimeAttack.layers.ScrollerLayer -> gamers.associate.SlimeAttack.c.u:
    org.cocos2d.nodes.CCNode handled -> a
    boolean hasMoved -> b
    org.cocos2d.types.CGPoint tmpPoint -> c
    float minScoll -> d
    float maxScroll -> e
    gamers.associate.SlimeAttack.layers.IScrollable storyLayer -> f
    java.util.List touchInfos -> g
    java.util.List toDelete -> h
    void onEnter() -> a
    void onExit() -> n_
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    void cleanTouchHistory() -> c
    void setHandled(org.cocos2d.nodes.CCNode) -> a
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    void setLimits(float,float) -> a
    boolean hasMoved() -> b
    void setStoryLayer(gamers.associate.SlimeAttack.layers.IScrollable) -> a
gamers.associate.SlimeAttack.layers.StoryMenuItem -> gamers.associate.SlimeAttack.c.v:
    org.cocos2d.nodes.CCSprite backItem -> a
    org.cocos2d.nodes.CCLabel idItem -> b
    org.cocos2d.nodes.CCSprite starItem -> c
    gamers.associate.SlimeAttack.levels.LevelDefinition levelDefinition -> d
    gamers.associate.SlimeAttack.layers.ScrollerLayer scroller -> e
    void defineNewScale(float) -> a
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    void runLevel() -> b
gamers.associate.SlimeAttack.layers.StoryModeItemLayer -> gamers.associate.SlimeAttack.c.w:
    float shiftScore -> F
    org.cocos2d.nodes.CCLabel lblScore -> G
    void onEnter() -> a
    java.lang.String getTitle() -> d
    java.lang.String getBackgroundPath() -> e
    org.cocos2d.layers.CCScene getTransition() -> g
gamers.associate.SlimeAttack.layers.StoryWorldLayer -> gamers.associate.SlimeAttack.c.x:
    org.cocos2d.nodes.CCLabel title -> a
    org.cocos2d.menus.CCMenu menuToRight -> b
    org.cocos2d.menus.CCMenu menuToLeft -> c
    org.cocos2d.nodes.CCSprite bkg -> d
    org.cocos2d.nodes.CCNode levels -> e
    gamers.associate.SlimeAttack.layers.ScrollerLayer scroller -> f
    int targetPageLeft -> g
    int targetPageRight -> h
    android.util.SparseArray diffScenes -> i
    org.cocos2d.menus.CCMenu backMenu -> j
    int currentPage -> k
    org.cocos2d.nodes.CCSprite lockWorld -> F
    org.cocos2d.layers.CCScene getScene(int) -> a
    void onEnter() -> a
    void onExit() -> n_
    void toLeft$5d527811() -> e
    void toRight$5d527811() -> b
    void goBack() -> c
gamers.associate.SlimeAttack.layers.SurvivalGameOverLayer -> gamers.associate.SlimeAttack.c.y:
    org.cocos2d.layers.CCScene scene -> a
    org.cocos2d.nodes.CCLabel scoreLabel -> b
    org.cocos2d.nodes.CCLabel gameOverLabel -> c
    org.cocos2d.menus.CCMenu backMenu -> d
    org.cocos2d.nodes.CCLabel newHighScore -> e
    org.cocos2d.nodes.CCLabel newUnlock -> f
    org.cocos2d.menus.CCMenu shareMenu -> g
    org.cocos2d.menus.CCMenu restartMenu -> h
    org.cocos2d.layers.CCScene getScene() -> b
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    void onEnter() -> a
    void onExit() -> n_
    void goBack() -> c
gamers.associate.SlimeAttack.layers.SurvivalItemLayer -> gamers.associate.SlimeAttack.c.z:
    boolean isUnlocked -> k
    java.lang.String title -> F
    java.lang.String baseBackground -> G
    int levelDiff -> H
    org.cocos2d.nodes.CCSprite diffSprite -> I
    org.cocos2d.nodes.CCLabel inProgress -> J
    org.cocos2d.nodes.CCLabel inProgressLevel -> K
    float iconSize -> L
    java.util.List toDestroy -> M
    void onEnter() -> a
    void onExit() -> n_
    org.cocos2d.nodes.CCSprite getLevelSprite(int,boolean) -> a
    java.lang.String getBackgroundPath() -> e
    org.cocos2d.layers.CCScene getTransition() -> g
    void defineLabelPosition() -> c
    java.lang.String getTitle() -> d
    float getFontSize() -> b
    void select() -> f
gamers.associate.SlimeAttack.layers.SurvivalModeItemLayer -> gamers.associate.SlimeAttack.c.aa:
    org.cocos2d.nodes.CCLabel lblScore -> F
    org.cocos2d.nodes.CCSprite starSprite -> G
    float shiftScore -> H
    void onEnter() -> a
    java.lang.String getTitle() -> d
    java.lang.String getBackgroundPath() -> e
    org.cocos2d.layers.CCScene getTransition() -> g
gamers.associate.SlimeAttack.layers.TouchInfo -> gamers.associate.SlimeAttack.c.ab:
    org.cocos2d.types.CGPoint moveBeganAt -> a
    org.cocos2d.types.CGPoint lastMoveReference -> b
    long lastMoveTime -> c
    org.cocos2d.types.CGPoint lastMoveDelta -> d
    boolean isMoving -> e
    long firstMoveTime -> f
    org.cocos2d.types.CGPoint firstMoveReference -> g
    int pointerId -> h
    org.cocos2d.types.CGPoint getMoveBeganAt() -> a
    org.cocos2d.types.CGPoint getLastMoveReference() -> b
    void setLastMoveTime(long) -> a
    void setFirstMoveTime(long) -> b
    org.cocos2d.types.CGPoint getLastMoveDelta() -> c
    void setMoving(boolean) -> a
    int getPointerId() -> d
    org.cocos2d.types.CGPoint getFirstMoveReference() -> e
gamers.associate.SlimeAttack.layers.TouchInfoMini -> gamers.associate.SlimeAttack.c.ac:
    float y -> a
    long time -> b
gamers.associate.SlimeAttack.levels.GamePlay -> gamers.associate.SlimeAttack.d.a:
    gamers.associate.SlimeAttack.levels.GamePlay None -> a
    gamers.associate.SlimeAttack.levels.GamePlay ManuallyDefined -> b
    gamers.associate.SlimeAttack.levels.GamePlay TimeAttack -> c
    gamers.associate.SlimeAttack.levels.GamePlay Survival -> d
    gamers.associate.SlimeAttack.levels.GamePlay[] ENUM$VALUES -> e
    gamers.associate.SlimeAttack.levels.GamePlay[] values() -> values
    gamers.associate.SlimeAttack.levels.GamePlay valueOf(java.lang.String) -> valueOf
gamers.associate.SlimeAttack.levels.ILevelBuilder -> gamers.associate.SlimeAttack.d.b:
    void init() -> e
    void build(gamers.associate.SlimeAttack.game.Level,java.lang.String,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void build(gamers.associate.SlimeAttack.game.Level,gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
    void rebuild(gamers.associate.SlimeAttack.game.Level,gamers.associate.SlimeAttack.levels.LevelDefinition) -> b
    int getTotalStar() -> a
    void addStar() -> b
    boolean isBoss() -> d
    gamers.associate.SlimeAttack.levels.LevelDefinition getNext(gamers.associate.SlimeAttack.levels.LevelDefinition) -> a
gamers.associate.SlimeAttack.levels.ITimeAttackLevel -> gamers.associate.SlimeAttack.d.c:
    int getLevelTime() -> a
    int getLevelCriticTime() -> b
gamers.associate.SlimeAttack.levels.LevelDefinition -> gamers.associate.SlimeAttack.d.d:
    java.lang.String id -> i
    boolean noStore -> a
    boolean isSpecial -> b
    gamers.associate.SlimeAttack.levels.GamePlay gamePlay -> c
    int lastScore -> d
    int maxScore -> e
    boolean isUnlock -> f
    boolean isFinished -> g
    boolean isCurrentSelection -> h
    gamers.associate.SlimeAttack.game.Rank rank -> j
    boolean isBoss -> k
    int number -> l
    int difficulty -> m
    gamers.associate.SlimeAttack.game.WorldPackage world -> n
    int previousMaxScore -> o
    boolean isInvalidated -> p
    boolean isUnlock() -> a
    void setUnlock(boolean) -> a
    boolean getNoStore() -> b
    java.lang.String getId() -> c
    void setId(java.lang.String) -> a
    boolean isSpecial() -> d
    void setSpecial$1385ff() -> e
    gamers.associate.SlimeAttack.levels.GamePlay getGamePlay() -> f
    void setGamePlay(gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void setLastScore(int) -> a
    int getMaxScore() -> g
    void handlePersistancy() -> h
    void storeUserInfoNext(java.io.BufferedWriter) -> a
    void loadUserInfoNext(java.lang.String,int) -> a
    boolean buildLevel(gamers.associate.SlimeAttack.game.Level) -> a
    boolean isFinished() -> i
    boolean isCurrentSelection() -> j
    void setCurrentSelection(boolean) -> b
    void resetUserInfo() -> k
    gamers.associate.SlimeAttack.game.Rank getRank() -> l
    void upgradeRank(gamers.associate.SlimeAttack.game.Rank) -> a
    boolean isBoss() -> m
    void setBoss$1385ff() -> n
    int getNumber() -> o
    void setNumber(int) -> b
    int getDifficulty() -> p
    void setDifficulty(int) -> c
    gamers.associate.SlimeAttack.game.WorldPackage getWorld() -> q
    void setWorld(gamers.associate.SlimeAttack.game.WorldPackage) -> a
    int getPreviousMaxScore() -> r
    boolean isInvalidated() -> s
    void setInvalidated$1385ff() -> t
gamers.associate.SlimeAttack.levels.LevelDefinitionHardCoded -> gamers.associate.SlimeAttack.d.e:
    void initLevel() -> u
gamers.associate.SlimeAttack.levels.LevelDefinitionParser -> gamers.associate.SlimeAttack.d.f:
    java.lang.String SpecialLevel -> m
    java.lang.String resourceName -> n
    java.util.ArrayList itemDefinitions -> o
    java.util.HashMap typeHandler -> p
    java.util.HashMap classHandler -> q
    gamers.associate.SlimeAttack.levels.itemdef.ItemDefinition postBuildItem -> i
    boolean isLocalStorage -> j
    java.util.Set ignoredClasses -> k
    java.util.Set ignoredItems -> l
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$GamePlay -> r
    void defineIgnoredItems() -> u
    void createItemDefinitions() -> v
    void buildItemTypeMap() -> y
    boolean mediaAvailable() -> z
    boolean buildLevel(gamers.associate.SlimeAttack.game.Level) -> a
    void HandleLine(gamers.associate.SlimeAttack.game.Level,java.lang.String) -> a
    gamers.associate.SlimeAttack.levels.itemdef.ItemDefinition getItemDef(java.lang.String) -> b
    java.lang.String getItemType(java.lang.String) -> c
    java.io.File getExternFile() -> A
    void storeLevel(gamers.associate.SlimeAttack.game.Level) -> b
    java.lang.String getResourcePath() -> B
    void setLocalStorage$1385ff() -> w
    java.lang.String getResourceName() -> x
    void setResourceName(java.lang.String) -> d
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$GamePlay() -> C
gamers.associate.SlimeAttack.levels.LevelDefinitionParserCache -> gamers.associate.SlimeAttack.d.g:
    java.util.HashMap cache -> a
    gamers.associate.SlimeAttack.levels.LevelDefinitionParser get(java.lang.String) -> a
gamers.associate.SlimeAttack.levels.LevelHome -> gamers.associate.SlimeAttack.d.h:
    java.lang.String Id -> i
    boolean buildLevel(gamers.associate.SlimeAttack.game.Level) -> a
    void initLevel() -> u
    boolean getNoStore() -> b
gamers.associate.SlimeAttack.levels.LevelUtil -> gamers.associate.SlimeAttack.d.i:
    float LAND_HEIGHT -> a
    void createGroundBox(gamers.associate.SlimeAttack.game.Level) -> a
    void createGroundBoxGlass(gamers.associate.SlimeAttack.game.Level) -> b
    float getHeightRatio() -> a
    float getWidthRatio() -> b
gamers.associate.SlimeAttack.levels.generator.BlocDefinition -> gamers.associate.SlimeAttack.d.a.a:
    int BlocHeight -> m
    int BlocWidth -> n
    int Default_Bloc_Height -> o
    int Default_Bloc_Width -> p
    int currentXOffset -> q
    int currentYOffset -> r
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode genNode -> s
    java.util.UUID blocId -> t
    boolean isStarBlock -> u
    void buildLevel(gamers.associate.SlimeAttack.game.Level,int,int) -> a
    void setGenNode(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> a
    void setOffset(int,int) -> a
    java.util.UUID getBlocId() -> y
    void setBlocId(java.util.UUID) -> a
    boolean isStarBlock() -> z
    void setStarBlock(boolean) -> c
gamers.associate.SlimeAttack.levels.generator.BlocDefinitionParser -> gamers.associate.SlimeAttack.d.a.b:
    java.util.Random rand -> t
    java.util.HashSet hazardItemsDef -> u
    java.util.List hazardLines -> v
    void buildLevel(gamers.associate.SlimeAttack.game.Level,int,int) -> a
    boolean buildLevel(gamers.associate.SlimeAttack.game.Level) -> a
    void createItemDefinitions() -> v
    void pickHazardLines(gamers.associate.SlimeAttack.game.Level) -> c
    void pickAndHandle(int,java.util.List,gamers.associate.SlimeAttack.game.Level) -> a
    void HandleLine(gamers.associate.SlimeAttack.game.Level,java.lang.String) -> a
    void defineIgnoredItems() -> u
gamers.associate.SlimeAttack.levels.generator.BlocDirection -> gamers.associate.SlimeAttack.d.a.c:
    gamers.associate.SlimeAttack.levels.generator.BlocDirection Top -> a
    gamers.associate.SlimeAttack.levels.generator.BlocDirection Right -> b
    gamers.associate.SlimeAttack.levels.generator.BlocDirection Bottom -> c
    gamers.associate.SlimeAttack.levels.generator.BlocDirection Left -> d
    gamers.associate.SlimeAttack.levels.generator.BlocDirection[] ENUM$VALUES -> e
    gamers.associate.SlimeAttack.levels.generator.BlocDirection[] values() -> values
    gamers.associate.SlimeAttack.levels.generator.BlocDirection valueOf(java.lang.String) -> valueOf
gamers.associate.SlimeAttack.levels.generator.BlocInfoParser -> gamers.associate.SlimeAttack.d.a.d:
    java.lang.String blocFileExtension -> a
    gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorBase Generator -> b
    void buildAll(gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorBase) -> a
    void buildBlocDef(java.lang.String,gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorBase) -> a
gamers.associate.SlimeAttack.levels.generator.LevelDefinitionGenerator -> gamers.associate.SlimeAttack.d.a.e:
    int complexity -> i
    gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorBase currentGenerator -> j
    boolean getNoStore() -> b
    void setLevelGenerator(gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorBase) -> a
    boolean buildLevel(gamers.associate.SlimeAttack.game.Level) -> a
    void buildBossLevel$14151847() -> u
    void setComplexity(int) -> d
    void storeUserInfoNext(java.io.BufferedWriter) -> a
    void loadUserInfoNext(java.lang.String,int) -> a
gamers.associate.SlimeAttack.levels.generator.LevelGenNode -> gamers.associate.SlimeAttack.d.a.f:
    java.lang.String defaultId -> a
    java.util.Set connectorsEntry -> b
    java.util.Set connectorsExit -> c
    java.util.Set connectors -> d
    boolean isLevelStart -> e
    boolean isLevelEnd -> f
    boolean isBoss -> g
    int complexity -> h
    gamers.associate.SlimeAttack.levels.generator.BlocDefinition blocDefinition -> i
    java.lang.String id -> j
    boolean isStarBlock -> k
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$generator$BlocDirection -> l
    void addConnectorsEntry(java.util.List) -> a
    void addConnectorsExit(java.util.List) -> b
    void addConnectors(java.util.List) -> c
    void addConnectors(java.util.Set,java.util.List) -> a
    boolean isConnectedTo(int) -> b
    boolean isEntryConnectedTo(int) -> c
    boolean isConnectedTo(java.util.Set,int) -> a
    boolean isEntryConnectedTo(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> c
    boolean isEntryConnectedTo(java.util.List) -> h
    boolean isEntryConnectedAtLeastOne(java.util.List) -> i
    boolean isExitConnectedAtLeastOne(java.util.List) -> j
    java.util.List getConnectorsFor(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> a
    gamers.associate.SlimeAttack.levels.generator.BlocDirection getMirror(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> b
    boolean connectNoSpecialAndGoTo(java.util.List,gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> a
    boolean connectNoSpecialAndGoTo(gamers.associate.SlimeAttack.levels.generator.LevelGenNode,gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> a
    boolean isNoSpecial() -> e
    void setIsLevelStart(boolean) -> a
    boolean isStartAndGoTo(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> c
    void setIsLevelEnd(boolean) -> b
    void setComplexity(int) -> a
    int getComplexity() -> a
    boolean isLevelEndAndConnect(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> a
    boolean isLevelBossAndConnect(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> b
    void setBlocDefinition(gamers.associate.SlimeAttack.levels.generator.BlocDefinition) -> a
    gamers.associate.SlimeAttack.levels.generator.BlocDefinition getBlocDefinition() -> b
    java.lang.String getId() -> c
    void setId(java.lang.String) -> a
    void setBoss(boolean) -> c
    boolean isExactlyConnectedTo(java.util.List) -> k
    boolean ConnectedAtLeatTo(java.util.List) -> l
    boolean isLevelStartAndExactlyConnectedTo(java.util.List) -> d
    boolean isLevelEndAndExactlyConnectedTo(java.util.List) -> e
    boolean isLevelBossAndExactlyConnectedTo(java.util.List) -> f
    boolean isNoSpecialAndExactlyConnectedTo(java.util.List) -> g
    boolean isStarBlock() -> d
    void setStarBlock(boolean) -> d
    boolean noSpecialComeFromAndGoTo(gamers.associate.SlimeAttack.levels.generator.BlocDirection,gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> a
    boolean isLevelEndAndComeFrom(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> d
    boolean isLevelBossAndComeFrom(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> e
    boolean atLeast(boolean,boolean,boolean,boolean,boolean,boolean,boolean) -> a
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$generator$BlocDirection() -> f
gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorBase -> gamers.associate.SlimeAttack.d.a.g:
    boolean debugBlocOn -> a
    java.lang.String forceBlock -> b
    java.util.List nodes -> c
    int lastGeneratedComplexity -> d
    int currentComplexity -> e
    int currentMaxComplexity -> f
    int previousPickComplexity -> g
    gamers.associate.SlimeAttack.levels.generator.BlocDirection lastDirection -> h
    int topCount -> i
    int rightCount -> j
    int bottomCount -> k
    int leftCount -> l
    int totalCount -> m
    gamers.associate.SlimeAttack.game.Level currentLevel -> n
    java.util.Random randomGenerator -> o
    int minX -> p
    int maxX -> q
    int minY -> r
    int maxY -> s
    int lvlWidth -> t
    int lvlHeight -> u
    java.util.List assets -> y
    java.util.ArrayList blockMap -> v
    int currentX -> w
    int currentY -> x
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$generator$BlocDirection -> z
    void attach(gamers.associate.SlimeAttack.game.Level) -> a
    void detach() -> a
    void destroy() -> b
    void addNode(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> a
    gamers.associate.SlimeAttack.levels.generator.BlocDirection getRandomDirection(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> a
    void generate(int,gamers.associate.SlimeAttack.levels.generator.BlocDirection,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void generate(int,gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void generateInternal$518452d9(gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void handlePick(gamers.associate.SlimeAttack.levels.generator.LevelGenNode,boolean) -> a
    void handlePick(gamers.associate.SlimeAttack.levels.generator.LevelGenNode,int,int) -> a
    void count(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> b
    void Forward(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> c
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickFromCompatible(java.util.List) -> a
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickBlockByName(java.lang.String) -> a
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickBlockByName(java.lang.String,java.util.List) -> a
    java.util.List getAssetsBase() -> c
    void initAssets(java.util.List) -> b
    void addGamePlay(int,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void computeLevelSize(boolean) -> a
    int getLvlBlockCount() -> d
    int getRatioDiff(int) -> a
    void computeLevelWidth(int) -> b
    int[] $SWITCH_TABLE$gamers$associate$SlimeAttack$levels$generator$BlocDirection() -> e
gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorCorridor -> gamers.associate.SlimeAttack.d.a.h:
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickStart(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> d
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickEnd(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> b
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickBoss(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> c
    void generateInternal$518452d9(gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void generateBeforeGP(gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean) -> a
    void computeLevelSize(boolean) -> a
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickNextConstrained(gamers.associate.SlimeAttack.levels.generator.LevelGenNode,gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> a
    void initAssets(java.util.List) -> b
gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorCorridor2 -> gamers.associate.SlimeAttack.d.a.i:
    void initAssets(java.util.List) -> b
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickEnd(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> b
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickBoss(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> c
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickNextConstrained(gamers.associate.SlimeAttack.levels.generator.LevelGenNode,gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> a
gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorCorridor3 -> gamers.associate.SlimeAttack.d.a.j:
    java.util.HashMap nodeMap -> y
    void generateBeforeGP(gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean) -> a
    void handleMap(gamers.associate.SlimeAttack.levels.generator.BlocDirection) -> d
gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorRectangle -> gamers.associate.SlimeAttack.d.a.k:
    void generateInternal$518452d9(gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickTopRight() -> e
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickExitTopRight() -> f
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickTopMiddle() -> g
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickTopLeft() -> h
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickMiddleRight() -> i
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickExitMiddleRight() -> j
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickMiddle() -> k
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickMiddleLeft() -> l
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickExitGroundRightCorner() -> m
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickGroundRightCorner() -> n
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickNextGround() -> o
    void initAssets(java.util.List) -> b
    void computeLevelSize(boolean) -> a
gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorRectangle2 -> gamers.associate.SlimeAttack.d.a.l:
    java.util.Random rand -> y
    java.util.HashSet starList -> z
    java.util.List allStars -> A
    void generateInternal$518452d9(gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void pickStar(int,java.util.List,java.util.HashSet) -> a
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickStartBottomLeft() -> p
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickStartMidLeft() -> q
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickStartTopLeft() -> r
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickBottomLeft() -> s
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickBossBottomMiddle() -> t
    gamers.associate.SlimeAttack.levels.generator.LevelGenNode pickBossBottomRightCorner() -> u
gamers.associate.SlimeAttack.levels.generator.LevelGraphGeneratorTutorial -> gamers.associate.SlimeAttack.d.a.m:
    void initAssets(java.util.List) -> b
    void generateInternal$518452d9(gamers.associate.SlimeAttack.levels.generator.BlocDirection,boolean,gamers.associate.SlimeAttack.levels.GamePlay) -> a
    void handleTut(java.lang.String) -> b
gamers.associate.SlimeAttack.levels.generator.MapPoint -> gamers.associate.SlimeAttack.d.a.n:
    int x -> a
    int y -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
gamers.associate.SlimeAttack.levels.generator.NodeMapInfo -> gamers.associate.SlimeAttack.d.a.o:
    gamers.associate.SlimeAttack.levels.generator.MapPoint position -> a
    boolean isStart -> b
    boolean isEnd -> c
gamers.associate.SlimeAttack.levels.generator.hardcoded.BlocDefinitionFill -> gamers.associate.SlimeAttack.d.a.a.a:
    void initGenNodeInternal(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> b
    void buildLevel(gamers.associate.SlimeAttack.game.Level,int,int) -> a
gamers.associate.SlimeAttack.levels.generator.hardcoded.BlocDefinitionHardCoded -> gamers.associate.SlimeAttack.d.a.a.b:
    void initGenNodeInternal(gamers.associate.SlimeAttack.levels.generator.LevelGenNode) -> b
    float getX$133adb() -> A
    float getY$133adb() -> B
gamers.associate.SlimeAttack.levels.generator.hardcoded.BlocHardInit -> gamers.associate.SlimeAttack.d.a.a.c:
    gamers.associate.SlimeAttack.levels.generator.hardcoded.BlocDefinitionFill BlockFill -> a
    void InitHardCoded() -> a
gamers.associate.SlimeAttack.levels.itemdef.BecBunsenDef -> gamers.associate.SlimeAttack.d.b.a:
    java.lang.String Handled_BecBunsen -> a
    boolean isOn -> o
    float delay -> p
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
    boolean getIsBL() -> c
gamers.associate.SlimeAttack.levels.itemdef.BlocInfoDef -> gamers.associate.SlimeAttack.d.b.b:
    java.lang.String Handled_Info -> a
    java.lang.String connectorsSep -> o
    java.lang.String facesSep -> p
    java.lang.String id -> q
    int complexity -> r
    java.lang.String entries -> s
    java.lang.String exits -> t
    boolean isStart -> u
    boolean isEnd -> v
    boolean isBoss -> w
    java.lang.String openFaces -> x
    void postBuild() -> d
    void initTypeHandled() -> a
    void initClassHandled() -> b
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void createItem(java.lang.String) -> b
    java.util.List getConnectors(java.lang.String) -> f
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.BoxDef -> gamers.associate.SlimeAttack.d.b.c:
    java.lang.String Handled_Tube -> a
    java.lang.String Handled_Multitubes -> o
    java.lang.String Handled_Glassbox -> p
    java.lang.String Handled_Bottle -> q
    boolean isStatic -> r
    boolean isStickable -> s
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
    boolean getIsBL() -> c
gamers.associate.SlimeAttack.levels.itemdef.BumperAngleDef -> gamers.associate.SlimeAttack.d.b.d:
    java.lang.String Handled_Def -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
    boolean getIsBL() -> c
gamers.associate.SlimeAttack.levels.itemdef.ButtonDef -> gamers.associate.SlimeAttack.d.b.e:
    java.lang.String Handled_Def -> a
    java.lang.String target -> o
    float resetTime -> p
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.CameraDef -> gamers.associate.SlimeAttack.d.b.f:
    java.lang.String Handled_Def -> a
    java.lang.String targetName -> o
    boolean startOn -> p
    float fov -> q
    float viewDistance -> r
    float rotateTime -> s
    float rotateAngle -> t
    void initTypeHandled() -> a
    void initClassHandled() -> b
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.CircularSawDef -> gamers.associate.SlimeAttack.d.b.g:
    java.lang.String Handled_Def -> a
    boolean isOn -> o
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.DirectorDef -> gamers.associate.SlimeAttack.d.b.h:
    java.lang.String Handled_Def -> a
    java.lang.String target -> o
    int actionCode -> p
    float actionValue -> q
    float actionValue2 -> r
    float actionTime -> s
    boolean inverse -> t
    boolean repeat -> u
    float originalDelay -> v
    boolean resetPosition -> w
    float delayBefore -> x
    void initTypeHandled() -> a
    void initClassHandled() -> b
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.EnergyBallDef -> gamers.associate.SlimeAttack.d.b.i:
    java.lang.String Handled_Def -> a
    void initTypeHandled() -> a
    void initClassHandled() -> b
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.EnergyBallGunDef -> gamers.associate.SlimeAttack.d.b.j:
    java.lang.String Handled_Def -> a
    java.lang.String target -> o
    boolean isOn -> p
    float ballSpeed -> q
    float waitTime -> r
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.GoalPortalDef -> gamers.associate.SlimeAttack.d.b.k:
    java.lang.String Handled_Goal -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.ItemDefinition -> gamers.associate.SlimeAttack.d.b.l:
    java.lang.String None -> b
    java.lang.String infoSep -> c
    java.lang.String itemType -> d
    float x -> e
    float y -> f
    float width -> g
    float height -> h
    float angle -> i
    java.lang.String name -> j
    java.util.ArrayList typesHandled -> k
    java.util.ArrayList classHandled -> l
    float xOffset -> m
    float yOffset -> n
    java.lang.String idPre -> a
    void initTypeHandled() -> a
    void initClassHandled() -> b
    float getX() -> e
    float getY() -> f
    void parse(java.lang.String) -> c
    float ZeroIfNone(java.lang.String) -> d
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void parseAndCreate(java.lang.String,gamers.associate.SlimeAttack.game.Level) -> a
    void parseAndCreate(java.lang.String,gamers.associate.SlimeAttack.game.Level,float,float,java.lang.String) -> a
    java.lang.String getUName() -> g
    java.lang.String getUString(java.lang.String) -> e
    java.util.ArrayList getTypesHandled() -> h
    void postBuild() -> d
    java.util.ArrayList getClassesHandled() -> i
    void writeLine(java.io.BufferedWriter) -> a
    java.lang.String writeNext(java.lang.String) -> a
    java.lang.String addValue(java.lang.String,java.lang.String) -> a
    void setValues(gamers.associate.SlimeAttack.items.base.GameItem) -> c
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.LaserGunDef -> gamers.associate.SlimeAttack.d.b.m:
    java.lang.String Handled_Def -> a
    java.lang.String target -> o
    boolean isOn -> p
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.LevelInfoDef -> gamers.associate.SlimeAttack.d.b.n:
    java.lang.String Handled_Info -> a
    java.lang.String Dimension_Auto -> o
    java.lang.String Dimension_Width -> p
    java.lang.String Dimension_Height -> q
    java.lang.String maxDimension -> r
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
    void setValuesSpe(gamers.associate.SlimeAttack.game.Level) -> b
gamers.associate.SlimeAttack.levels.itemdef.LiquidDef -> gamers.associate.SlimeAttack.d.b.o:
    java.lang.String Handled_Def -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.LiquidSurfaceDef -> gamers.associate.SlimeAttack.d.b.p:
    java.lang.String Handled_Def -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.MenuNodeDef -> gamers.associate.SlimeAttack.d.b.q:
    java.lang.String Handled_Def -> a
    java.lang.String rootNode -> o
    java.lang.String id -> p
    java.lang.String targetLevel -> q
    java.lang.String targetN1 -> r
    java.lang.String targetN2 -> s
    java.lang.String targetN3 -> t
    java.lang.String targetN4 -> u
    gamers.associate.SlimeAttack.items.custom.MenuNode rootItem -> v
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void createStartNode(gamers.associate.SlimeAttack.items.custom.MenuNode) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void postBuild() -> d
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.MetaMenuDef -> gamers.associate.SlimeAttack.d.b.r:
    java.lang.String Handled_Def -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.PlatformDef -> gamers.associate.SlimeAttack.d.b.s:
    java.lang.String Handled_Platform -> a
    java.lang.String Handled_Bumper -> o
    java.lang.String Handled_NoSticky -> p
    java.lang.String Handled_Ice -> q
    java.lang.String Handled_Wall -> r
    java.lang.String Handled_Corner -> s
    java.lang.String Handled_T -> t
    java.lang.String Handled_Cross -> u
    java.lang.String Handled_End -> v
    java.lang.String Handled_NoSticky_Corner -> w
    java.lang.String Handled_NoSticky_End -> x
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.PolygonDef -> gamers.associate.SlimeAttack.d.b.t:
    java.lang.String RealPath -> a
    java.lang.String PointSep -> o
    java.lang.String CoordSep -> p
    java.lang.String Handled_Def -> q
    float yReference -> r
    float heightReference -> s
    java.lang.String path -> t
    boolean isdynamic -> u
    boolean isStickable -> v
    boolean isEmpty -> w
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.RedDef -> gamers.associate.SlimeAttack.d.b.u:
    java.lang.String Handled_Def -> o
    java.lang.String Handled_DefMini -> a
    int life -> p
    boolean isBoss -> q
    void initTypeHandled() -> a
    void initClassHandled() -> b
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.SpawnDef -> gamers.associate.SlimeAttack.d.b.v:
    java.lang.String Handled_Spawn -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.SpriteDef -> gamers.associate.SlimeAttack.d.b.w:
    java.lang.String Handled_Def -> a
    java.lang.String plist -> o
    java.lang.String frame -> p
    int count -> q
    int actionCode -> r
    float actionValue -> s
    float actionValue2 -> t
    float actionTime -> u
    boolean inverse -> v
    boolean repeat -> w
    float originalDelay -> x
    boolean resetPosition -> y
    float delayBefore -> z
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.StarDef -> gamers.associate.SlimeAttack.d.b.x:
    java.lang.String Handled_Def -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.SurvivalDef -> gamers.associate.SlimeAttack.d.b.y:
    java.lang.String Handled_Survival -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.TargetDef -> gamers.associate.SlimeAttack.d.b.z:
    java.lang.String Handled_Def -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.TeslaCoilDef -> gamers.associate.SlimeAttack.d.b.aa:
    java.lang.String Handled_Def -> a
    boolean startOn -> o
    float strikeDistance -> p
    void initTypeHandled() -> a
    void initClassHandled() -> b
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.TimeAttackDef -> gamers.associate.SlimeAttack.d.b.ab:
    java.lang.String Handled_TimeAttack -> a
    int levelTime -> o
    int criticTime -> p
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    void initTypeHandled() -> a
    void parseNext$140720b9(java.lang.String[]) -> a
    void initClassHandled() -> b
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
gamers.associate.SlimeAttack.levels.itemdef.TriggerTimeDef -> gamers.associate.SlimeAttack.d.b.ac:
    java.lang.String Handled_Def -> a
    java.lang.String target -> o
    float interval -> p
    void initTypeHandled() -> a
    void initClassHandled() -> b
    void parseNext$140720b9(java.lang.String[]) -> a
    void createItem(gamers.associate.SlimeAttack.game.Level) -> a
    java.lang.String writeNext(java.lang.String) -> a
    boolean getIsBL() -> c
    java.lang.String getItemType(gamers.associate.SlimeAttack.items.base.GameItem) -> a
    void setValuesNext(gamers.associate.SlimeAttack.items.base.GameItem) -> b
org.cocos2d.Cocos2D -> org.cocos2d.Cocos2D:
    java.util.Comparator sDisplayNameComparator -> a
    void onCreate(android.os.Bundle) -> onCreate
    java.util.List getData(java.lang.String) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
org.cocos2d.Cocos2D$1 -> org.cocos2d.a:
    java.text.Collator collator -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.cocos2d.actions.CCActionManager -> org.cocos2d.a.a:
    java.lang.String LOG_TAG -> b
    org.cocos2d.utils.pool.ConcOneClassPool pool -> c
    org.cocos2d.utils.collections.ConcurrentArrayHashMap targets -> d
    org.cocos2d.actions.CCActionManager _sharedManager -> e
    boolean $assertionsDisabled -> a
    org.cocos2d.actions.CCActionManager sharedManager() -> a
    void deleteHashElement(org.cocos2d.actions.CCActionManager$HashElement) -> a
    void removeAction(int,org.cocos2d.actions.CCActionManager$HashElement) -> a
    void addAction(org.cocos2d.actions.base.CCAction,org.cocos2d.nodes.CCNode,boolean) -> a
    void removeAllActions(org.cocos2d.nodes.CCNode) -> a
    void removeAction(org.cocos2d.actions.base.CCAction) -> a
    void removeAction$1bdb0df0(org.cocos2d.nodes.CCNode) -> b
    int numberOfRunningActions(org.cocos2d.nodes.CCNode) -> c
    void update(float) -> a
    void resume(org.cocos2d.nodes.CCNode) -> d
    void pause(org.cocos2d.nodes.CCNode) -> e
org.cocos2d.actions.CCActionManager$1 -> org.cocos2d.a.b:
    org.cocos2d.actions.CCActionManager this$0 -> a
    java.lang.Object allocate() -> a
org.cocos2d.actions.CCActionManager$HashElement -> org.cocos2d.a.c:
    java.util.ArrayList actions -> a
    org.cocos2d.nodes.CCNode target -> b
    int actionIndex -> c
    boolean paused -> d
org.cocos2d.actions.CCProgressTimer -> org.cocos2d.a.d:
    int type_ -> a
    float percentage_ -> b
    org.cocos2d.nodes.CCSprite sprite_ -> c
    java.nio.FloatBuffer textureCoordinates -> d
    java.nio.FloatBuffer vertexCoordinates -> e
    java.nio.FloatBuffer colors -> f
    int vertexDataCount_ -> g
    float getPercentage() -> b
    org.cocos2d.nodes.CCSprite getSprite() -> c
    void setVertexDataCount(int) -> b
    void resetVertex() -> e
    org.cocos2d.actions.CCProgressTimer progress(java.lang.String) -> a
    org.cocos2d.actions.CCProgressTimer progress(org.cocos2d.opengl.CCTexture2D) -> a
    void setPercentage(float) -> a
    void setType(int) -> a
    org.cocos2d.types.CGPoint vertexFromTexCoord(org.cocos2d.types.CGPoint) -> a
    void updateColor() -> f
    org.cocos2d.types.CGPoint boundaryTexCoord(int) -> g
    void draw(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.actions.CCScheduler -> org.cocos2d.a.e:
    java.util.ArrayList updatesNeg -> a
    java.util.ArrayList updates0 -> b
    java.util.ArrayList updatesPos -> c
    org.cocos2d.utils.collections.ConcurrentArrayHashMap hashForSelectors -> d
    java.util.concurrent.ConcurrentHashMap hashForUpdates -> e
    org.cocos2d.actions.CCScheduler$tListEntry currentEntry -> f
    org.cocos2d.actions.CCScheduler$tHashSelectorEntry currentTarget -> g
    boolean currentTargetSalvaged -> h
    java.lang.String updateSelector -> i
    float timeScale_ -> k
    org.cocos2d.actions.CCScheduler _sharedScheduler -> l
    boolean $assertionsDisabled -> j
    org.cocos2d.actions.CCScheduler sharedScheduler() -> a
    void tick(float) -> a
    void schedule(java.lang.String,java.lang.Object,float,boolean) -> a
    void schedule(org.cocos2d.actions.UpdateCallback,java.lang.Object,float,boolean) -> a
    void unschedule(java.lang.String,java.lang.Object) -> a
    void unschedule(org.cocos2d.actions.UpdateCallback,java.lang.Object) -> a
    void unscheduleUpdate(java.lang.Object) -> a
    void unscheduleAllSelectors(java.lang.Object) -> b
    void resume(java.lang.Object) -> c
    void pause(java.lang.Object) -> d
    void scheduleUpdate(java.lang.Object,int,boolean) -> a
    void scheduleUpdate$18b62bb8(org.cocos2d.actions.UpdateCallback) -> a
    void finalize() -> finalize
    void append(java.util.ArrayList,java.lang.Object,boolean) -> a
    void priority(java.util.ArrayList,java.lang.Object,int,boolean) -> a
org.cocos2d.actions.CCScheduler$tHashSelectorEntry -> org.cocos2d.a.f:
    java.util.ArrayList timers -> a
    java.lang.Object target -> b
    java.util.ArrayList list -> c
    org.cocos2d.actions.CCScheduler$tListEntry entry -> d
    int timerIndex -> e
    org.cocos2d.actions.CCTimer currentTimer -> f
    boolean currentTimerSalvaged -> g
    boolean paused -> h
    void setPaused(boolean) -> a
org.cocos2d.actions.CCScheduler$tListEntry -> org.cocos2d.a.g:
    java.lang.reflect.Method impMethod -> a
    org.cocos2d.actions.UpdateCallback callback -> b
    java.lang.Object target -> c
    int priority -> d
    boolean paused -> e
org.cocos2d.actions.CCTimer -> org.cocos2d.a.h:
    java.lang.Object target -> a
    java.lang.String selector -> b
    java.lang.reflect.Method invocation -> c
    org.cocos2d.actions.UpdateCallback callback -> d
    float interval -> e
    float elapsed -> f
    java.lang.String getSelector() -> a
    org.cocos2d.actions.UpdateCallback getCallback() -> b
    void update(float) -> a
org.cocos2d.actions.UpdateCallback -> org.cocos2d.a.i:
    void update(float) -> a
org.cocos2d.actions.base.CCAction -> org.cocos2d.a.a.a:
    org.cocos2d.nodes.CCNode target -> a
    org.cocos2d.nodes.CCNode originalTarget -> b
    int tag -> c
    org.cocos2d.nodes.CCNode getOriginalTarget() -> a
    int getTag() -> b
    void setTag(int) -> a
    org.cocos2d.actions.base.CCAction copy() -> c
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    boolean isDone() -> e
    void step(float) -> a
org.cocos2d.actions.base.CCFiniteTimeAction -> org.cocos2d.a.a.b:
    java.lang.String LOG_TAG -> c
    float duration -> b
    org.cocos2d.actions.base.CCFiniteTimeAction action$762b4a35() -> f
    float getDuration() -> g
    org.cocos2d.actions.base.CCFiniteTimeAction copy() -> h
    org.cocos2d.actions.base.CCFiniteTimeAction reverse() -> i
    void step(float) -> a
    void update(float) -> b
    org.cocos2d.actions.base.CCAction copy() -> c
org.cocos2d.actions.base.CCFollow -> org.cocos2d.a.a.c:
    org.cocos2d.nodes.CCNode followedNode_ -> b
    boolean boundarySet -> c
    boolean boundaryFullyCovered -> d
    org.cocos2d.types.CGPoint halfScreenSize -> e
    org.cocos2d.types.CGPoint fullScreenSize -> f
    float leftBoundary -> g
    float rightBoundary -> h
    float topBoundary -> i
    float bottomBoundary -> j
    org.cocos2d.actions.base.CCFollow action(org.cocos2d.nodes.CCNode,org.cocos2d.types.CGRect) -> a
    boolean isDone() -> e
    void stop() -> d
    float CLAMP(float,float,float) -> a
    void step(float) -> a
    org.cocos2d.actions.base.CCAction copy() -> c
org.cocos2d.actions.base.CCRepeatForever -> org.cocos2d.a.a.d:
    org.cocos2d.actions.interval.CCIntervalAction other -> b
    org.cocos2d.actions.base.CCRepeatForever action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.base.CCAction copy() -> c
    void start(org.cocos2d.nodes.CCNode) -> a
    void step(float) -> a
    boolean isDone() -> e
org.cocos2d.actions.base.CCSpeed -> org.cocos2d.a.a.e:
    org.cocos2d.actions.interval.CCIntervalAction other -> b
    float speed -> c
    org.cocos2d.actions.base.CCSpeed action$4749fc23(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    void step(float) -> a
    boolean isDone() -> e
    org.cocos2d.actions.base.CCAction copy() -> c
org.cocos2d.actions.camera.CCCameraAction -> org.cocos2d.a.b.a:
    float centerXOrig -> c
    float centerYOrig -> d
    float centerZOrig -> e
    float eyeXOrig -> f
    float eyeYOrig -> g
    float eyeZOrig -> h
    float upXOrig -> i
    float upYOrig -> j
    float upZOrig -> k
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.interval.CCReverseTime reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.camera.CCOrbitCamera -> org.cocos2d.a.b.b:
    float radius -> n
    float deltaRadius -> o
    float angleZ -> p
    float deltaAngleZ -> q
    float angleX -> r
    float deltaAngleX -> s
    float radZ -> t
    float radDeltaZ -> u
    float radX -> v
    float radDeltaX -> w
    org.cocos2d.actions.camera.CCOrbitCamera action$3c09b28a(float,float,float,float,float,float) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.ease.CCEaseAction -> org.cocos2d.a.c.a:
    org.cocos2d.actions.interval.CCIntervalAction other -> c
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.ease.CCEaseBackIn -> org.cocos2d.a.c.b:
    org.cocos2d.actions.ease.CCEaseBackIn action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseBackInOut -> org.cocos2d.a.c.c:
    org.cocos2d.actions.ease.CCEaseBackInOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseBackOut -> org.cocos2d.a.c.d:
    org.cocos2d.actions.ease.CCEaseBackOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseBounce -> org.cocos2d.a.c.e:
    float bounceTime(float) -> c
org.cocos2d.actions.ease.CCEaseBounceIn -> org.cocos2d.a.c.f:
    org.cocos2d.actions.ease.CCEaseBounceIn action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseBounceInOut -> org.cocos2d.a.c.g:
    org.cocos2d.actions.ease.CCEaseBounceInOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseBounceOut -> org.cocos2d.a.c.h:
    org.cocos2d.actions.ease.CCEaseBounceOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseElastic -> org.cocos2d.a.c.i:
    float period_ -> d
org.cocos2d.actions.ease.CCEaseElasticIn -> org.cocos2d.a.c.j:
    org.cocos2d.actions.ease.CCEaseElasticIn action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseElasticInOut -> org.cocos2d.a.c.k:
    org.cocos2d.actions.ease.CCEaseElasticInOut action(org.cocos2d.actions.interval.CCIntervalAction,float) -> a
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseElasticOut -> org.cocos2d.a.c.l:
    org.cocos2d.actions.ease.CCEaseElasticOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    org.cocos2d.actions.ease.CCEaseElasticOut action$488397c2(org.cocos2d.actions.interval.CCIntervalAction) -> b
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseExponentialIn -> org.cocos2d.a.c.m:
    org.cocos2d.actions.ease.CCEaseExponentialIn action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
org.cocos2d.actions.ease.CCEaseExponentialInOut -> org.cocos2d.a.c.n:
    org.cocos2d.actions.ease.CCEaseExponentialInOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void update(float) -> b
org.cocos2d.actions.ease.CCEaseExponentialOut -> org.cocos2d.a.c.o:
    org.cocos2d.actions.ease.CCEaseExponentialOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
org.cocos2d.actions.ease.CCEaseIn -> org.cocos2d.a.c.p:
    org.cocos2d.actions.ease.CCEaseIn action$4a23e056(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.ease.CCEaseRateAction copy() -> m
org.cocos2d.actions.ease.CCEaseInOut -> org.cocos2d.a.c.q:
    org.cocos2d.actions.ease.CCEaseInOut action(org.cocos2d.actions.interval.CCIntervalAction,float) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.ease.CCEaseOut -> org.cocos2d.a.c.r:
    org.cocos2d.actions.ease.CCEaseOut action(org.cocos2d.actions.interval.CCIntervalAction,float) -> a
    void update(float) -> b
org.cocos2d.actions.ease.CCEaseRateAction -> org.cocos2d.a.c.s:
    float rate -> d
    org.cocos2d.actions.ease.CCEaseRateAction copy() -> m
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
org.cocos2d.actions.ease.CCEaseSineIn -> org.cocos2d.a.c.t:
    org.cocos2d.actions.ease.CCEaseSineIn action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
org.cocos2d.actions.ease.CCEaseSineInOut -> org.cocos2d.a.c.u:
    org.cocos2d.actions.ease.CCEaseSineInOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
org.cocos2d.actions.ease.CCEaseSineOut -> org.cocos2d.a.c.v:
    org.cocos2d.actions.ease.CCEaseSineOut action(org.cocos2d.actions.interval.CCIntervalAction) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.ease.CCEaseAction copy() -> j
org.cocos2d.actions.grid.CCFlipX3D -> org.cocos2d.a.d.a:
    boolean $assertionsDisabled -> c
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.grid.CCFlipY3D -> org.cocos2d.a.d.b:
    void update(float) -> b
org.cocos2d.actions.grid.CCGrid3DAction -> org.cocos2d.a.d.c:
    org.cocos2d.grid.CCGridBase grid() -> m
    org.cocos2d.types.CCVertex3D originalVertex(org.cocos2d.types.ccGridSize) -> a
    void setVertex(org.cocos2d.types.ccGridSize,org.cocos2d.types.CCVertex3D) -> a
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
    org.cocos2d.actions.grid.CCGridAction copy() -> n
org.cocos2d.actions.grid.CCGridAction -> org.cocos2d.a.d.d:
    org.cocos2d.types.ccGridSize gridSize -> d
    org.cocos2d.types.ccGridSize getGridSize() -> o
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.grid.CCGridBase grid() -> m
    org.cocos2d.actions.grid.CCGridAction copy() -> n
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.grid.CCLens3D -> org.cocos2d.a.d.e:
    org.cocos2d.types.CGPoint position -> c
    float radius -> e
    float lensEffect -> f
    org.cocos2d.types.CGPoint lastPosition -> g
    org.cocos2d.actions.grid.CCLens3D action(org.cocos2d.types.CGPoint,float,org.cocos2d.types.ccGridSize,float) -> a
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.grid.CCLiquid -> org.cocos2d.a.d.f:
    int waves -> c
    float amplitude -> e
    float amplitudeRate -> f
    org.cocos2d.actions.grid.CCLiquid action$2dba25b4(org.cocos2d.types.ccGridSize) -> b
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.grid.CCPageTurn3D -> org.cocos2d.a.d.g:
    org.cocos2d.actions.grid.CCPageTurn3D action(org.cocos2d.types.ccGridSize,float) -> a
    void update(float) -> b
org.cocos2d.actions.grid.CCReuseGrid -> org.cocos2d.a.d.h:
    int t -> c
    org.cocos2d.actions.grid.CCReuseGrid action(int) -> b
    void start(org.cocos2d.nodes.CCNode) -> a
org.cocos2d.actions.grid.CCRipple3D -> org.cocos2d.a.d.i:
    org.cocos2d.types.CGPoint position -> c
    float radius -> e
    int waves -> f
    float amplitude -> g
    float amplitudeRate -> h
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.grid.CCShaky3D -> org.cocos2d.a.d.j:
    int randrange -> c
    boolean shakeZ -> e
    org.cocos2d.actions.grid.CCShaky3D action$15a81ff1(int,org.cocos2d.types.ccGridSize) -> a
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.grid.CCStopGrid -> org.cocos2d.a.d.k:
    org.cocos2d.actions.grid.CCStopGrid action() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
org.cocos2d.actions.grid.CCTwirl -> org.cocos2d.a.d.l:
    org.cocos2d.types.CGPoint position -> c
    int twirls -> e
    float amplitude -> f
    float amplitudeRate -> g
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.grid.CCWaves -> org.cocos2d.a.d.m:
    int waves -> c
    float amplitude -> e
    float amplitudeRate -> f
    boolean vertical -> g
    boolean horizontal -> h
    org.cocos2d.actions.grid.CCWaves action$353f330c(org.cocos2d.types.ccGridSize) -> b
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.grid.CCWaves3D -> org.cocos2d.a.d.n:
    int waves -> c
    float amplitude -> e
    float amplitudeRate -> f
    org.cocos2d.actions.grid.CCWaves3D action$60b03c7b(org.cocos2d.types.ccGridSize) -> b
    void update(float) -> b
    org.cocos2d.actions.grid.CCGrid3DAction copy() -> j
org.cocos2d.actions.instant.CCCallFunc -> org.cocos2d.a.e.a:
    java.lang.Object targetCallback -> c
    java.lang.String selector -> d
    java.lang.Class[] partypes -> e
    java.lang.reflect.Method invocation -> f
    org.cocos2d.actions.instant.CCCallFunc action(java.lang.Object,java.lang.String) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void execute() -> j
    org.cocos2d.actions.instant.CCInstantAction copy() -> k
org.cocos2d.actions.instant.CCCallFuncN -> org.cocos2d.a.e.b:
    org.cocos2d.actions.instant.CCCallFuncN action(java.lang.Object,java.lang.String) -> b
    void execute() -> j
org.cocos2d.actions.instant.CCCallFuncND -> org.cocos2d.a.e.c:
    java.lang.Object data -> g
    org.cocos2d.actions.instant.CCCallFuncND action(java.lang.Object,java.lang.String,java.lang.Object) -> a
    void execute() -> j
org.cocos2d.actions.instant.CCHide -> org.cocos2d.a.e.d:
    org.cocos2d.actions.instant.CCHide action() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.base.CCFiniteTimeAction reverse() -> i
    org.cocos2d.actions.instant.CCInstantAction copy() -> k
org.cocos2d.actions.instant.CCInstantAction -> org.cocos2d.a.e.e:
    org.cocos2d.actions.instant.CCInstantAction copy() -> k
    boolean isDone() -> e
    void step(float) -> a
    void update(float) -> b
    org.cocos2d.actions.base.CCFiniteTimeAction reverse() -> i
    org.cocos2d.actions.base.CCFiniteTimeAction copy() -> h
org.cocos2d.actions.instant.CCPlace -> org.cocos2d.a.e.f:
    org.cocos2d.types.CGPoint position -> c
    org.cocos2d.actions.instant.CCPlace action(org.cocos2d.types.CGPoint) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.instant.CCInstantAction copy() -> k
org.cocos2d.actions.instant.CCShow -> org.cocos2d.a.e.g:
    org.cocos2d.actions.instant.CCShow action() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.base.CCFiniteTimeAction reverse() -> i
    org.cocos2d.actions.instant.CCInstantAction copy() -> k
org.cocos2d.actions.instant.CCToggleVisibility -> org.cocos2d.a.e.h:
    org.cocos2d.actions.instant.CCToggleVisibility action() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.instant.CCInstantAction copy() -> k
org.cocos2d.actions.interval.CCAnimate -> org.cocos2d.a.f.a:
    org.cocos2d.nodes.CCAnimation animation -> d
    org.cocos2d.nodes.CCSpriteFrame origFrame -> e
    boolean restoreOriginalFrame -> f
    boolean $assertionsDisabled -> c
    org.cocos2d.actions.interval.CCAnimate action(float,org.cocos2d.nodes.CCAnimation,boolean) -> a
    org.cocos2d.actions.interval.CCAnimate action(org.cocos2d.nodes.CCAnimation) -> a
    org.cocos2d.actions.interval.CCAnimate action$61be56b2(org.cocos2d.nodes.CCAnimation) -> b
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    void update(float) -> b
    org.cocos2d.actions.interval.CCAnimate reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCBezierBy -> org.cocos2d.a.f.b:
    org.cocos2d.types.CCBezierConfig config -> c
    org.cocos2d.types.CGPoint startPosition -> d
    org.cocos2d.actions.interval.CCBezierBy action$219c77da(org.cocos2d.types.CCBezierConfig) -> a
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCBezierBy reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.interval.CCBezierTo -> org.cocos2d.a.f.c:
    org.cocos2d.types.CCBezierConfig originalconfig -> e
    org.cocos2d.actions.interval.CCBezierTo action$219c357e(org.cocos2d.types.CCBezierConfig) -> b
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.interval.CCBezierBy reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCBlink -> org.cocos2d.a.f.d:
    int times -> c
    org.cocos2d.actions.interval.CCBlink action$6f60cefc(int) -> b
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCDelayTime -> org.cocos2d.a.f.e:
    org.cocos2d.actions.interval.CCDelayTime action(float) -> c
    org.cocos2d.actions.interval.CCDelayTime copy() -> j
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCFadeIn -> org.cocos2d.a.f.f:
    org.cocos2d.actions.interval.CCFadeIn action(float) -> c
    void update(float) -> b
    org.cocos2d.actions.interval.CCFadeOut reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCFadeOut -> org.cocos2d.a.f.g:
    org.cocos2d.actions.interval.CCFadeOut action(float) -> c
    void update(float) -> b
    org.cocos2d.actions.interval.CCFadeIn reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCFadeTo -> org.cocos2d.a.f.h:
    int toOpacity -> c
    int fromOpacity -> d
    org.cocos2d.actions.interval.CCFadeTo action$3d41d207(float) -> c
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCIntervalAction -> org.cocos2d.a.f.i:
    float elapsed -> l
    boolean firstTick -> c
    boolean $assertionsDisabled -> m
    float getElapsed() -> p
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
    boolean isDone() -> e
    void step(float) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.base.CCFiniteTimeAction reverse() -> i
    org.cocos2d.actions.base.CCFiniteTimeAction copy() -> h
org.cocos2d.actions.interval.CCJumpBy -> org.cocos2d.a.f.j:
    org.cocos2d.types.CGPoint startPosition -> c
    org.cocos2d.types.CGPoint delta -> d
    float height -> e
    int jumps -> f
    org.cocos2d.actions.interval.CCJumpBy action(float,org.cocos2d.types.CGPoint,float,int) -> a
    org.cocos2d.actions.interval.CCJumpBy copy() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCJumpBy reverse() -> m
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCJumpTo -> org.cocos2d.a.f.k:
    org.cocos2d.actions.interval.CCJumpTo action$555c91ed(float,org.cocos2d.types.CGPoint,float) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.interval.CCJumpBy copy() -> j
org.cocos2d.actions.interval.CCMoveBy -> org.cocos2d.a.f.l:
    org.cocos2d.actions.interval.CCMoveBy action(float,org.cocos2d.types.CGPoint) -> a
    org.cocos2d.actions.interval.CCMoveBy copy() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.interval.CCMoveBy reverse() -> m
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCMoveTo -> org.cocos2d.a.f.m:
    org.cocos2d.types.CGPoint endPosition -> d
    org.cocos2d.types.CGPoint startPosition -> e
    org.cocos2d.types.CGPoint delta -> c
    org.cocos2d.actions.interval.CCMoveTo action(float,org.cocos2d.types.CGPoint) -> b
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
org.cocos2d.actions.interval.CCProgressFromTo -> org.cocos2d.a.f.n:
    float to_ -> c
    float from_ -> d
    org.cocos2d.actions.interval.CCProgressFromTo action$3b1d9261(float) -> c
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCPropertyAction -> org.cocos2d.a.f.o:
    java.lang.reflect.Method setMethod_ -> c
    java.lang.String key_ -> d
    float from_ -> e
    float to_ -> f
    float delta_ -> g
    org.cocos2d.actions.interval.CCPropertyAction action$6abfdb0(java.lang.String,float,float) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCPropertyAction reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCRepeat -> org.cocos2d.a.f.p:
    int times -> c
    int total -> d
    org.cocos2d.actions.base.CCFiniteTimeAction other -> e
    org.cocos2d.actions.interval.CCRepeat action(org.cocos2d.actions.base.CCFiniteTimeAction,int) -> a
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    void update(float) -> b
    boolean isDone() -> e
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.interval.CCReverseTime -> org.cocos2d.a.f.q:
    org.cocos2d.actions.base.CCFiniteTimeAction other -> c
    org.cocos2d.actions.interval.CCReverseTime action(org.cocos2d.actions.base.CCFiniteTimeAction) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCRotateBy -> org.cocos2d.a.f.r:
    float angle -> c
    float startAngle -> d
    org.cocos2d.actions.interval.CCRotateBy action(float,float) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCRotateBy reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCRotateTo -> org.cocos2d.a.f.s:
    float dstAngle -> c
    float diffAngle -> d
    float startAngle -> e
    org.cocos2d.actions.interval.CCRotateTo action(float,float) -> a
    org.cocos2d.actions.interval.CCRotateTo copy() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCScaleBy -> org.cocos2d.a.f.t:
    org.cocos2d.actions.interval.CCScaleBy action(float,float) -> a
    org.cocos2d.actions.interval.CCScaleBy action$1227e64() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    org.cocos2d.actions.interval.CCScaleBy reverse() -> m
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCScaleTo copy() -> n
org.cocos2d.actions.interval.CCScaleTo -> org.cocos2d.a.f.u:
    float startScaleX -> c
    float startScaleY -> d
    float endScaleX -> e
    float endScaleY -> f
    float deltaX -> g
    float deltaY -> h
    org.cocos2d.actions.interval.CCScaleTo action(float,float) -> b
    org.cocos2d.actions.interval.CCScaleTo action$122c0c0() -> o
    org.cocos2d.actions.interval.CCScaleTo copy() -> n
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCSequence -> org.cocos2d.a.f.v:
    org.cocos2d.actions.base.CCFiniteTimeAction[] actions -> c
    float split -> d
    int last -> e
    org.cocos2d.actions.interval.CCSequence actions(org.cocos2d.actions.base.CCFiniteTimeAction,org.cocos2d.actions.base.CCFiniteTimeAction[]) -> a
    org.cocos2d.actions.interval.CCSequence copy() -> j
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    void update(float) -> b
    org.cocos2d.actions.interval.CCSequence reverse() -> m
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCSpawn -> org.cocos2d.a.f.w:
    org.cocos2d.actions.base.CCFiniteTimeAction one -> c
    org.cocos2d.actions.base.CCFiniteTimeAction two -> d
    org.cocos2d.actions.interval.CCSpawn actions(org.cocos2d.actions.base.CCFiniteTimeAction,org.cocos2d.actions.base.CCFiniteTimeAction[]) -> a
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
    void start(org.cocos2d.nodes.CCNode) -> a
    void stop() -> d
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
org.cocos2d.actions.interval.CCTintBy -> org.cocos2d.a.f.x:
    org.cocos2d.types.ccColor3B delta -> c
    org.cocos2d.types.ccColor3B from -> d
    org.cocos2d.actions.interval.CCTintBy action(float,org.cocos2d.types.ccColor3B) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCTintBy reverse() -> j
    org.cocos2d.actions.interval.CCIntervalAction reverse() -> k
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.interval.CCTintTo -> org.cocos2d.a.f.y:
    org.cocos2d.types.ccColor3B to -> c
    org.cocos2d.types.ccColor3B from -> d
    org.cocos2d.actions.interval.CCTintTo action(float,org.cocos2d.types.ccColor3B) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.interval.CCIntervalAction copy() -> l
org.cocos2d.actions.tile.CCFadeOutBLTiles -> org.cocos2d.a.g.a:
    org.cocos2d.actions.tile.CCFadeOutBLTiles action(org.cocos2d.types.ccGridSize,float) -> a
    float testFunc(org.cocos2d.types.ccGridSize,float) -> b
org.cocos2d.actions.tile.CCFadeOutDownTiles -> org.cocos2d.a.g.b:
    org.cocos2d.actions.tile.CCFadeOutDownTiles action(org.cocos2d.types.ccGridSize,float) -> a
    float testFunc(org.cocos2d.types.ccGridSize,float) -> b
org.cocos2d.actions.tile.CCFadeOutTRTiles -> org.cocos2d.a.g.c:
    org.cocos2d.actions.tile.CCFadeOutTRTiles action(org.cocos2d.types.ccGridSize,float) -> c
    float testFunc(org.cocos2d.types.ccGridSize,float) -> b
    void transformTile(org.cocos2d.types.ccGridSize,float) -> d
    void update(float) -> b
org.cocos2d.actions.tile.CCFadeOutUpTiles -> org.cocos2d.a.g.d:
    org.cocos2d.actions.tile.CCFadeOutUpTiles action(org.cocos2d.types.ccGridSize,float) -> e
    float testFunc(org.cocos2d.types.ccGridSize,float) -> b
    void transformTile(org.cocos2d.types.ccGridSize,float) -> d
org.cocos2d.actions.tile.CCJumpTiles3D -> org.cocos2d.a.g.e:
    int jumps -> c
    float amplitude -> e
    float amplitudeRate -> f
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.CCShakyTiles3D -> org.cocos2d.a.g.f:
    int randrange -> c
    boolean shakeZ -> e
    org.cocos2d.actions.tile.CCShakyTiles3D action$2b8a1338(org.cocos2d.types.ccGridSize) -> a
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.CCShatteredTiles3D -> org.cocos2d.a.g.g:
    int randrange -> c
    boolean once -> e
    boolean shatterZ -> f
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.CCShuffleTiles -> org.cocos2d.a.g.h:
    java.util.Random rand -> c
    int seed -> e
    int tilesCount -> f
    int[] tilesOrder -> g
    org.cocos2d.actions.tile.Tile[] tiles -> h
    org.cocos2d.actions.tile.CCShuffleTiles action$4dfdc9d0(org.cocos2d.types.ccGridSize) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.CCSplitCols -> org.cocos2d.a.g.i:
    int cols -> c
    org.cocos2d.types.CGSize winSize -> e
    org.cocos2d.actions.tile.CCSplitCols action$7c77da98(float) -> c
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.CCSplitRows -> org.cocos2d.a.g.j:
    int rows -> c
    org.cocos2d.types.CGSize winSize -> e
    org.cocos2d.actions.tile.CCSplitRows action$7ba450be(float) -> c
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.CCTiledGrid3DAction -> org.cocos2d.a.g.k:
    org.cocos2d.grid.CCGridBase grid() -> m
    org.cocos2d.types.ccQuad3 originalTile(org.cocos2d.types.ccGridSize) -> b
    void setTile(org.cocos2d.types.ccGridSize,org.cocos2d.types.ccQuad3) -> a
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
    org.cocos2d.actions.grid.CCGridAction copy() -> n
org.cocos2d.actions.tile.CCTurnOffTiles -> org.cocos2d.a.g.l:
    java.util.Random rand -> c
    int seed -> e
    int tilesCount -> f
    int[] tilesOrder -> g
    org.cocos2d.actions.tile.CCTurnOffTiles action(int,org.cocos2d.types.ccGridSize,float) -> a
    void start(org.cocos2d.nodes.CCNode) -> a
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.CCWavesTiles3D -> org.cocos2d.a.g.m:
    int waves -> c
    float amplitude -> e
    float amplitudeRate -> f
    void update(float) -> b
    org.cocos2d.actions.tile.CCTiledGrid3DAction copy() -> j
org.cocos2d.actions.tile.Tile -> org.cocos2d.a.g.n:
    org.cocos2d.types.CGPoint position -> a
    org.cocos2d.types.CGPoint startPosition -> b
    org.cocos2d.types.ccGridSize delta -> c
    org.cocos2d.actions.tile.Tile make(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.ccGridSize) -> a
org.cocos2d.config.ccMacros -> org.cocos2d.b.a:
    float CCRANDOM_MINUS1_1() -> a
    void CC_ENABLE_DEFAULT_GL_STATES(javax.microedition.khronos.opengles.GL10) -> a
    void CC_DISABLE_DEFAULT_GL_STATES(javax.microedition.khronos.opengles.GL10) -> b
org.cocos2d.events.CCKeyDispatcher -> org.cocos2d.c.a:
    java.util.ArrayList keyHandlers -> a
    boolean dispatchEvents -> b
    org.cocos2d.events.CCKeyDispatcher _sharedDispatcher -> c
    org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue eventQueue -> d
    org.cocos2d.events.CCKeyDispatcher sharedDispatcher() -> a
    void addDelegate$6dc89a32(org.cocos2d.protocols.CCKeyDelegateProtocol) -> a
    void removeDelegate(org.cocos2d.protocols.CCKeyDelegateProtocol) -> b
    void update() -> b
org.cocos2d.events.CCKeyHandler -> org.cocos2d.c.b:
    org.cocos2d.protocols.CCKeyDelegateProtocol delegate_ -> c
    boolean enabledSelectors_ -> a
    int priority_ -> d
    boolean $assertionsDisabled -> b
    org.cocos2d.protocols.CCKeyDelegateProtocol getDelegate() -> a
    int getPriority() -> b
    boolean ccKeyDown(int,android.view.KeyEvent) -> a
    boolean ccKeyUp(int,android.view.KeyEvent) -> b
org.cocos2d.events.CCTargetedTouchHandler -> org.cocos2d.c.c:
    boolean swallowsTouches -> a
    java.util.ArrayList claimedSet -> d
    void addClaimed(int) -> a
    void removeClaimed(int) -> b
    boolean hasClaimed(int) -> c
org.cocos2d.events.CCTouchDispatcher -> org.cocos2d.c.d:
    java.util.ArrayList motionListeners -> a
    java.util.ArrayList targetedHandlers -> b
    java.util.ArrayList touchHandlers -> c
    boolean dispatchEvents -> d
    org.cocos2d.events.CCTouchDispatcher _sharedDispatcher -> e
    org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue eventQueue -> f
    void setDispatchEvents(boolean) -> a
    org.cocos2d.events.CCTouchDispatcher sharedDispatcher() -> a
    void addHandler(org.cocos2d.events.CCTouchHandler,java.util.ArrayList) -> a
    void addDelegate$2b3a37ae(org.cocos2d.protocols.CCTouchDelegateProtocol) -> a
    void addTargetedDelegate$3c0c0b3e(org.cocos2d.protocols.CCTouchDelegateProtocol) -> b
    void removeDelegate(org.cocos2d.protocols.CCTouchDelegateProtocol) -> c
    void removeAllDelegates() -> b
    void queueMotionEvent(android.view.MotionEvent) -> a
    void update() -> c
    java.util.ArrayList access$0(org.cocos2d.events.CCTouchDispatcher) -> a
    java.util.ArrayList access$1(org.cocos2d.events.CCTouchDispatcher) -> b
org.cocos2d.events.CCTouchDispatcher$1 -> org.cocos2d.c.e:
    org.cocos2d.events.CCTouchDispatcher this$0 -> a
    java.util.ArrayList val$array -> b
    org.cocos2d.events.CCTouchHandler val$handler -> c
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.events.CCTouchDispatcher$2 -> org.cocos2d.c.f:
    org.cocos2d.events.CCTouchDispatcher this$0 -> a
    org.cocos2d.protocols.CCTouchDelegateProtocol val$delegate -> b
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.events.CCTouchDispatcher$3 -> org.cocos2d.c.g:
    org.cocos2d.events.CCTouchDispatcher this$0 -> a
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag -> org.cocos2d.c.h:
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag ccTouchSelectorNoneBit -> a
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag ccTouchSelectorBeganBit -> b
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag ccTouchSelectorMovedBit -> c
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag ccTouchSelectorEndedBit -> d
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag ccTouchSelectorCancelledBit -> e
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag ccTouchSelectorAllBits -> f
    int flag -> g
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag[] ENUM$VALUES -> h
    int getFlag() -> a
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag[] values() -> values
    org.cocos2d.events.CCTouchDispatcher$ccTouchSelectorFlag valueOf(java.lang.String) -> valueOf
org.cocos2d.events.CCTouchHandler -> org.cocos2d.c.i:
    org.cocos2d.protocols.CCTouchDelegateProtocol delegate_ -> a
    int priority_ -> d
    int enabledSelectors_ -> b
    boolean $assertionsDisabled -> c
    org.cocos2d.protocols.CCTouchDelegateProtocol getDelegate() -> a
    int getPriority() -> b
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesCancelled(android.view.MotionEvent) -> d
org.cocos2d.grid.CCGrabber -> org.cocos2d.d.a:
    int[] fbo -> a
    int[] oldFBO -> b
    void finalize() -> finalize
org.cocos2d.grid.CCGrid3D -> org.cocos2d.d.b:
    java.nio.FloatBuffer texCoordinates -> a
    java.nio.FloatBuffer vertices -> b
    java.nio.FloatBuffer originalVertices -> c
    java.nio.ShortBuffer indices -> d
    java.nio.FloatBuffer mVertexBuffer -> e
    void blit(javax.microedition.khronos.opengles.GL10) -> a
    void calculateVertexPoints() -> a
    org.cocos2d.types.CCVertex3D originalVertex(org.cocos2d.types.ccGridSize) -> a
    void setVertex(org.cocos2d.types.ccGridSize,org.cocos2d.types.CCVertex3D) -> a
    void reuse$62c01aa1() -> b
org.cocos2d.grid.CCGridBase -> org.cocos2d.d.c:
    boolean active_ -> f
    int reuseGrid_ -> g
    org.cocos2d.types.ccGridSize gridSize_ -> h
    org.cocos2d.opengl.CCTexture2D texture_ -> i
    org.cocos2d.types.CGPoint step_ -> j
    org.cocos2d.grid.CCGrabber grabber_ -> k
    boolean isTextureFlipped_ -> l
    org.cocos2d.types.CGPoint getStep() -> c
    int reuseGrid() -> d
    void setReuseGrid(int) -> a
    boolean isActive() -> e
    void setActive(boolean) -> a
    int getGridWidth() -> f
    int getGridHeight() -> g
    java.lang.String toString() -> toString
    void beforeDraw(javax.microedition.khronos.opengles.GL10) -> b
    void afterDraw(javax.microedition.khronos.opengles.GL10,org.cocos2d.nodes.CCNode) -> a
    void finalize() -> finalize
    void blit(javax.microedition.khronos.opengles.GL10) -> a
    void reuse$62c01aa1() -> b
    void calculateVertexPoints() -> a
    void access$0$3804dc1f(org.cocos2d.grid.CCGridBase,org.cocos2d.types.ccGridSize,org.cocos2d.opengl.CCTexture2D) -> a
org.cocos2d.grid.CCGridBase$1 -> org.cocos2d.d.d:
    org.cocos2d.grid.CCGridBase this$0 -> a
    org.cocos2d.types.ccGridSize val$gSize -> b
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
org.cocos2d.grid.CCTiledGrid3D -> org.cocos2d.d.e:
    java.nio.FloatBuffer texCoordinates -> a
    java.nio.FloatBuffer vertices -> b
    java.nio.FloatBuffer originalVertices -> c
    java.nio.ShortBuffer indices -> d
    org.cocos2d.grid.CCTiledGrid3D make(org.cocos2d.types.ccGridSize) -> a
    void blit(javax.microedition.khronos.opengles.GL10) -> a
    void calculateVertexPoints() -> a
    void setTile(org.cocos2d.types.ccGridSize,org.cocos2d.types.ccQuad3) -> a
    org.cocos2d.types.ccQuad3 originalTile(org.cocos2d.types.ccGridSize) -> b
    void reuse$62c01aa1() -> b
org.cocos2d.layers.CCColorLayer -> org.cocos2d.e.a:
    org.cocos2d.types.ccColor3B color_ -> a
    int opacity_ -> b
    org.cocos2d.types.ccBlendFunc blendFunc_ -> c
    java.nio.FloatBuffer squareVertices_ -> d
    java.nio.FloatBuffer squareColors_ -> e
    org.cocos2d.layers.CCColorLayer node(org.cocos2d.types.ccColor4B) -> a
    org.cocos2d.layers.CCColorLayer node(org.cocos2d.types.ccColor4B,float,float) -> a
    void init(org.cocos2d.types.ccColor4B,float,float) -> b
    void updateColor() -> e
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    org.cocos2d.types.ccColor3B getColor() -> b
    void setColor(org.cocos2d.types.ccColor3B) -> a
    void setOpacity(int) -> a
    int getOpacity() -> c
    void setContentSize(org.cocos2d.types.CGSize) -> a
org.cocos2d.layers.CCLayer -> org.cocos2d.e.b:
    boolean isTouchEnabled_ -> l
    boolean isAccelerometerEnabled_ -> m
    int accelerometerUpdateRate -> n
    android.hardware.SensorManager sensorManager -> o
    android.hardware.Sensor accelerometer -> p
    boolean isKeyEnabled_ -> q
    boolean $assertionsDisabled -> r
    boolean isTouchEnabled() -> l
    void setIsTouchEnabled(boolean) -> c
    void setIsAccelerometerEnabled$1385ff() -> m
    org.cocos2d.layers.CCLayer node() -> n
    void registerWithTouchDispatcher() -> o
    void registerWithAccelerometer() -> b
    void onEnter() -> a
    void onExit() -> n_
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesCancelled(android.view.MotionEvent) -> d
    void ccAccelerometerChanged$483d242b(float,float) -> b
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    boolean ccKeyDown(int,android.view.KeyEvent) -> a
    boolean ccKeyUp(int,android.view.KeyEvent) -> b
org.cocos2d.layers.CCMultiplexLayer -> org.cocos2d.e.c:
    java.util.ArrayList layers -> b
    int enabledLayer -> c
    boolean $assertionsDisabled -> a
    org.cocos2d.layers.CCMultiplexLayer node(org.cocos2d.layers.CCLayer[]) -> a
org.cocos2d.layers.CCScene -> org.cocos2d.e.d:
    org.cocos2d.layers.CCScene node() -> b
org.cocos2d.layers.CCTMXLayer -> org.cocos2d.e.e:
    org.cocos2d.layers.CCTMXTilesetInfo tileset -> a
    java.lang.String layerName -> b
    org.cocos2d.types.CGSize layerSize -> c
    org.cocos2d.types.CGSize mapTileSize -> d
    java.nio.IntBuffer tiles -> e
    int layerOrientation_ -> f
    java.util.HashMap properties -> g
    int opacity_ -> h
    int minGID_ -> i
    int maxGID_ -> j
    int vertexZvalue_ -> k
    boolean useAutomaticVertexZ_ -> l
    float alphaFuncValue_ -> m
    org.cocos2d.nodes.CCSprite reusedTile_ -> n
    java.util.ArrayList atlasIndexArray_ -> o
    boolean $assertionsDisabled -> p
    org.cocos2d.layers.CCTMXLayer layer(org.cocos2d.layers.CCTMXTilesetInfo,org.cocos2d.layers.CCTMXLayerInfo,org.cocos2d.layers.CCTMXMapInfo) -> a
    void releaseMap() -> b
    org.cocos2d.nodes.CCSprite tileAt(org.cocos2d.types.CGPoint) -> a
    int tileGIDAt(org.cocos2d.types.CGPoint) -> b
    void setTileGID$2cd1692a(org.cocos2d.types.CGPoint) -> c
    org.cocos2d.types.CGPoint positionAt(org.cocos2d.types.CGPoint) -> g
    java.lang.String propertyNamed(java.lang.String) -> c
    void setupTiles() -> c
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int,int) -> a
    void removeChild(org.cocos2d.nodes.CCNode,boolean) -> a
    int vertexZForPos(org.cocos2d.types.CGPoint) -> h
    org.cocos2d.nodes.CCSprite insertTileForGID$42fa5c55(org.cocos2d.types.CGPoint) -> i
    int atlasIndexForExistantZ(int) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.layers.CCTMXLayerInfo -> org.cocos2d.e.f:
    java.lang.String name -> a
    org.cocos2d.types.CGSize layerSize -> b
    java.nio.IntBuffer tiles -> c
    boolean visible -> d
    int opacity -> e
    boolean ownTiles -> f
    int minGID -> g
    int maxGID -> h
    java.util.HashMap properties -> i
    org.cocos2d.types.CGPoint offset -> j
org.cocos2d.layers.CCTMXMapInfo -> org.cocos2d.e.g:
    java.lang.String LOG_TAG -> a
    java.lang.StringBuilder currentString -> b
    boolean storingCharacters -> c
    int layerAttribs -> d
    int parentElement -> e
    int parentGID -> f
    java.lang.String filename -> g
    int orientation -> h
    org.cocos2d.types.CGSize mapSize -> i
    org.cocos2d.types.CGSize tileSize -> j
    java.util.ArrayList layers -> k
    java.util.ArrayList tilesets -> l
    java.util.ArrayList objectGroups -> m
    java.util.HashMap properties -> n
    java.util.HashMap tileProperties -> o
    org.cocos2d.layers.CCTMXMapInfo formatWithTMXFile(java.lang.String) -> a
    void parseXMLFile(java.lang.String) -> b
    void access$0(org.cocos2d.layers.CCTMXMapInfo,java.lang.String) -> a
org.cocos2d.layers.CCTMXMapInfo$CCTMXXMLParser -> org.cocos2d.e.h:
    org.cocos2d.layers.CCTMXMapInfo this$0 -> a
    boolean $assertionsDisabled -> b
    void startDocument() -> startDocument
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
org.cocos2d.layers.CCTMXObjectGroup -> org.cocos2d.e.i:
    java.lang.String groupName -> a
    org.cocos2d.types.CGPoint positionOffset -> b
    java.util.ArrayList objects -> c
    java.util.HashMap properties -> d
    java.util.HashMap objectNamed(java.lang.String) -> a
org.cocos2d.layers.CCTMXTiledMap -> org.cocos2d.e.j:
    java.lang.String LOG_TAG -> a
    org.cocos2d.types.CGSize mapSize_ -> b
    org.cocos2d.types.CGSize tileSize_ -> c
    int mapOrientation_ -> d
    java.util.ArrayList objectGroups -> e
    java.util.HashMap properties_ -> f
    java.util.HashMap tileProperties_ -> g
    boolean $assertionsDisabled -> h
    org.cocos2d.types.CGSize getMapSize() -> b
    org.cocos2d.types.CGSize getTileSize() -> c
    org.cocos2d.layers.CCTMXTiledMap tiledMap(java.lang.String) -> a
    org.cocos2d.layers.CCTMXLayer layerNamed(java.lang.String) -> b
    org.cocos2d.layers.CCTMXObjectGroup objectGroupNamed(java.lang.String) -> c
    java.util.HashMap propertiesForGID(int) -> a
    org.cocos2d.layers.CCTMXTilesetInfo tilesetForLayer(org.cocos2d.layers.CCTMXLayerInfo,org.cocos2d.layers.CCTMXMapInfo) -> a
org.cocos2d.layers.CCTMXTilesetInfo -> org.cocos2d.e.k:
    java.lang.String name -> a
    int firstGid -> b
    org.cocos2d.types.CGSize tileSize -> c
    int spacing -> d
    int margin -> e
    java.lang.String sourceImage -> f
    org.cocos2d.types.CGSize imageSize -> g
    org.cocos2d.types.CGRect rectForGID(int) -> a
org.cocos2d.menus.CCMenu -> org.cocos2d.f.a:
    org.cocos2d.menus.CCMenuItem selectedItem -> b
    org.cocos2d.menus.CCMenu$MenuState state -> c
    boolean $assertionsDisabled -> a
    void registerWithTouchDispatcher() -> o
    org.cocos2d.menus.CCMenu menu(org.cocos2d.menus.CCMenuItem[]) -> a
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int,int) -> a
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesCancelled(android.view.MotionEvent) -> d
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    void alignItemsVertically() -> b
    void alignItemsHorizontally() -> c
    void alignItemsHorizontally(float) -> a
    void alignItemsInColumns(int[]) -> a
    org.cocos2d.menus.CCMenuItem itemForTouch(android.view.MotionEvent) -> e
org.cocos2d.menus.CCMenu$MenuState -> org.cocos2d.f.b:
    org.cocos2d.menus.CCMenu$MenuState kMenuStateWaiting -> a
    org.cocos2d.menus.CCMenu$MenuState kMenuStateTrackingTouch -> b
    org.cocos2d.menus.CCMenu$MenuState[] ENUM$VALUES -> c
    org.cocos2d.menus.CCMenu$MenuState[] values() -> values
    org.cocos2d.menus.CCMenu$MenuState valueOf(java.lang.String) -> valueOf
org.cocos2d.menus.CCMenuItem -> org.cocos2d.f.c:
    int _fontSize -> a
    java.lang.String fontName -> b
    boolean isEnabled_ -> c
    boolean isSelected_ -> d
    java.lang.Object targetCallback -> e
    java.lang.String selector -> f
    java.lang.reflect.Method invocation -> g
    void activate() -> e
    void selected() -> f
    void unselected() -> g
    void setIsEnabled(boolean) -> a
    boolean isEnabled() -> h
    void rect(org.cocos2d.types.CGRect) -> a
org.cocos2d.menus.CCMenuItemFont -> org.cocos2d.f.d:
    int _fontSize -> g
    java.lang.String _fontName -> h
    void setFontSize(int) -> b
    void setFontName(java.lang.String) -> a
    org.cocos2d.menus.CCMenuItemFont item(java.lang.String) -> b
    org.cocos2d.menus.CCMenuItemFont item(java.lang.String,org.cocos2d.nodes.CCNode,java.lang.String) -> a
org.cocos2d.menus.CCMenuItemImage -> org.cocos2d.f.e:
    org.cocos2d.menus.CCMenuItemImage item(java.lang.String,java.lang.String) -> a
    org.cocos2d.menus.CCMenuItemImage item(java.lang.String,java.lang.String,org.cocos2d.nodes.CCNode,java.lang.String) -> a
    org.cocos2d.menus.CCMenuItemImage item$6141642f(java.lang.String,java.lang.String,org.cocos2d.nodes.CCNode,java.lang.String) -> b
org.cocos2d.menus.CCMenuItemLabel -> org.cocos2d.f.f:
    org.cocos2d.protocols.CCLabelProtocol label_ -> g
    org.cocos2d.types.ccColor3B colorBackup -> h
    org.cocos2d.types.ccColor3B disabledColor_ -> i
    float originalScale_ -> j
    org.cocos2d.menus.CCMenuItemLabel item(org.cocos2d.protocols.CCLabelProtocol,org.cocos2d.nodes.CCNode,java.lang.String) -> a
    void setOpacity(int) -> a
    int getOpacity() -> c
    void setColor(org.cocos2d.types.ccColor3B) -> a
    org.cocos2d.types.ccColor3B getColor() -> b
    void setDisabledColor(org.cocos2d.types.ccColor3B) -> b
    void setString(java.lang.String) -> c
    void activate() -> e
    void selected() -> f
    void unselected() -> g
    void setIsEnabled(boolean) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.menus.CCMenuItemSprite -> org.cocos2d.f.g:
    org.cocos2d.nodes.CCNode normalImage_ -> g
    org.cocos2d.nodes.CCNode selectedImage_ -> h
    org.cocos2d.nodes.CCNode disabledImage_ -> i
    boolean $assertionsDisabled -> j
    org.cocos2d.menus.CCMenuItemSprite item(org.cocos2d.nodes.CCNode,org.cocos2d.nodes.CCNode,org.cocos2d.nodes.CCNode,java.lang.String) -> a
    org.cocos2d.menus.CCMenuItemSprite item(org.cocos2d.nodes.CCNode,org.cocos2d.nodes.CCNode,org.cocos2d.nodes.CCNode,org.cocos2d.nodes.CCNode,java.lang.String) -> a
    void setOpacity(int) -> a
    void setColor(org.cocos2d.types.ccColor3B) -> a
    org.cocos2d.types.ccColor3B getColor() -> b
    int getOpacity() -> c
    void selected() -> f
    void unselected() -> g
    void setIsEnabled(boolean) -> a
org.cocos2d.menus.CCMenuItemToggle -> org.cocos2d.f.h:
    int selectedIndex_ -> g
    java.util.ArrayList subItems_ -> h
    java.util.ArrayList getSubItemsRef() -> b
    org.cocos2d.menus.CCMenuItemToggle item(org.cocos2d.nodes.CCNode,java.lang.String,org.cocos2d.menus.CCMenuItem[]) -> a
    void setSelectedIndex(int) -> a
    void selected() -> f
    void unselected() -> g
    void activate() -> e
    void setIsEnabled(boolean) -> a
org.cocos2d.nodes.CCAnimation -> org.cocos2d.g.a:
    java.lang.String name_ -> b
    float delay_ -> c
    java.util.ArrayList frames_ -> a
    java.lang.String name() -> a
    float delay() -> b
    java.util.ArrayList frames() -> c
    org.cocos2d.nodes.CCAnimation animation(java.lang.String) -> a
    org.cocos2d.nodes.CCAnimation animation$107bba47(java.lang.String) -> b
    org.cocos2d.nodes.CCAnimation animation(java.lang.String,float,java.util.ArrayList) -> a
    void addFrame(java.lang.String) -> c
org.cocos2d.nodes.CCAtlasNode -> org.cocos2d.g.b:
    org.cocos2d.opengl.CCTextureAtlas textureAtlas_ -> a
    int itemsPerRow -> b
    int itemsPerColumn -> c
    float texStepX -> d
    float texStepY -> e
    int itemWidth -> f
    int itemHeight -> g
    org.cocos2d.types.ccBlendFunc blendFunc_ -> h
    int opacity_ -> i
    org.cocos2d.types.ccColor3B color_ -> j
    org.cocos2d.types.ccColor3B colorUnmodified_ -> k
    boolean opacityModifyRGB_ -> l
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void setOpacity(int) -> a
    int getOpacity() -> c
    void setColor(org.cocos2d.types.ccColor3B) -> a
    org.cocos2d.types.ccColor3B getColor() -> b
    org.cocos2d.opengl.CCTexture2D getTexture() -> e
org.cocos2d.nodes.CCDirector -> org.cocos2d.g.c:
    java.lang.String LOG_TAG -> f
    int projection_ -> g
    android.app.Activity theApp -> a
    int depthBufferFormat_ -> h
    int pixelFormat_ -> i
    int deviceOrientation_ -> b
    int frames_ -> j
    float accumDt_ -> k
    float frameRate_ -> l
    org.cocos2d.nodes.CCLabelAtlas FPSLabel_ -> c
    boolean isPaused -> m
    org.cocos2d.layers.CCScene runningCCScene_ -> n
    org.cocos2d.layers.CCScene nextCCScene_ -> o
    boolean sendCleanupToCCScene_ -> p
    java.util.ArrayList CCScenesStack_ -> q
    long lastUpdate_ -> r
    float dt -> s
    boolean nextDeltaTimeZero_ -> t
    org.cocos2d.opengl.GLSurfaceView openGLView_ -> u
    org.cocos2d.types.CGSize screenSize_ -> v
    org.cocos2d.types.CGSize surfaceSize_ -> w
    float contentScaleFactor_ -> x
    boolean isContentScaleSupported_ -> y
    double animationInterval_ -> z
    double oldAnimationInterval_ -> A
    boolean displayFPS -> B
    org.cocos2d.nodes.CCDirector _sharedDirector -> C
    double sleepInterval -> D
    org.cocos2d.utils.javolution.TextBuilder fpsBuilder -> E
    boolean mTranslucentBackground -> F
    javax.microedition.khronos.opengles.GL10 gl -> d
    boolean $assertionsDisabled -> e
    int getProjection() -> a
    void setProjection(int) -> a
    android.app.Activity getActivity() -> b
    float getZEye() -> c
    void setDeviceOrientation(int) -> b
    boolean getSendCleanupToScene() -> d
    org.cocos2d.layers.CCScene getRunningScene() -> e
    double getAnimationInterval() -> f
    void setAnimationInterval(double) -> a
    void setDisplayFPS(boolean) -> a
    org.cocos2d.nodes.CCDirector sharedDirector() -> g
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> a
    void onSurfaceCreated$4a9c201c(javax.microedition.khronos.opengles.GL10) -> a
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> b
    org.cocos2d.types.CGSize winSize() -> h
    org.cocos2d.types.CGSize displaySize() -> i
    boolean getLandscape() -> j
    void setLandscape(boolean) -> b
    boolean attachInView(android.view.View) -> a
    org.cocos2d.types.CGPoint convertToGL(org.cocos2d.types.CGPoint) -> a
    void convertToGL(float,float,org.cocos2d.types.CGPoint) -> a
    void runWithScene(org.cocos2d.layers.CCScene) -> a
    void replaceScene(org.cocos2d.layers.CCScene) -> b
    void end() -> k
    void onPause() -> l
    void onResume() -> m
org.cocos2d.nodes.CCLabel -> org.cocos2d.g.d:
    org.cocos2d.types.CGSize _dimensions -> a
    org.cocos2d.nodes.CCLabel$TextAlignment _alignment -> b
    java.lang.String _fontName -> c
    float _fontSize -> d
    java.lang.String _string -> e
    int _fontStyle -> f
    org.cocos2d.nodes.CCLabel makeLabel(java.lang.String,java.lang.String,float) -> a
    void setString(java.lang.CharSequence) -> a
    java.lang.String toString() -> toString
    org.cocos2d.types.CGSize access$0(org.cocos2d.nodes.CCLabel) -> a
    java.lang.String access$1(org.cocos2d.nodes.CCLabel) -> b
    java.lang.String access$2(org.cocos2d.nodes.CCLabel) -> c
    float access$3(org.cocos2d.nodes.CCLabel) -> d
    int access$4(org.cocos2d.nodes.CCLabel) -> e
    org.cocos2d.nodes.CCLabel$TextAlignment access$5(org.cocos2d.nodes.CCLabel) -> f
org.cocos2d.nodes.CCLabel$StringReloader -> org.cocos2d.g.e:
    java.lang.ref.WeakReference label -> a
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
org.cocos2d.nodes.CCLabel$TextAlignment -> org.cocos2d.g.f:
    org.cocos2d.nodes.CCLabel$TextAlignment LEFT -> a
    org.cocos2d.nodes.CCLabel$TextAlignment CENTER -> b
    org.cocos2d.nodes.CCLabel$TextAlignment RIGHT -> c
    org.cocos2d.nodes.CCLabel$TextAlignment[] ENUM$VALUES -> d
    org.cocos2d.nodes.CCLabel$TextAlignment[] values() -> values
    org.cocos2d.nodes.CCLabel$TextAlignment valueOf(java.lang.String) -> valueOf
org.cocos2d.nodes.CCLabelAtlas -> org.cocos2d.g.g:
    org.cocos2d.utils.javolution.TextBuilder string_ -> m
    char mapStartChar -> n
    org.cocos2d.nodes.CCLabelAtlas label(java.lang.CharSequence,java.lang.String,int,int,char) -> a
    void updateAtlasValues() -> f
    void setString(java.lang.CharSequence) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.nodes.CCMotionStreak -> org.cocos2d.g.h:
    org.cocos2d.nodes.CCRibbon ribbon_ -> a
    float segThreshold_ -> b
    float width_ -> c
    org.cocos2d.types.CGPoint lastLocation_ -> d
    void update(float) -> a
org.cocos2d.nodes.CCNode -> org.cocos2d.g.i:
    java.lang.String LOG_TAG -> a
    float rotation_ -> s
    float scaleX_ -> t
    float scaleY_ -> u
    float skewX_ -> b
    float skewY_ -> c
    org.cocos2d.types.CGPoint anchorPointInPixels_ -> v
    boolean isRelativeAnchorPoint_ -> d
    org.cocos2d.types.CGPoint anchorPoint_ -> w
    org.cocos2d.types.CGSize contentSize_ -> x
    float[] transformGL_ -> e
    org.cocos2d.types.CGAffineTransform transform_ -> f
    org.cocos2d.types.CGAffineTransform inverse_ -> g
    boolean isTransformDirty_ -> h
    boolean isInverseDirty_ -> i
    boolean isTransformGLDirty_ -> j
    org.cocos2d.types.CGPoint position_ -> y
    org.cocos2d.opengl.CCCamera camera_ -> k
    org.cocos2d.grid.CCGridBase grid_ -> z
    boolean visible_ -> A
    org.cocos2d.nodes.CCNode parent_ -> B
    int tag_ -> l
    float vertexZ_ -> C
    int zOrder_ -> m
    java.util.List children_ -> D
    java.lang.Object userData -> n
    boolean isRunning_ -> o
    java.util.Comparator zOrderComparator -> p
    boolean $assertionsDisabled -> E
    float getRotation() -> p
    void setRotation(float) -> b
    float getScaleX() -> q
    void setScaleX(float) -> c
    float getScaleY() -> r
    void setScaleY(float) -> d
    void setScale(float) -> e
    float getScale() -> s
    org.cocos2d.types.CGPoint getAnchorPointInPixels() -> t
    void setRelativeAnchorPoint(boolean) -> d
    void setContentSize(org.cocos2d.types.CGSize) -> a
    void setContentSize(float,float) -> c
    org.cocos2d.types.CGSize getContentSize() -> u
    org.cocos2d.types.CGSize getContentSizeRef() -> v
    void setAnchorPoint(org.cocos2d.types.CGPoint) -> d
    void setAnchorPoint(float,float) -> d
    org.cocos2d.types.CGPoint getAnchorPoint() -> w
    org.cocos2d.types.CGPoint getAnchorPointRef() -> x
    org.cocos2d.types.CGPoint getPosition() -> y
    org.cocos2d.types.CGPoint getPositionRef() -> z
    void setPosition(org.cocos2d.types.CGPoint) -> e
    void setPosition(float,float) -> e
    org.cocos2d.opengl.CCCamera getCamera() -> A
    org.cocos2d.grid.CCGridBase getGrid() -> B
    void setGrid(org.cocos2d.grid.CCGridBase) -> a
    boolean getVisible() -> C
    void setVisible(boolean) -> e
    org.cocos2d.nodes.CCNode getParent() -> D
    int getTag() -> E
    void setTag(int) -> c
    void setVertexZ(float) -> f
    int getZOrder() -> F
    java.util.List getChildren() -> G
    boolean isRunning() -> H
    org.cocos2d.nodes.CCNode node() -> I
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int,int) -> a
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int) -> a
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode) -> c
    void removeChild(org.cocos2d.nodes.CCNode,boolean) -> a
    void removeChildByTag$2563266(int) -> d
    void removeAllChildren(boolean) -> f
    org.cocos2d.nodes.CCNode getChildByTag(int) -> e
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void visit(javax.microedition.khronos.opengles.GL10) -> b
    void transform(javax.microedition.khronos.opengles.GL10) -> c
    void transformAncestors(javax.microedition.khronos.opengles.GL10) -> d
    org.cocos2d.actions.base.CCAction runAction(org.cocos2d.actions.base.CCAction) -> a
    void stopAllActions() -> J
    void stopAction(org.cocos2d.actions.base.CCAction) -> b
    void stopAction$13462e() -> K
    void scheduleUpdate() -> L
    void scheduleUpdate(int) -> f
    void schedule(java.lang.String) -> d
    void schedule(java.lang.String,float) -> a
    void schedule(org.cocos2d.actions.UpdateCallback) -> a
    void schedule(org.cocos2d.actions.UpdateCallback,float) -> a
    void unschedule(org.cocos2d.actions.UpdateCallback) -> b
    void resumeSchedulerAndActions() -> M
    void pauseSchedulerAndActions() -> N
    org.cocos2d.types.CGAffineTransform nodeToParentTransform() -> b
    void nodeToWorldTransform(org.cocos2d.types.CGAffineTransform) -> a
    void convertToNodeSpace(float,float,org.cocos2d.types.CGPoint) -> a
    org.cocos2d.types.CGPoint convertToWorldSpace$7b74c9fd() -> O
    void convertToWorldSpace$1a63273d(org.cocos2d.types.CGPoint) -> f
    void insertChild(org.cocos2d.nodes.CCNode,int) -> b
    void cleanup() -> P
    java.lang.String toString() -> toString
    void onEnter() -> a
    void onEnterTransitionDidFinish() -> Q
    void onExit() -> n_
    int access$0(org.cocos2d.nodes.CCNode) -> d
org.cocos2d.nodes.CCNode$1 -> org.cocos2d.g.j:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.cocos2d.nodes.CCParallaxNode -> org.cocos2d.g.k:
    java.util.ArrayList parallaxArray_ -> b
    org.cocos2d.types.CGPoint lastPosition -> c
    boolean $assertionsDisabled -> a
    org.cocos2d.nodes.CCParallaxNode node() -> b
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int,int) -> a
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int,float,float,float,float) -> a
    void removeChild(org.cocos2d.nodes.CCNode,boolean) -> a
    void removeAllChildren(boolean) -> f
    void visit(javax.microedition.khronos.opengles.GL10) -> b
org.cocos2d.nodes.CCParallaxNode$CCPointObject -> org.cocos2d.g.l:
    float ratioX_ -> a
    float ratioY_ -> b
    float offsetX_ -> c
    float offsetY_ -> d
    org.cocos2d.nodes.CCNode child_ -> e
    org.cocos2d.nodes.CCNode getChild() -> a
    void setChild(org.cocos2d.nodes.CCNode) -> a
    float getRatioX() -> b
    float getRatioY() -> c
    float getOffsetX() -> d
    float getOffsetY() -> e
org.cocos2d.nodes.CCRibbon -> org.cocos2d.g.m:
    java.util.ArrayList segments_ -> a
    java.util.ArrayList deletedSegments_ -> b
    org.cocos2d.types.CGPoint lastPoint1_ -> c
    org.cocos2d.types.CGPoint lastPoint2_ -> d
    org.cocos2d.types.CGPoint lastLocation_ -> e
    float texVPos_ -> f
    float curTime_ -> g
    float fadeTime_ -> h
    float delta_ -> i
    float lastWidth_ -> j
    boolean pastFirstPoint_ -> k
    org.cocos2d.opengl.CCTexture2D texture_ -> l
    float textureLength_ -> m
    org.cocos2d.types.ccColor4B color_ -> n
    org.cocos2d.types.ccBlendFunc blendFunc_ -> o
    org.cocos2d.types.CGPoint rotatePoint(org.cocos2d.types.CGPoint,float) -> b
    void addPoint(org.cocos2d.types.CGPoint,float) -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.nodes.CCRibbon$CCRibbonSegment -> org.cocos2d.g.n:
    float[] verts -> a
    float[] coords -> b
    float[] colors -> c
    float[] creationTime -> d
    boolean finished -> e
    int end -> f
    int begin -> g
    java.nio.FloatBuffer mVertices -> h
    java.nio.FloatBuffer mCoordinates -> i
    java.nio.FloatBuffer mColors -> j
    void reset() -> a
org.cocos2d.nodes.CCSprite -> org.cocos2d.g.o:
    java.util.HashMap animations_ -> a
    boolean flipY_ -> g
    boolean flipX_ -> h
    int opacity_ -> i
    org.cocos2d.types.ccColor3B color_ -> j
    org.cocos2d.types.ccColor3B colorUnmodified_ -> k
    boolean opacityModifyRGB_ -> l
    org.cocos2d.opengl.CCTexture2D texture_ -> m
    org.cocos2d.types.ccBlendFunc blendFunc_ -> n
    org.cocos2d.types.CGRect rect_ -> o
    java.lang.Boolean rectRotated_ -> p
    org.cocos2d.types.CGPoint offsetPosition_ -> q
    org.cocos2d.types.CGPoint unflippedOffsetPositionFromCenter_ -> r
    org.cocos2d.opengl.CCTextureAtlas textureAtlas_ -> F
    int atlasIndex -> G
    org.cocos2d.nodes.CCSpriteSheet spriteSheet_ -> H
    int honorParentTransform_ -> I
    boolean dirty_ -> J
    boolean recursiveDirty_ -> K
    boolean hasChildren_ -> L
    java.nio.FloatBuffer texCoords -> b
    java.nio.FloatBuffer vertexes -> c
    java.nio.FloatBuffer colors -> d
    boolean usesSpriteSheet_ -> M
    org.cocos2d.types.ccColor4B tmpColor4B -> e
    org.cocos2d.types.ccColor4B[] tmpColors -> f
    org.cocos2d.types.CGAffineTransform tmpMatrix -> O
    org.cocos2d.types.CGAffineTransform tmpNewMatrix -> P
    float[] tmpV -> Q
    boolean $assertionsDisabled -> N
    int getOpacity() -> c
    void setOpacity(int) -> a
    void setOpacityModifyRGB(boolean) -> a
    org.cocos2d.types.ccColor3B getColor() -> b
    void setColor(org.cocos2d.types.ccColor3B) -> a
    java.nio.FloatBuffer getTexCoords() -> e
    java.nio.FloatBuffer getVertices() -> f
    org.cocos2d.types.CGRect getTextureRect() -> g
    org.cocos2d.nodes.CCSprite sprite(org.cocos2d.opengl.CCTexture2D) -> b
    org.cocos2d.nodes.CCSprite sprite(org.cocos2d.nodes.CCSpriteFrame) -> b
    org.cocos2d.nodes.CCSprite sprite$4e446d40(java.lang.String) -> a
    org.cocos2d.nodes.CCSprite sprite(java.lang.String) -> b
    org.cocos2d.nodes.CCSprite sprite(java.lang.String,org.cocos2d.types.CGRect) -> a
    org.cocos2d.nodes.CCSprite sprite(org.cocos2d.nodes.CCSpriteSheet,org.cocos2d.types.CGRect) -> a
    void init(org.cocos2d.opengl.CCTexture2D,org.cocos2d.types.CGRect) -> a
    void init(org.cocos2d.nodes.CCSpriteFrame) -> d
    void setTextureRect(org.cocos2d.types.CGRect,java.lang.Boolean) -> a
    void setTextureRect(org.cocos2d.types.CGRect) -> a
    void useSelfRender() -> h
    void useSpriteSheetRender(org.cocos2d.nodes.CCSpriteSheet) -> a
    void init() -> o
    void setDisplayFrame(org.cocos2d.nodes.CCSpriteFrame) -> a
    void setVisible(boolean) -> e
    void updateColor() -> i
    void setFlipY$1385ff() -> j
    void setTexture(org.cocos2d.opengl.CCTexture2D) -> a
    org.cocos2d.opengl.CCTexture2D getTexture() -> k
    boolean isFrameDisplayed(org.cocos2d.nodes.CCSpriteFrame) -> c
    org.cocos2d.nodes.CCSpriteFrame displayedFrame() -> l
    void SET_DIRTY_RECURSIVELY() -> R
    void setTextureRect(org.cocos2d.types.CGRect,org.cocos2d.types.CGSize,java.lang.Boolean) -> a
    void setTextureRect(float,float,float,float,float,float,boolean) -> a
    void setDirtyRecursively$1385ff() -> S
    void setPosition(org.cocos2d.types.CGPoint) -> e
    void setPosition(float,float) -> e
    void setRotation(float) -> b
    void setScaleX(float) -> c
    void setScaleY(float) -> d
    void setScale(float) -> e
    void setVertexZ(float) -> f
    void setAnchorPoint(org.cocos2d.types.CGPoint) -> d
    void setRelativeAnchorPoint(boolean) -> d
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int,int) -> a
    void removeChild(org.cocos2d.nodes.CCNode,boolean) -> a
    void removeAllChildren(boolean) -> f
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void updateTransform() -> m
    org.cocos2d.types.ccBlendFunc getBlendFunc() -> n
    void setBlendFunc(org.cocos2d.types.ccBlendFunc) -> a
org.cocos2d.nodes.CCSpriteFrame -> org.cocos2d.g.p:
    org.cocos2d.types.CGRect rect_ -> a
    org.cocos2d.types.CGPoint offset_ -> b
    org.cocos2d.types.CGSize originalSize_ -> c
    org.cocos2d.opengl.CCTexture2D texture_ -> d
    java.lang.Boolean rotated_ -> e
    org.cocos2d.types.CGRect getRect() -> a
    org.cocos2d.nodes.CCSpriteFrame frame(org.cocos2d.opengl.CCTexture2D,org.cocos2d.types.CGRect,org.cocos2d.types.CGPoint) -> a
    org.cocos2d.nodes.CCSpriteFrame frame(org.cocos2d.opengl.CCTexture2D,org.cocos2d.types.CGRect,java.lang.Boolean,org.cocos2d.types.CGPoint,org.cocos2d.types.CGSize) -> a
org.cocos2d.nodes.CCSpriteFrameCache -> org.cocos2d.g.q:
    java.util.HashMap spriteFrames -> a
    org.cocos2d.nodes.CCSpriteFrameCache sharedSpriteFrameCache_ -> b
    org.cocos2d.nodes.CCSpriteFrameCache sharedSpriteFrameCache() -> a
    void purgeSharedSpriteFrameCache() -> b
    java.util.Set addSpriteFrames(java.util.HashMap,org.cocos2d.opengl.CCTexture2D) -> a
    java.util.Set addSpriteFrames(java.lang.String) -> a
    void addSpriteFrame(org.cocos2d.nodes.CCSpriteFrame,java.lang.String) -> a
    org.cocos2d.nodes.CCSpriteFrame getSpriteFrame(java.lang.String) -> b
org.cocos2d.nodes.CCSpriteSheet -> org.cocos2d.g.r:
    org.cocos2d.opengl.CCTextureAtlas textureAtlas_ -> q
    org.cocos2d.types.ccBlendFunc blendFunc_ -> r
    java.util.ArrayList descendants_ -> F
    boolean $assertionsDisabled -> G
    org.cocos2d.opengl.CCTextureAtlas getTextureAtlas() -> e
    org.cocos2d.nodes.CCSpriteSheet spriteSheet(java.lang.String) -> a
    org.cocos2d.nodes.CCSpriteSheet spriteSheet$3bd992da(java.lang.String) -> b
    void visit(javax.microedition.khronos.opengles.GL10) -> b
    org.cocos2d.nodes.CCNode addChild(org.cocos2d.nodes.CCNode,int,int) -> a
    void removeChild(org.cocos2d.nodes.CCNode,boolean) -> a
    void removeAllChildren(boolean) -> f
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void increaseAtlasCapacity() -> b
    int highestAtlasIndexInChild(org.cocos2d.nodes.CCSprite) -> b
    int atlasIndex(org.cocos2d.nodes.CCSprite,int) -> a
    void insertChild(org.cocos2d.nodes.CCSprite,int) -> b
    void removeSpriteFromAtlas(org.cocos2d.nodes.CCSprite) -> a
    org.cocos2d.opengl.CCTexture2D getTexture() -> f
    void addQuadFromSprite(org.cocos2d.nodes.CCSprite,int) -> c
    org.cocos2d.nodes.CCSpriteSheet addSpriteWithoutQuad(org.cocos2d.nodes.CCSprite,int,int) -> a
org.cocos2d.nodes.CCTextureCache -> org.cocos2d.g.s:
    java.util.HashMap textures -> b
    org.cocos2d.nodes.CCTextureCache _sharedTextureCache -> c
    boolean $assertionsDisabled -> a
    org.cocos2d.nodes.CCTextureCache sharedTextureCache() -> a
    void purgeSharedTextureCache() -> b
    org.cocos2d.opengl.CCTexture2D addImage(java.lang.String) -> a
org.cocos2d.nodes.CCTextureCache$2 -> org.cocos2d.g.t:
    java.lang.String val$path -> a
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
org.cocos2d.nodes.CCTileMapAtlas -> org.cocos2d.g.u:
    org.cocos2d.opengl.TGA$ImageTGA tgaInfo -> m
    java.util.HashMap posToAtlasIndex -> o
    int itemsToRender -> p
    boolean $assertionsDisabled -> n
    org.cocos2d.nodes.CCTileMapAtlas tilemap$2f596d34(java.lang.String,java.lang.String) -> a
    void calculateItemsToRender() -> g
    void updateAtlasValues() -> h
    void releaseMap() -> f
    void finalize() -> finalize
org.cocos2d.opengl.CCBitmapFontAtlas -> org.cocos2d.opengl.a:
    org.cocos2d.utils.javolution.TextBuilder string_ -> a
    org.cocos2d.opengl.CCBitmapFontAtlas$CCBitmapFontConfiguration parsed -> b
    org.cocos2d.opengl.CCBitmapFontAtlas$CCBitmapFontConfiguration configuration_ -> c
    int opacity_ -> d
    org.cocos2d.types.ccColor3B color_ -> e
    boolean opacityModifyRGB_ -> f
    java.util.HashMap configurations -> g
    int getOpacity() -> c
    void setOpacity(int) -> a
    org.cocos2d.types.ccColor3B getColor() -> b
    void setColor(org.cocos2d.types.ccColor3B) -> a
    org.cocos2d.opengl.CCBitmapFontAtlas bitmapFontAtlas(java.lang.CharSequence,java.lang.String) -> a
    void createFontChars() -> g
    void setString(java.lang.CharSequence) -> a
    void setAnchorPoint(org.cocos2d.types.CGPoint) -> d
org.cocos2d.opengl.CCBitmapFontAtlas$CCBitmapFontConfiguration -> org.cocos2d.opengl.b:
    org.cocos2d.utils.collections.IntMap bitmapFontArray -> a
    int commonHeight -> b
    java.lang.String atlasName -> c
    org.cocos2d.utils.collections.IntMap kerningDictionary -> d
    boolean $assertionsDisabled -> e
    org.cocos2d.opengl.CCBitmapFontAtlas$CCBitmapFontConfiguration configuration(java.lang.String) -> a
    void parseConfigFile(java.lang.String) -> b
org.cocos2d.opengl.CCBitmapFontAtlas$ccBitmapFontDef -> org.cocos2d.opengl.c:
    int charID -> a
    org.cocos2d.types.CGRect rect -> b
    int xOffset -> c
    int yOffset -> d
    int xAdvance -> e
org.cocos2d.opengl.CCBitmapFontAtlas$tKerningHashElement -> org.cocos2d.opengl.d:
    int key -> a
    int amount -> b
org.cocos2d.opengl.CCCamera -> org.cocos2d.opengl.e:
    float eyeX -> a
    float eyeY -> b
    float eyeZ -> c
    float centerX -> d
    float centerY -> e
    float centerZ -> f
    float upX -> g
    float upY -> h
    float upZ -> i
    boolean dirty -> j
    boolean getDirty() -> a
    java.lang.String toString() -> toString
    void locate(javax.microedition.khronos.opengles.GL10) -> a
    void setEye(float,float,float) -> a
    void getEye(float[],float[],float[]) -> a
    void getCenter(float[],float[],float[]) -> b
    void getUp(float[],float[],float[]) -> c
org.cocos2d.opengl.CCDrawingPrimitives -> org.cocos2d.opengl.f:
    java.nio.FloatBuffer tmpFloatBuf -> a
    java.nio.FloatBuffer getVertices(int) -> a
    void ccDrawPoint(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint) -> a
    void ccDrawPoints$69d35c01(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint[]) -> a
    void ccDrawLine(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    void ccDrawPoly(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint[],int,boolean) -> a
    void ccDrawCircle(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint,float,float,int,boolean) -> a
    void ccDrawQuadBezier$4d47e8b4(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    void ccDrawCubicBezier$1a2fd002(javax.microedition.khronos.opengles.GL10,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
org.cocos2d.opengl.CCGLSurfaceView -> org.cocos2d.opengl.g:
    org.cocos2d.events.CCTouchDispatcher mDispatcher -> b
    org.cocos2d.types.CGSize frame -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
org.cocos2d.opengl.CCRenderTexture -> org.cocos2d.opengl.h:
    int[] fbo_ -> a
    int[] oldFBO_ -> b
    org.cocos2d.opengl.CCTexture2D texture_ -> c
    org.cocos2d.nodes.CCSprite sprite_ -> d
    org.cocos2d.nodes.CCSprite getSprite() -> b
    org.cocos2d.opengl.CCRenderTexture renderTexture(int,int) -> a
    void finalize() -> finalize
    void begin() -> c
    void end() -> e
    void clear$4098370b() -> f
org.cocos2d.opengl.CCRenderTexture$1 -> org.cocos2d.opengl.i:
    org.cocos2d.opengl.CCRenderTexture this$0 -> a
    int val$finPow -> b
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
org.cocos2d.opengl.CCTexture2D -> org.cocos2d.opengl.j:
    boolean premultipliedAlpha -> c
    java.nio.FloatBuffer mVertices -> d
    java.nio.FloatBuffer mCoordinates -> e
    android.graphics.Bitmap mBitmap -> f
    int _name -> g
    org.cocos2d.types.CGSize mContentSize -> h
    int mWidth -> i
    int mHeight -> j
    android.graphics.Bitmap$Config _format -> k
    float _maxS -> l
    float _maxT -> m
    org.cocos2d.types.CCTexParams _texParams -> n
    javax.microedition.khronos.opengles.GL mCreator -> o
    java.util.HashMap typefaces -> p
    android.graphics.Bitmap$Config defaultAlphaPixelFormat_ -> a
    int[] $SWITCH_TABLE$org$cocos2d$nodes$CCLabel$TextAlignment -> q
    boolean $assertionsDisabled -> b
    android.graphics.Bitmap$Config pixelFormat() -> a
    int pixelsWide() -> b
    int pixelsHigh() -> c
    int name() -> d
    float maxS() -> e
    float maxT() -> f
    boolean hasPremultipliedAlpha() -> g
    org.cocos2d.types.CGSize getContentSize() -> h
    void releaseTexture(javax.microedition.khronos.opengles.GL10) -> a
    void finalize() -> finalize
    void setLoader(org.cocos2d.opengl.GLResourceHelper$GLResourceLoader) -> a
    void initWithImage(android.graphics.Bitmap) -> a
    void initWithImage(android.graphics.Bitmap,org.cocos2d.types.CGSize) -> a
    void init$6676fba7(android.graphics.Bitmap,org.cocos2d.types.CGSize) -> b
    void initWithText(java.lang.String,java.lang.String,float,int) -> a
    org.cocos2d.types.CGSize calculateTextSize(java.lang.String,java.lang.String,float) -> a
    int toPow2(int) -> a
    void initWithText(java.lang.String,org.cocos2d.types.CGSize,org.cocos2d.nodes.CCLabel$TextAlignment,java.lang.String,float,int) -> a
    java.util.ArrayList WrapText(android.graphics.Paint,java.lang.String,float) -> a
    void loadTexture(javax.microedition.khronos.opengles.GL10) -> b
    void setTexParameters(org.cocos2d.types.CCTexParams) -> a
    void setTexParameters(int,int,int,int) -> a
    void applyTexParameters(javax.microedition.khronos.opengles.GL10) -> c
    void setAliasTexParameters() -> i
    void setAntiAliasTexParameters() -> j
    javax.microedition.khronos.opengles.GL access$0(org.cocos2d.opengl.CCTexture2D) -> a
    int access$1(org.cocos2d.opengl.CCTexture2D) -> b
    int[] $SWITCH_TABLE$org$cocos2d$nodes$CCLabel$TextAlignment() -> k
    void access$3(org.cocos2d.opengl.CCTexture2D,javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.opengl.CCTexture2D$1 -> org.cocos2d.opengl.k:
    org.cocos2d.opengl.CCTexture2D this$0 -> a
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.opengl.CCTexture2D$2 -> org.cocos2d.opengl.l:
    org.cocos2d.opengl.CCTexture2D this$0 -> a
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.opengl.CCTexture2D$3 -> org.cocos2d.opengl.m:
    org.cocos2d.opengl.CCTexture2D this$0 -> a
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.opengl.CCTextureAtlas -> org.cocos2d.opengl.n:
    int totalQuads_ -> b
    int capacity_ -> c
    org.cocos2d.opengl.CCTexture2D texture_ -> d
    java.nio.FloatBuffer textureCoordinates -> e
    java.nio.FloatBuffer vertexCoordinates -> f
    java.nio.FloatBuffer colors -> g
    java.nio.ShortBuffer indices -> h
    boolean withColorArray_ -> i
    float[] tmpFloatArray -> j
    boolean $assertionsDisabled -> a
    java.nio.FloatBuffer getVertexBuffer() -> a
    int getTotalQuads() -> b
    int capacity() -> c
    org.cocos2d.opengl.CCTexture2D getTexture() -> d
    java.lang.String toString() -> toString
    void initColorArray() -> f
    void initIndices() -> g
    void updateQuad(org.cocos2d.types.ccQuad2,org.cocos2d.types.ccQuad3,int) -> a
    void updateColor(org.cocos2d.types.ccColor4B[],int) -> a
    void insertQuad(java.nio.FloatBuffer,java.nio.FloatBuffer,int) -> a
    void removeQuad(int) -> a
    void removeAllQuads() -> e
    void resizeCapacity(int) -> b
    void drawQuads(javax.microedition.khronos.opengles.GL10) -> a
    void draw(javax.microedition.khronos.opengles.GL10,int) -> a
    void putTexCoords(java.nio.FloatBuffer,int) -> a
    void putVertex(java.nio.FloatBuffer,float[],int) -> a
    void putColor(java.nio.FloatBuffer,org.cocos2d.types.ccColor4B[],int) -> a
    void arraycopyTexture(java.nio.FloatBuffer,int,java.nio.FloatBuffer,int,int) -> a
    void arraycopyVertex(java.nio.FloatBuffer,int,java.nio.FloatBuffer,int,int) -> b
    void arraycopyColor(java.nio.FloatBuffer,int,java.nio.FloatBuffer,int,int) -> c
    void memmoveFloat(java.nio.FloatBuffer,int,java.nio.FloatBuffer,int,int) -> d
    void memcopyFloat(java.nio.FloatBuffer,int,java.nio.FloatBuffer,int,int) -> e
org.cocos2d.opengl.GLResourceHelper -> org.cocos2d.opengl.o:
    org.cocos2d.opengl.GLResourceHelper _sharedResourceHelper -> a
    java.util.concurrent.ConcurrentLinkedQueue taskQueue -> b
    java.util.Map reloadMap -> c
    long glThreadID -> d
    boolean reloadTaskIsInQueue -> e
    boolean inUpdate -> f
    org.cocos2d.opengl.GLResourceHelper sharedHelper() -> a
    void setGlThreadID(long) -> a
    void addLoader(org.cocos2d.opengl.GLResourceHelper$Resource,org.cocos2d.opengl.GLResourceHelper$GLResourceLoader,boolean) -> a
    void reloadResources() -> b
    void perform(org.cocos2d.opengl.GLResourceHelper$GLResorceTask) -> a
    void update(javax.microedition.khronos.opengles.GL10) -> a
    void setInUpdate(boolean) -> a
    java.util.Map access$0(org.cocos2d.opengl.GLResourceHelper) -> a
    void access$1$22e38584(org.cocos2d.opengl.GLResourceHelper) -> b
org.cocos2d.opengl.GLResourceHelper$1 -> org.cocos2d.opengl.p:
    org.cocos2d.opengl.GLResourceHelper this$0 -> a
    org.cocos2d.opengl.GLResourceHelper$GLResourceLoader val$loader -> b
    org.cocos2d.opengl.GLResourceHelper$Resource val$res -> c
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.opengl.GLResourceHelper$2 -> org.cocos2d.opengl.q:
    org.cocos2d.opengl.GLResourceHelper this$0 -> a
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.opengl.GLResourceHelper$GLResorceTask -> org.cocos2d.opengl.r:
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.opengl.GLResourceHelper$GLResourceLoader -> org.cocos2d.opengl.s:
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
org.cocos2d.opengl.GLResourceHelper$Resource -> org.cocos2d.opengl.t:
org.cocos2d.opengl.GLSurfaceView -> org.cocos2d.opengl.GLSurfaceView:
    org.cocos2d.opengl.GLSurfaceView$GLThreadManager sGLThreadManager -> a
    boolean mSizeChanged -> b
    org.cocos2d.opengl.GLSurfaceView$GLThread mGLThread -> c
    org.cocos2d.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> d
    org.cocos2d.opengl.GLSurfaceView$EGLContextFactory mEGLContextFactory -> e
    org.cocos2d.opengl.GLSurfaceView$EGLWindowSurfaceFactory mEGLWindowSurfaceFactory -> f
    org.cocos2d.opengl.GLSurfaceView$GLWrapper mGLWrapper -> g
    int mDebugFlags -> h
    int mEGLContextClientVersion -> i
    void init() -> d
    void setRenderer(org.cocos2d.opengl.GLSurfaceView$Renderer) -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void onPause() -> a
    void onResume() -> b
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
    void onDetachedFromWindow() -> onDetachedFromWindow
    int access$0(org.cocos2d.opengl.GLSurfaceView) -> a
    org.cocos2d.opengl.GLSurfaceView$EGLConfigChooser access$1(org.cocos2d.opengl.GLSurfaceView) -> b
    org.cocos2d.opengl.GLSurfaceView$EGLContextFactory access$2(org.cocos2d.opengl.GLSurfaceView) -> c
    org.cocos2d.opengl.GLSurfaceView$EGLWindowSurfaceFactory access$3(org.cocos2d.opengl.GLSurfaceView) -> d
    org.cocos2d.opengl.GLSurfaceView$GLWrapper access$4(org.cocos2d.opengl.GLSurfaceView) -> e
    int access$5(org.cocos2d.opengl.GLSurfaceView) -> f
    org.cocos2d.opengl.GLSurfaceView$GLThreadManager access$6() -> c
    boolean access$7(org.cocos2d.opengl.GLSurfaceView) -> g
    void access$8(org.cocos2d.opengl.GLSurfaceView,boolean) -> a
org.cocos2d.opengl.GLSurfaceView$BaseConfigChooser -> org.cocos2d.opengl.u:
    int[] mConfigSpec -> a
    org.cocos2d.opengl.GLSurfaceView this$0 -> b
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
org.cocos2d.opengl.GLSurfaceView$ComponentSizeChooser -> org.cocos2d.opengl.v:
    int[] mValue -> j
    int mRedSize -> c
    int mGreenSize -> d
    int mBlueSize -> e
    int mAlphaSize -> f
    int mDepthSize -> g
    int mStencilSize -> h
    org.cocos2d.opengl.GLSurfaceView this$0 -> i
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[]) -> a
    int findConfigAttrib$6739ccb4(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int) -> a
org.cocos2d.opengl.GLSurfaceView$DefaultContextFactory -> org.cocos2d.opengl.w:
    int EGL_CONTEXT_CLIENT_VERSION -> b
    org.cocos2d.opengl.GLSurfaceView this$0 -> a
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
org.cocos2d.opengl.GLSurfaceView$DefaultWindowSurfaceFactory -> org.cocos2d.opengl.x:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
org.cocos2d.opengl.GLSurfaceView$EGLConfigChooser -> org.cocos2d.opengl.y:
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> a
org.cocos2d.opengl.GLSurfaceView$EGLContextFactory -> org.cocos2d.opengl.z:
    javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig) -> a
    void destroyContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLContext) -> a
org.cocos2d.opengl.GLSurfaceView$EGLWindowSurfaceFactory -> org.cocos2d.opengl.aa:
    javax.microedition.khronos.egl.EGLSurface createWindowSurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,java.lang.Object) -> a
    void destroySurface(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLSurface) -> a
org.cocos2d.opengl.GLSurfaceView$EglHelper -> org.cocos2d.opengl.ab:
    javax.microedition.khronos.egl.EGL10 mEgl -> a
    javax.microedition.khronos.egl.EGLDisplay mEglDisplay -> b
    javax.microedition.khronos.egl.EGLSurface mEglSurface -> c
    javax.microedition.khronos.egl.EGLConfig mEglConfig -> d
    javax.microedition.khronos.egl.EGLContext mEglContext -> e
    org.cocos2d.opengl.GLSurfaceView this$0 -> f
    void start() -> a
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    void finish() -> b
    void throwEglException(java.lang.String) -> a
org.cocos2d.opengl.GLSurfaceView$GLThread -> org.cocos2d.opengl.ac:
    boolean mShouldExit -> b
    boolean mExited -> c
    boolean mPaused -> d
    boolean mHasSurface -> e
    boolean mWaitingForSurface -> f
    boolean mHaveEglContext -> g
    boolean mHaveEglSurface -> h
    int mWidth -> i
    int mHeight -> j
    int mRenderMode -> k
    boolean mRequestRender -> l
    boolean mRenderComplete -> m
    java.util.ArrayList mEventQueue -> n
    javax.microedition.khronos.opengles.GL10 mGL -> o
    boolean mHasFocus -> p
    boolean mSafeMode -> q
    org.cocos2d.opengl.GLSurfaceView$Renderer mRenderer -> r
    org.cocos2d.opengl.GLSurfaceView$EglHelper mEglHelper -> s
    org.cocos2d.opengl.GLSurfaceView this$0 -> a
    void run() -> run
    void stopEglLocked() -> f
    void guardedRun() -> g
    void surfaceCreated() -> a
    void surfaceDestroyed() -> b
    void onPause() -> c
    void onResume() -> d
    void onWindowResize(int,int) -> a
    void onWindowFocusChanged(boolean) -> a
    void requestExitAndWait() -> e
    void access$0$6bf2099f(org.cocos2d.opengl.GLSurfaceView$GLThread) -> a
org.cocos2d.opengl.GLSurfaceView$GLThreadManager -> org.cocos2d.opengl.ad:
    boolean mGLESVersionCheckComplete -> a
    int mGLESVersion -> b
    boolean mGLESDriverCheckComplete -> c
    boolean mMultipleGLESContextsAllowed -> d
    org.cocos2d.opengl.GLSurfaceView$GLThread mEglOwner -> e
    void threadExiting(org.cocos2d.opengl.GLSurfaceView$GLThread) -> a
    boolean tryAcquireEglSurfaceLocked(org.cocos2d.opengl.GLSurfaceView$GLThread) -> b
    void releaseEglSurfaceLocked(org.cocos2d.opengl.GLSurfaceView$GLThread) -> c
    void checkGLDriver(javax.microedition.khronos.opengles.GL10) -> a
    void checkGLESVersion() -> a
org.cocos2d.opengl.GLSurfaceView$GLWrapper -> org.cocos2d.opengl.ae:
    javax.microedition.khronos.opengles.GL wrap$40ce139f() -> a
org.cocos2d.opengl.GLSurfaceView$LogWriter -> org.cocos2d.opengl.af:
    java.lang.StringBuilder mBuilder -> a
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
org.cocos2d.opengl.GLSurfaceView$Renderer -> org.cocos2d.opengl.ag:
    void onSurfaceCreated$4a9c201c(javax.microedition.khronos.opengles.GL10) -> a
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> a
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> b
org.cocos2d.opengl.GLSurfaceView$SimpleEGLConfigChooser -> org.cocos2d.opengl.ah:
    org.cocos2d.opengl.GLSurfaceView this$0 -> j
org.cocos2d.opengl.TGA -> org.cocos2d.opengl.ai:
    java.lang.String LOG_TAG -> a
    void loadImageData(java.io.InputStream,org.cocos2d.opengl.TGA$ImageTGA) -> a
    void loadRLEImageData(java.io.InputStream,org.cocos2d.opengl.TGA$ImageTGA) -> b
    void flipImage(org.cocos2d.opengl.TGA$ImageTGA) -> b
    void memcpy(byte[],int,byte[],int,int) -> a
    org.cocos2d.opengl.TGA$ImageTGA load(java.io.InputStream) -> a
    void destroy(org.cocos2d.opengl.TGA$ImageTGA) -> a
org.cocos2d.opengl.TGA$ImageTGA -> org.cocos2d.opengl.aj:
    org.cocos2d.opengl.TGA$TGAError status -> a
    int type -> b
    int pixelDepth -> c
    int width -> d
    int height -> e
    byte[] imageData -> f
    int flipped -> g
org.cocos2d.opengl.TGA$TGAError -> org.cocos2d.opengl.ak:
    org.cocos2d.opengl.TGA$TGAError TGA_OK -> a
    org.cocos2d.opengl.TGA$TGAError TGA_ERROR_FILE_OPEN -> b
    org.cocos2d.opengl.TGA$TGAError TGA_ERROR_READING_FILE -> c
    org.cocos2d.opengl.TGA$TGAError TGA_ERROR_INDEXED_COLOR -> d
    org.cocos2d.opengl.TGA$TGAError TGA_ERROR_MEMORY -> e
    org.cocos2d.opengl.TGA$TGAError TGA_ERROR_COMPRESSED_FILE -> f
    org.cocos2d.opengl.TGA$TGAError[] ENUM$VALUES -> g
    org.cocos2d.opengl.TGA$TGAError[] values() -> values
    org.cocos2d.opengl.TGA$TGAError valueOf(java.lang.String) -> valueOf
org.cocos2d.particlesystem.CCParticleExplosion -> org.cocos2d.h.a:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleFire -> org.cocos2d.h.b:
    org.cocos2d.particlesystem.CCParticleFire node() -> b
org.cocos2d.particlesystem.CCParticleFireworks -> org.cocos2d.h.c:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleFlower -> org.cocos2d.h.d:
    org.cocos2d.particlesystem.CCParticleFlower node() -> b
    org.cocos2d.particlesystem.CCParticleFlower node$791a2f71() -> c
org.cocos2d.particlesystem.CCParticleGalaxy -> org.cocos2d.h.e:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleMeteor -> org.cocos2d.h.f:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleRain -> org.cocos2d.h.g:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleSmoke -> org.cocos2d.h.h:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleSnow -> org.cocos2d.h.i:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleSpiral -> org.cocos2d.h.j:
    org.cocos2d.particlesystem.CCParticleSystem node() -> b
org.cocos2d.particlesystem.CCParticleSun -> org.cocos2d.h.k:
    org.cocos2d.particlesystem.CCParticleSun node() -> b
    org.cocos2d.particlesystem.CCParticleSun node$4e063d22() -> c
org.cocos2d.particlesystem.CCParticleSystem -> org.cocos2d.h.l:
    boolean active -> a
    float duration -> b
    float elapsed -> c
    float startSize -> d
    float startSizeVar -> e
    float endSize -> f
    float endSizeVar -> g
    float startSpin -> h
    float startSpinVar -> i
    float endSpin -> j
    float endSpinVar -> k
    org.cocos2d.types.CGPoint centerOfGravity -> l
    org.cocos2d.types.CGPoint source -> m
    org.cocos2d.types.CGPoint posVar -> n
    float angle -> o
    float angleVar -> p
    float size -> q
    float sizeVar -> r
    float life -> F
    float lifeVar -> G
    org.cocos2d.types.ccColor4F startColor -> H
    org.cocos2d.types.ccColor4F startColorVar -> I
    org.cocos2d.types.ccColor4F endColor -> J
    org.cocos2d.types.ccColor4F endColorVar -> K
    org.cocos2d.types.ccBlendFunc blendFunc -> L
    boolean autoRemoveOnFinish_ -> M
    org.cocos2d.particlesystem.CCParticleSystem$CCParticle[] particles -> N
    int totalParticles -> O
    int particleCount -> P
    float emissionRate -> Q
    float emitCounter -> R
    org.cocos2d.opengl.CCTexture2D texture -> S
    int emitterMode -> T
    org.cocos2d.particlesystem.CCParticleSystem$ModeA modeA -> U
    org.cocos2d.particlesystem.CCParticleSystem$ModeB modeB -> V
    int verticesID -> W
    int particleIdx -> X
    int positionType_ -> Z
    boolean $assertionsDisabled -> Y
    void setStartSize(float) -> g
    void setStartSizeVar(float) -> h
    void setEndSize(float) -> i
    void setEndSizeVar$133aeb() -> e
    void setStartSpin(float) -> j
    void setStartSpinVar$133aeb() -> f
    void setEndSpin$133aeb() -> g
    void setEndSpinVar(float) -> k
    org.cocos2d.types.CGPoint getCenterOfGravity() -> h
    void setPosVar(org.cocos2d.types.CGPoint) -> a
    void setAngle(float) -> l
    void setAngleVar(float) -> m
    void setLifeVar(float) -> n
    void setStartColor(org.cocos2d.types.ccColor4F) -> a
    org.cocos2d.types.ccColor4F getStartColor() -> i
    void setStartColorVar(org.cocos2d.types.ccColor4F) -> b
    org.cocos2d.types.ccColor4F getStartColorVar() -> j
    void setEndColor(org.cocos2d.types.ccColor4F) -> c
    void setEndColorVar(org.cocos2d.types.ccColor4F) -> d
    int getTotalParticles() -> k
    void setEmissionRate(float) -> o
    void setEmitterMode(int) -> a
    void setAutoRemoveOnFinish$1385ff() -> l
    void setTangentialAccel(float) -> p
    void setTangentialAccelVar(float) -> q
    void setRadialAccel(float) -> r
    void setRadialAccelVar(float) -> s
    void setGravity(org.cocos2d.types.CGPoint) -> b
    void setSpeed(float) -> t
    void setSpeedVar(float) -> u
    void setStartRadius(float) -> v
    void setStartRadiusVar$133aeb() -> m
    void setEndRadius(float) -> w
    void setEndRadiusVar$133aeb() -> n
    boolean getActive() -> o
    int getParticleCount() -> R
    void setRotatePerSecond(float) -> x
    void setRotatePerSecondVar$133aeb() -> S
    void setDuration$133aeb() -> T
    float getLife() -> U
    void setLife(float) -> y
    void setPositionType$13462e() -> V
    void setTexture(org.cocos2d.opengl.CCTexture2D) -> a
    void stopSystem() -> W
    void resetSystem() -> X
    void update(float) -> a
    void updateQuad(org.cocos2d.particlesystem.CCParticleSystem$CCParticle,org.cocos2d.types.CGPoint) -> a
    void postStep() -> Y
    void setBlendAdditive(boolean) -> a
org.cocos2d.particlesystem.CCParticleSystem$CCParticle -> org.cocos2d.h.m:
    org.cocos2d.types.CGPoint pos -> a
    org.cocos2d.types.CGPoint startPos -> b
    org.cocos2d.types.ccColor4F color -> c
    org.cocos2d.types.ccColor4F deltaColor -> d
    float size -> e
    float deltaSize -> f
    float rotation -> g
    float deltaRotation -> h
    float timeToLive -> i
    org.cocos2d.particlesystem.CCParticleSystem$CCParticle$ParticleModeA modeA -> j
    org.cocos2d.particlesystem.CCParticleSystem$CCParticle$ParticleModeB modeB -> k
org.cocos2d.particlesystem.CCParticleSystem$CCParticle$ParticleModeA -> org.cocos2d.h.n:
    org.cocos2d.types.CGPoint dir -> a
    float radialAccel -> b
    float tangentialAccel -> c
org.cocos2d.particlesystem.CCParticleSystem$CCParticle$ParticleModeB -> org.cocos2d.h.o:
    float angle -> a
    float degreesPerSecond -> b
    float radius -> c
    float deltaRadius -> d
org.cocos2d.particlesystem.CCParticleSystem$ModeA -> org.cocos2d.h.p:
    org.cocos2d.types.CGPoint gravity -> a
    float speed -> b
    float speedVar -> c
    float tangentialAccel -> d
    float tangentialAccelVar -> e
    float radialAccel -> f
    float radialAccelVar -> g
    org.cocos2d.particlesystem.CCParticleSystem this$0 -> h
org.cocos2d.particlesystem.CCParticleSystem$ModeB -> org.cocos2d.h.q:
    float startRadius -> a
    float startRadiusVar -> b
    float endRadius -> c
    float endRadiusVar -> d
    float rotatePerSecond -> e
    float rotatePerSecondVar -> f
    org.cocos2d.particlesystem.CCParticleSystem this$0 -> g
org.cocos2d.particlesystem.CCPointParticleSystem -> org.cocos2d.h.r:
    java.nio.FloatBuffer vertices -> Z
    java.nio.FloatBuffer sizeBuffer -> aa
    int[] verticesID -> ab
    boolean $assertionsDisabled -> ac
    void finalize() -> finalize
    void updateQuad(org.cocos2d.particlesystem.CCParticleSystem$CCParticle,org.cocos2d.types.CGPoint) -> a
    void postStep() -> Y
    void setStartSpin(float) -> j
    void setStartSpinVar$133aeb() -> f
    void setEndSpin$133aeb() -> g
    void setEndSpinVar(float) -> k
    void setStartSize(float) -> g
    void setEndSize(float) -> i
org.cocos2d.particlesystem.CCQuadParticleSystem -> org.cocos2d.h.s:
    java.nio.ByteBuffer texCoords -> Z
    java.nio.ByteBuffer vertices -> aa
    java.nio.ByteBuffer colors -> ab
    int[] quadsIDs -> ac
    float[] tmpArray -> ae
    boolean $assertionsDisabled -> ad
    void finalize() -> finalize
    void setTexture(org.cocos2d.opengl.CCTexture2D) -> a
    void initIndices(java.nio.ByteBuffer) -> a
    void updateQuad(org.cocos2d.particlesystem.CCParticleSystem$CCParticle,org.cocos2d.types.CGPoint) -> a
    void postStep() -> Y
    void draw(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.particlesystem.CCQuadParticleSystem$1 -> org.cocos2d.h.t:
    org.cocos2d.particlesystem.CCQuadParticleSystem this$0 -> a
    void perform(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.particlesystem.CCQuadParticleSystem$QuadParticleLoader -> org.cocos2d.h.u:
    java.lang.ref.WeakReference weakRef -> a
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
org.cocos2d.protocols.CCKeyDelegateProtocol -> org.cocos2d.i.a:
    boolean ccKeyDown(int,android.view.KeyEvent) -> a
    boolean ccKeyUp(int,android.view.KeyEvent) -> b
org.cocos2d.protocols.CCLabelProtocol -> org.cocos2d.i.b:
    void setString(java.lang.CharSequence) -> a
org.cocos2d.protocols.CCRGBAProtocol -> org.cocos2d.i.c:
    void setColor(org.cocos2d.types.ccColor3B) -> a
    org.cocos2d.types.ccColor3B getColor() -> b
    int getOpacity() -> c
    void setOpacity(int) -> a
org.cocos2d.protocols.CCTouchDelegateProtocol -> org.cocos2d.i.d:
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesCancelled(android.view.MotionEvent) -> d
org.cocos2d.sound.SoundEngine -> org.cocos2d.j.a:
    org.cocos2d.utils.collections.IntMap effectsMap -> a
    org.cocos2d.utils.collections.IntMap streamsMap -> b
    org.cocos2d.utils.collections.IntMap soundsMap -> c
    android.media.SoundPool sp -> d
    int lastSndId -> e
    java.lang.Float prevEffectsVolume -> f
    java.lang.Float prevSoundsVolume -> g
    java.lang.Float effectsVolume -> h
    java.lang.Float soundsVolume -> i
    boolean mute -> j
    org.cocos2d.sound.SoundEngine _sharedEngine -> k
    org.cocos2d.sound.SoundEngine sharedEngine() -> a
    void preloadEffect(android.content.Context,int) -> a
    void playEffect(android.content.Context,int) -> b
    void preloadSound(android.content.Context,int) -> c
    void playSound$30483d64(android.content.Context,int) -> d
    void pauseSound() -> b
    void realesAllSounds() -> c
    void realesAllEffects() -> d
org.cocos2d.tests.ActionManagerTest -> org.cocos2d.tests.ActionManagerTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.ActionManagerTest$ActionManagerDemo -> org.cocos2d.tests.a:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionManagerTest$CrashTest -> org.cocos2d.tests.b:
    java.lang.String title() -> b
org.cocos2d.tests.ActionManagerTest$Issue835 -> org.cocos2d.tests.c:
    void onEnter() -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionManagerTest$LogicTest -> org.cocos2d.tests.d:
    java.lang.String title() -> b
org.cocos2d.tests.ActionManagerTest$PauseTest -> org.cocos2d.tests.e:
    void onEnter() -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionManagerTest$RemoveTest -> org.cocos2d.tests.f:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionsTest -> org.cocos2d.tests.ActionsTest:
    java.lang.String LOG_TAG -> c
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> d
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> b
    java.lang.String access$0() -> a
org.cocos2d.tests.ActionsTest$ActionAnimate -> org.cocos2d.tests.g:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionBezier -> org.cocos2d.tests.h:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionBlink -> org.cocos2d.tests.i:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionCallFunc -> org.cocos2d.tests.j:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionCallFuncND -> org.cocos2d.tests.k:
    void onEnter() -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionsTest$ActionDelayTime -> org.cocos2d.tests.l:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionDemo -> org.cocos2d.tests.m:
    org.cocos2d.nodes.CCSprite grossini -> a
    org.cocos2d.nodes.CCSprite tamara -> b
    org.cocos2d.nodes.CCSprite kathia -> c
    void alignSpritesLeft(int) -> a
    void centerSprites(int) -> b
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionsTest$ActionDemo$1 -> org.cocos2d.tests.n:
    org.cocos2d.tests.ActionsTest$ActionDemo this$1 -> a
    android.graphics.Bitmap val$bmpCopy -> b
    void load(org.cocos2d.opengl.GLResourceHelper$Resource) -> a
org.cocos2d.tests.ActionsTest$ActionFade -> org.cocos2d.tests.o:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionFollow -> org.cocos2d.tests.p:
    void onEnter() -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionsTest$ActionJump -> org.cocos2d.tests.q:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionManual -> org.cocos2d.tests.r:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionMove -> org.cocos2d.tests.s:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionOrbit -> org.cocos2d.tests.t:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionProperty -> org.cocos2d.tests.u:
    void onEnter() -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionsTest$ActionRepeat -> org.cocos2d.tests.v:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionRepeatForever -> org.cocos2d.tests.w:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionReverse -> org.cocos2d.tests.x:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionReverseSequence -> org.cocos2d.tests.y:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionReverseSequence2 -> org.cocos2d.tests.z:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionRotate -> org.cocos2d.tests.aa:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionRotateJerk -> org.cocos2d.tests.ab:
    void onEnter() -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionsTest$ActionRotateToRepeat -> org.cocos2d.tests.ac:
    void onEnter() -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.ActionsTest$ActionScale -> org.cocos2d.tests.ad:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionSequence -> org.cocos2d.tests.ae:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionSequence2 -> org.cocos2d.tests.af:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionSpawn -> org.cocos2d.tests.ag:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.ActionsTest$ActionTint -> org.cocos2d.tests.ah:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.AtlasTest -> org.cocos2d.tests.AtlasTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.AtlasTest$Atlas1 -> org.cocos2d.tests.ai:
    org.cocos2d.opengl.CCTextureAtlas textureAtlas -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$Atlas3 -> org.cocos2d.tests.aj:
    float time -> a
    void step(float) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$Atlas3$1 -> org.cocos2d.tests.ak:
    org.cocos2d.tests.AtlasTest$Atlas3 this$1 -> a
    void update(float) -> a
org.cocos2d.tests.AtlasTest$Atlas4 -> org.cocos2d.tests.al:
    float time -> a
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void step(float) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$Atlas4$1 -> org.cocos2d.tests.am:
    org.cocos2d.tests.AtlasTest$Atlas4 this$1 -> a
    void update(float) -> a
org.cocos2d.tests.AtlasTest$Atlas5 -> org.cocos2d.tests.an:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$Atlas6 -> org.cocos2d.tests.ao:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$AtlasBitmapColor -> org.cocos2d.tests.ap:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$AtlasDemo -> org.cocos2d.tests.aq:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$AtlasFastBitmap -> org.cocos2d.tests.ar:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$LabelAtlasColorTest -> org.cocos2d.tests.as:
    float time -> a
    void step(float) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$LabelAtlasColorTest$1 -> org.cocos2d.tests.at:
    org.cocos2d.tests.AtlasTest$LabelAtlasColorTest this$1 -> a
    void update(float) -> a
org.cocos2d.tests.AtlasTest$LabelAtlasTest -> org.cocos2d.tests.au:
    float time -> a
    void step(float) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.AtlasTest$LabelAtlasTest$1 -> org.cocos2d.tests.av:
    org.cocos2d.tests.AtlasTest$LabelAtlasTest this$1 -> a
    void update(float) -> a
org.cocos2d.tests.Box2dTest -> org.cocos2d.tests.Box2dTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.Box2dTest$Box2DTestLayer -> org.cocos2d.tests.aw:
    float FPS -> a
    float rdelta -> f
    com.badlogic.gdx.physics.box2d.World bxWorld -> b
    org.cocos2d.actions.UpdateCallback tickCallback -> g
    float prevX -> c
    float prevY -> d
    com.badlogic.gdx.math.Vector2 gravity -> e
    void onEnter() -> a
    void onExit() -> n_
    void addNewSpriteWithCoords(org.cocos2d.types.CGPoint) -> a
    void tick(float) -> a
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    void ccAccelerometerChanged$483d242b(float,float) -> b
org.cocos2d.tests.Box2dTest$Box2DTestLayer$1 -> org.cocos2d.tests.ax:
    org.cocos2d.tests.Box2dTest$Box2DTestLayer this$1 -> a
    void update(float) -> a
org.cocos2d.tests.ClickAndMoveTest -> org.cocos2d.tests.ClickAndMoveTest:
    org.cocos2d.tests.ClickAndMoveTest app -> a
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.ClickAndMoveTest$MainLayer -> org.cocos2d.tests.ay:
    org.cocos2d.actions.CCProgressTimer progressTimer -> a
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
org.cocos2d.tests.CocosNodeTest -> org.cocos2d.tests.CocosNodeTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.CocosNodeTest$CameraCenterTest -> org.cocos2d.tests.az:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.CocosNodeTest$CameraOrbitTest -> org.cocos2d.tests.ba:
    void onEnter() -> a
    void onExit() -> n_
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$CameraZoomTest -> org.cocos2d.tests.bb:
    float z -> a
    void onEnter() -> a
    void onExit() -> n_
    void updateEye(float) -> a
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$CameraZoomTest$1 -> org.cocos2d.tests.bc:
    org.cocos2d.tests.CocosNodeTest$CameraZoomTest this$1 -> a
    void update(float) -> a
org.cocos2d.tests.CocosNodeTest$CustomNode -> org.cocos2d.tests.bd:
org.cocos2d.tests.CocosNodeTest$NodeToWorld -> org.cocos2d.tests.be:
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$SchedulerTest1 -> org.cocos2d.tests.bf:
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$StressTest1 -> org.cocos2d.tests.bg:
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$StressTest2 -> org.cocos2d.tests.bh:
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$Test2 -> org.cocos2d.tests.bi:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$Test4 -> org.cocos2d.tests.bj:
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$Test5 -> org.cocos2d.tests.bk:
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$Test6 -> org.cocos2d.tests.bl:
    java.lang.String title() -> b
org.cocos2d.tests.CocosNodeTest$TestDemo -> org.cocos2d.tests.bm:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.DrawPrimitivesTest -> org.cocos2d.tests.DrawPrimitivesTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.DrawPrimitivesTest$Test1 -> org.cocos2d.tests.bn:
    void draw(javax.microedition.khronos.opengles.GL10) -> a
org.cocos2d.tests.DrawPrimitivesTest$TestDemo -> org.cocos2d.tests.bo:
org.cocos2d.tests.EaseActionsTest -> org.cocos2d.tests.EaseActionsTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.EaseActionsTest$SpeedTest -> org.cocos2d.tests.bp:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteDemo -> org.cocos2d.tests.bq:
    org.cocos2d.nodes.CCSprite grossini -> a
    org.cocos2d.nodes.CCSprite tamara -> b
    org.cocos2d.nodes.CCSprite kathia -> c
    void positionForTwo() -> c
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEase -> org.cocos2d.tests.br:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseBack -> org.cocos2d.tests.bs:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseBackInOut -> org.cocos2d.tests.bt:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseBounce -> org.cocos2d.tests.bu:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseBounceInOut -> org.cocos2d.tests.bv:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseElastic -> org.cocos2d.tests.bw:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseElasticInOut -> org.cocos2d.tests.bx:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseExponential -> org.cocos2d.tests.by:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseExponentialInOut -> org.cocos2d.tests.bz:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseInOut -> org.cocos2d.tests.ca:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseSine -> org.cocos2d.tests.cb:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EaseActionsTest$SpriteEaseSineInOut -> org.cocos2d.tests.cc:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EffectsAdvancedTest -> org.cocos2d.tests.EffectsAdvancedTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.EffectsAdvancedTest$Effect1 -> org.cocos2d.tests.cd:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EffectsAdvancedTest$Effect2 -> org.cocos2d.tests.ce:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EffectsAdvancedTest$Effect3 -> org.cocos2d.tests.cf:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EffectsAdvancedTest$Effect4 -> org.cocos2d.tests.cg:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EffectsAdvancedTest$Effect5 -> org.cocos2d.tests.ch:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.EffectsAdvancedTest$Issue631 -> org.cocos2d.tests.ci:
    void onEnter() -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.EffectsAdvancedTest$TextLayer -> org.cocos2d.tests.cj:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.EffectsTest -> org.cocos2d.tests.EffectsTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> d
    int actionIdx -> a
    java.lang.Class[] actionList -> b
    java.lang.String[] effectsList -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    java.lang.Class restartAction() -> a
org.cocos2d.tests.EffectsTest$FadeOutBLTilesDemo -> org.cocos2d.tests.ck:
org.cocos2d.tests.EffectsTest$FadeOutDownTilesDemo -> org.cocos2d.tests.cl:
org.cocos2d.tests.EffectsTest$FadeOutTRTilesDemo -> org.cocos2d.tests.cm:
org.cocos2d.tests.EffectsTest$FadeOutUpTilesDemo -> org.cocos2d.tests.cn:
org.cocos2d.tests.EffectsTest$FlipX3DDemo -> org.cocos2d.tests.co:
org.cocos2d.tests.EffectsTest$FlipY3DDemo -> org.cocos2d.tests.cp:
org.cocos2d.tests.EffectsTest$JumpTiles3DDemo -> org.cocos2d.tests.cq:
org.cocos2d.tests.EffectsTest$Lens3DDemo -> org.cocos2d.tests.cr:
org.cocos2d.tests.EffectsTest$LiquidDemo -> org.cocos2d.tests.cs:
org.cocos2d.tests.EffectsTest$PageTurn3DDemo -> org.cocos2d.tests.ct:
org.cocos2d.tests.EffectsTest$Ripple3DDemo -> org.cocos2d.tests.cu:
org.cocos2d.tests.EffectsTest$Shaky3DDemo -> org.cocos2d.tests.cv:
org.cocos2d.tests.EffectsTest$ShakyTiles3DDemo -> org.cocos2d.tests.cw:
org.cocos2d.tests.EffectsTest$ShatteredTiles3DDemo -> org.cocos2d.tests.cx:
org.cocos2d.tests.EffectsTest$ShuffleTilesDemo -> org.cocos2d.tests.cy:
org.cocos2d.tests.EffectsTest$SplitColsDemo -> org.cocos2d.tests.cz:
org.cocos2d.tests.EffectsTest$SplitRowsDemo -> org.cocos2d.tests.da:
org.cocos2d.tests.EffectsTest$TextLayer -> org.cocos2d.tests.db:
    void checkAnim$133aeb() -> e
org.cocos2d.tests.EffectsTest$TextLayer$1 -> org.cocos2d.tests.dc:
    org.cocos2d.tests.EffectsTest$TextLayer this$1 -> a
    void update(float) -> a
org.cocos2d.tests.EffectsTest$TurnOffTilesDemo -> org.cocos2d.tests.dd:
org.cocos2d.tests.EffectsTest$TwirlDemo -> org.cocos2d.tests.de:
org.cocos2d.tests.EffectsTest$Waves3DDemo -> org.cocos2d.tests.df:
org.cocos2d.tests.EffectsTest$WavesDemo -> org.cocos2d.tests.dg:
org.cocos2d.tests.EffectsTest$WavesTiles3DDemo -> org.cocos2d.tests.dh:
org.cocos2d.tests.FontTest -> org.cocos2d.tests.FontTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.FontTest$Layer1 -> org.cocos2d.tests.di:
    org.cocos2d.menus.CCMenuItem disabledItem -> a
org.cocos2d.tests.FontTest$Layer2 -> org.cocos2d.tests.dj:
    org.cocos2d.types.CGPoint centeredMenu -> a
    boolean alignedH -> b
org.cocos2d.tests.FontTest$Layer3 -> org.cocos2d.tests.dk:
    org.cocos2d.menus.CCMenuItem disabledItem -> a
org.cocos2d.tests.FontTest$Layer4 -> org.cocos2d.tests.dl:
org.cocos2d.tests.MenuTest -> org.cocos2d.tests.MenuTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.MenuTest$Layer1 -> org.cocos2d.tests.dm:
    org.cocos2d.menus.CCMenuItem disabledItem -> a
org.cocos2d.tests.MenuTest$Layer2 -> org.cocos2d.tests.dn:
    org.cocos2d.types.CGPoint centeredMenu -> a
    boolean alignedH -> b
org.cocos2d.tests.MenuTest$Layer3 -> org.cocos2d.tests.do:
    org.cocos2d.menus.CCMenuItem disabledItem -> a
org.cocos2d.tests.MenuTest$Layer4 -> org.cocos2d.tests.dp:
org.cocos2d.tests.MotionStreakTest -> org.cocos2d.tests.MotionStreakTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.MotionStreakTest$MotionStreakTestLayer -> org.cocos2d.tests.dq:
    java.lang.String title() -> b
org.cocos2d.tests.MotionStreakTest$Test1 -> org.cocos2d.tests.dr:
    org.cocos2d.nodes.CCNode root -> a
    org.cocos2d.nodes.CCNode target -> b
    org.cocos2d.nodes.CCMotionStreak streak -> c
    void onEnter() -> a
    void onUpdate$133aeb() -> c
    java.lang.String title() -> b
org.cocos2d.tests.MotionStreakTest$Test1$1 -> org.cocos2d.tests.ds:
    org.cocos2d.tests.MotionStreakTest$Test1 this$1 -> a
    void update(float) -> a
org.cocos2d.tests.MotionStreakTest$Test2 -> org.cocos2d.tests.dt:
    org.cocos2d.nodes.CCMotionStreak streak -> a
    void onEnter() -> a
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    java.lang.String title() -> b
org.cocos2d.tests.ParallaxTest -> org.cocos2d.tests.ParallaxTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.ParallaxTest$Parallax1 -> org.cocos2d.tests.du:
    java.lang.String title() -> b
org.cocos2d.tests.ParallaxTest$Parallax2 -> org.cocos2d.tests.dv:
    org.cocos2d.types.CGPoint previousLocation -> a
    void registerWithTouchDispatcher() -> o
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesCancelled(android.view.MotionEvent) -> d
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    java.lang.String title() -> b
org.cocos2d.tests.ParallaxTest$ParallaxDemo -> org.cocos2d.tests.dw:
    java.lang.String title() -> b
org.cocos2d.tests.ParticleTest -> org.cocos2d.tests.ParticleTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.ParticleTest$DemoBigFlower -> org.cocos2d.tests.dx:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoExplosion -> org.cocos2d.tests.dy:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoFire -> org.cocos2d.tests.dz:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoFirework -> org.cocos2d.tests.ea:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoFlower -> org.cocos2d.tests.eb:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoGalaxy -> org.cocos2d.tests.ec:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoMeteor -> org.cocos2d.tests.ed:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoModernArt -> org.cocos2d.tests.ee:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoRain -> org.cocos2d.tests.ef:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoRing -> org.cocos2d.tests.eg:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoRotFlower -> org.cocos2d.tests.eh:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoSmoke -> org.cocos2d.tests.ei:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoSnow -> org.cocos2d.tests.ej:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoSpiral -> org.cocos2d.tests.ek:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$DemoSun -> org.cocos2d.tests.el:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$ParallaxParticle -> org.cocos2d.tests.em:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$ParticleDemo -> org.cocos2d.tests.en:
    org.cocos2d.particlesystem.CCParticleSystem emitter -> d
    org.cocos2d.nodes.CCSprite background -> e
    org.cocos2d.utils.javolution.TextBuilder particleCountString -> f
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    void update(float) -> a
    void setEmitterPosition() -> f
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$RadiusMode1 -> org.cocos2d.tests.eo:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.ParticleTest$RadiusMode2 -> org.cocos2d.tests.ep:
    void onEnter() -> a
    java.lang.String title() -> e
org.cocos2d.tests.RotateWorldTest -> org.cocos2d.tests.RotateWorldTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.RotateWorldTest$MainLayer -> org.cocos2d.tests.eq:
org.cocos2d.tests.RotateWorldTest$SpriteLayer -> org.cocos2d.tests.er:
org.cocos2d.tests.SceneTest -> org.cocos2d.tests.SceneTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.SceneTest$Layer1 -> org.cocos2d.tests.es:
org.cocos2d.tests.SchedulerTest -> org.cocos2d.tests.SchedulerTest:
    java.lang.String LOG_TAG -> a
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> d
    int sceneIdx -> b
    java.lang.Class[] transitions -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.SchedulerTest$SchedulerAutoremove -> org.cocos2d.tests.et:
    float accum -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.SchedulerTest$SchedulerPauseResume -> org.cocos2d.tests.eu:
    void tick1$133aeb() -> e
    void tick2$133aeb() -> f
    void pause$133aeb() -> g
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.SchedulerTest$SchedulerPauseResume$1 -> org.cocos2d.tests.ev:
    org.cocos2d.tests.SchedulerTest$SchedulerPauseResume this$1 -> a
    void update(float) -> a
org.cocos2d.tests.SchedulerTest$SchedulerPauseResume$2 -> org.cocos2d.tests.ew:
    org.cocos2d.tests.SchedulerTest$SchedulerPauseResume this$1 -> a
    void update(float) -> a
org.cocos2d.tests.SchedulerTest$SchedulerPauseResume$3 -> org.cocos2d.tests.ex:
    org.cocos2d.tests.SchedulerTest$SchedulerPauseResume this$1 -> a
    void update(float) -> a
org.cocos2d.tests.SchedulerTest$SchedulerSchedulesAndRemove -> org.cocos2d.tests.ey:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.SchedulerTest$SchedulerTestLayer -> org.cocos2d.tests.ez:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.SchedulerTest$SchedulerUnscheduleAll -> org.cocos2d.tests.fa:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.SchedulerTest$SchedulerUnscheduleAllHard -> org.cocos2d.tests.fb:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.SchedulerTest$SchedulerUpdate -> org.cocos2d.tests.fc:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.SchedulerTest$SchedulerUpdateAndCustom -> org.cocos2d.tests.fd:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
    void update(float) -> a
    void tick(float) -> g
    void stopSelectors$133aeb() -> e
org.cocos2d.tests.SchedulerTest$SchedulerUpdateAndCustom$1 -> org.cocos2d.tests.fe:
    org.cocos2d.tests.SchedulerTest$SchedulerUpdateAndCustom this$1 -> a
    void update(float) -> a
org.cocos2d.tests.SchedulerTest$SchedulerUpdateAndCustom$2 -> org.cocos2d.tests.ff:
    org.cocos2d.tests.SchedulerTest$SchedulerUpdateAndCustom this$1 -> a
    void update(float) -> a
org.cocos2d.tests.SchedulerTest$SchedulerUpdateFromCustom -> org.cocos2d.tests.fg:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
    void update(float) -> a
org.cocos2d.tests.SchedulerTest$TestNode -> org.cocos2d.tests.fh:
    java.lang.String string_ -> a
    void update(float) -> a
org.cocos2d.tests.SoundEngineTest -> org.cocos2d.tests.SoundEngineTest:
    org.cocos2d.tests.SoundEngineTest app -> a
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.SoundEngineTest$MainLayer -> org.cocos2d.tests.fi:
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    void onEnter() -> a
    void onExit() -> n_
org.cocos2d.tests.SpritesTest -> org.cocos2d.tests.SpritesTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    org.cocos2d.layers.CCLayer restartAction() -> a
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.SpritesTest$SpriteAnimate -> org.cocos2d.tests.fj:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteBezier -> org.cocos2d.tests.fk:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteBlink -> org.cocos2d.tests.fl:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteCallFunc -> org.cocos2d.tests.fm:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteDelayTime -> org.cocos2d.tests.fn:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteDemo -> org.cocos2d.tests.fo:
    org.cocos2d.nodes.CCSprite grossini -> a
    org.cocos2d.nodes.CCSprite tamara -> b
    void centerSprites() -> c
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteFade -> org.cocos2d.tests.fp:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteJump -> org.cocos2d.tests.fq:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteManual -> org.cocos2d.tests.fr:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteMove -> org.cocos2d.tests.fs:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteOrbit -> org.cocos2d.tests.ft:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteRepeat -> org.cocos2d.tests.fu:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteReverse -> org.cocos2d.tests.fv:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteReverseSequence -> org.cocos2d.tests.fw:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteReverseSequence2 -> org.cocos2d.tests.fx:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteRotate -> org.cocos2d.tests.fy:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteScale -> org.cocos2d.tests.fz:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteSequence -> org.cocos2d.tests.ga:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteSpawn -> org.cocos2d.tests.gb:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.SpritesTest$SpriteTint -> org.cocos2d.tests.gc:
    void onEnter() -> a
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest -> org.cocos2d.tests.TileMapTest:
    java.lang.String LOG_TAG -> a
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> d
    int sceneIdx -> b
    java.lang.Class[] transitions -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    org.cocos2d.layers.CCLayer restartAction() -> a
org.cocos2d.tests.TileMapTest$TMXHexTest -> org.cocos2d.tests.gd:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXIsoMoveLayer -> org.cocos2d.tests.ge:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXIsoObjectsTest -> org.cocos2d.tests.gf:
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXIsoTest -> org.cocos2d.tests.gg:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXIsoTest1 -> org.cocos2d.tests.gh:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXIsoTest2 -> org.cocos2d.tests.gi:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXIsoVertexZ -> org.cocos2d.tests.gj:
    org.cocos2d.nodes.CCSprite tamara -> a
    void onEnter() -> a
    void onExit() -> n_
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXIsoZorder -> org.cocos2d.tests.gk:
    org.cocos2d.nodes.CCSprite tamara -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXOrthoMoveLayer -> org.cocos2d.tests.gl:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXOrthoObjectsTest -> org.cocos2d.tests.gm:
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXOrthoTest -> org.cocos2d.tests.gn:
    void onEnter() -> a
    void onExit() -> n_
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXOrthoTest2 -> org.cocos2d.tests.go:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXOrthoTest3 -> org.cocos2d.tests.gp:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXOrthoTest4 -> org.cocos2d.tests.gq:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXOrthoVertexZ -> org.cocos2d.tests.gr:
    org.cocos2d.nodes.CCSprite tamara -> a
    void onEnter() -> a
    void onExit() -> n_
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXOrthoZorder -> org.cocos2d.tests.gs:
    org.cocos2d.nodes.CCSprite tamara -> a
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXReadWriteTest -> org.cocos2d.tests.gt:
    int gid -> a
    int gid2 -> b
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXResizeTest -> org.cocos2d.tests.gu:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXTilePropertyTest -> org.cocos2d.tests.gv:
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TMXTilesetTest -> org.cocos2d.tests.gw:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TMXUncompressedTest -> org.cocos2d.tests.gx:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TileDemo -> org.cocos2d.tests.gy:
    void registerWithTouchDispatcher() -> o
    boolean ccTouchesBegan(android.view.MotionEvent) -> c
    boolean ccTouchesEnded(android.view.MotionEvent) -> a
    boolean ccTouchesCancelled(android.view.MotionEvent) -> d
    boolean ccTouchesMoved(android.view.MotionEvent) -> b
    java.lang.String title() -> b
    java.lang.String subtitle() -> c
org.cocos2d.tests.TileMapTest$TileMapEditTest -> org.cocos2d.tests.gz:
    java.lang.String title() -> b
org.cocos2d.tests.TileMapTest$TileMapTest1 -> org.cocos2d.tests.ha:
    java.lang.String title() -> b
org.cocos2d.tests.TransitionsTest -> org.cocos2d.tests.TransitionsTest:
    org.cocos2d.opengl.CCGLSurfaceView mGLSurfaceView -> c
    int sceneIdx -> a
    java.lang.Class[] transitions -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onPause() -> onPause
    void onResume() -> onResume
    void onDestroy() -> onDestroy
org.cocos2d.tests.TransitionsTest$FadeWhiteTransition -> org.cocos2d.tests.hb:
org.cocos2d.tests.TransitionsTest$FlipAngularLeftOver -> org.cocos2d.tests.hc:
org.cocos2d.tests.TransitionsTest$FlipAngularRightOver -> org.cocos2d.tests.hd:
org.cocos2d.tests.TransitionsTest$FlipXLeftOver -> org.cocos2d.tests.he:
org.cocos2d.tests.TransitionsTest$FlipXRightOver -> org.cocos2d.tests.hf:
org.cocos2d.tests.TransitionsTest$FlipYDownOver -> org.cocos2d.tests.hg:
org.cocos2d.tests.TransitionsTest$FlipYUpOver -> org.cocos2d.tests.hh:
org.cocos2d.tests.TransitionsTest$PageTransitionBackward -> org.cocos2d.tests.hi:
org.cocos2d.tests.TransitionsTest$PageTransitionForward -> org.cocos2d.tests.hj:
org.cocos2d.tests.TransitionsTest$TestLayer -> org.cocos2d.tests.hk:
    org.cocos2d.layers.CCScene scene() -> b
    void onEnter() -> a
    void onEnterTransitionDidFinish() -> Q
    void onExit() -> n_
    void finalize() -> finalize
org.cocos2d.tests.TransitionsTest$ZoomFlipAngularLeftOver -> org.cocos2d.tests.hl:
org.cocos2d.tests.TransitionsTest$ZoomFlipAngularRightOver -> org.cocos2d.tests.hm:
org.cocos2d.tests.TransitionsTest$ZoomFlipXLeftOver -> org.cocos2d.tests.hn:
org.cocos2d.tests.TransitionsTest$ZoomFlipXRightOver -> org.cocos2d.tests.ho:
org.cocos2d.tests.TransitionsTest$ZoomFlipYDownOver -> org.cocos2d.tests.hp:
org.cocos2d.tests.TransitionsTest$ZoomFlipYUpOver -> org.cocos2d.tests.hq:
org.cocos2d.transitions.CCCrossFadeTransition -> org.cocos2d.k.a:
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void onEnter() -> a
    void onExit() -> n_
org.cocos2d.transitions.CCFadeBLTransition -> org.cocos2d.k.b:
    org.cocos2d.actions.interval.CCIntervalAction action(org.cocos2d.types.ccGridSize) -> a
org.cocos2d.transitions.CCFadeDownTransition -> org.cocos2d.k.c:
    org.cocos2d.actions.interval.CCIntervalAction action(org.cocos2d.types.ccGridSize) -> a
org.cocos2d.transitions.CCFadeTRTransition -> org.cocos2d.k.d:
    void sceneOrder() -> c
    void onEnter() -> a
    org.cocos2d.actions.interval.CCIntervalAction action(org.cocos2d.types.ccGridSize) -> a
org.cocos2d.transitions.CCFadeTransition -> org.cocos2d.k.e:
    org.cocos2d.types.ccColor4B color -> a
    org.cocos2d.transitions.CCFadeTransition transition(float,org.cocos2d.layers.CCScene) -> a
    void onEnter() -> a
    void onExit() -> n_
org.cocos2d.transitions.CCFadeUpTransition -> org.cocos2d.k.f:
    org.cocos2d.actions.interval.CCIntervalAction action(org.cocos2d.types.ccGridSize) -> a
org.cocos2d.transitions.CCFlipAngularTransition -> org.cocos2d.k.g:
    void onEnter() -> a
org.cocos2d.transitions.CCFlipXTransition -> org.cocos2d.k.h:
    void onEnter() -> a
org.cocos2d.transitions.CCFlipYTransition -> org.cocos2d.k.i:
    void onEnter() -> a
org.cocos2d.transitions.CCJumpZoomTransition -> org.cocos2d.k.j:
    void onEnter() -> a
org.cocos2d.transitions.CCMoveInBTransition -> org.cocos2d.k.k:
    void initScenes() -> e
org.cocos2d.transitions.CCMoveInLTransition -> org.cocos2d.k.l:
    void onEnter() -> a
    void initScenes() -> e
org.cocos2d.transitions.CCMoveInRTransition -> org.cocos2d.k.m:
    void initScenes() -> e
org.cocos2d.transitions.CCMoveInTTransition -> org.cocos2d.k.n:
    void initScenes() -> e
org.cocos2d.transitions.CCOrientedTransitionScene -> org.cocos2d.k.o:
    int orientation -> a
org.cocos2d.transitions.CCPageTurnTransition -> org.cocos2d.k.p:
    boolean back_ -> a
    void sceneOrder() -> c
    void onEnter() -> a
org.cocos2d.transitions.CCRadialCCWTransition -> org.cocos2d.k.q:
    void sceneOrder() -> c
    int radialType() -> e
    void onEnter() -> a
    void onExit() -> n_
org.cocos2d.transitions.CCRadialCWTransition -> org.cocos2d.k.r:
    int radialType() -> e
org.cocos2d.transitions.CCRotoZoomTransition -> org.cocos2d.k.s:
    void onEnter() -> a
org.cocos2d.transitions.CCShrinkGrowTransition -> org.cocos2d.k.t:
    void onEnter() -> a
org.cocos2d.transitions.CCSlideInBTransition -> org.cocos2d.k.u:
    void sceneOrder() -> c
    void initScenes() -> e
    org.cocos2d.actions.interval.CCIntervalAction action() -> f
org.cocos2d.transitions.CCSlideInLTransition -> org.cocos2d.k.v:
    org.cocos2d.transitions.CCSlideInLTransition transition$5e4cf432(org.cocos2d.layers.CCScene) -> a
    void onEnter() -> a
    void sceneOrder() -> c
    void initScenes() -> e
    org.cocos2d.actions.interval.CCIntervalAction action() -> f
org.cocos2d.transitions.CCSlideInRTransition -> org.cocos2d.k.w:
    org.cocos2d.transitions.CCSlideInRTransition transition$302313f8(org.cocos2d.layers.CCScene) -> b
    void sceneOrder() -> c
    void initScenes() -> e
    org.cocos2d.actions.interval.CCIntervalAction action() -> f
org.cocos2d.transitions.CCSlideInTTransition -> org.cocos2d.k.x:
    void sceneOrder() -> c
    void initScenes() -> e
    org.cocos2d.actions.interval.CCIntervalAction action() -> f
org.cocos2d.transitions.CCSplitColsTransition -> org.cocos2d.k.y:
    void onEnter() -> a
    org.cocos2d.actions.interval.CCIntervalAction action() -> e
org.cocos2d.transitions.CCSplitRowsTransition -> org.cocos2d.k.z:
    org.cocos2d.actions.interval.CCIntervalAction action() -> e
org.cocos2d.transitions.CCTransitionScene -> org.cocos2d.k.aa:
    org.cocos2d.layers.CCScene inScene -> b
    org.cocos2d.layers.CCScene outScene -> c
    float duration -> d
    boolean inSceneOnTop -> e
    boolean sendCleanupToScene -> f
    org.cocos2d.actions.UpdateCallback setNewSceneCallback -> a
    boolean $assertionsDisabled -> g
    void sceneOrder() -> c
    void draw(javax.microedition.khronos.opengles.GL10) -> a
    void setNewScene$133aeb() -> g
    void hideOutShowIn() -> h
    void onEnter() -> a
    void onExit() -> n_
    void onEnterTransitionDidFinish() -> Q
    void cleanup() -> P
org.cocos2d.transitions.CCTransitionScene$1 -> org.cocos2d.k.ab:
    org.cocos2d.transitions.CCTransitionScene this$0 -> a
    void update(float) -> a
org.cocos2d.transitions.CCTransitionScene$TransitionWithInvalidSceneException -> org.cocos2d.k.ac:
org.cocos2d.transitions.CCTurnOffTilesTransition -> org.cocos2d.k.ad:
    void sceneOrder() -> c
    void onEnter() -> a
org.cocos2d.transitions.CCZoomFlipAngularTransition -> org.cocos2d.k.ae:
    void onEnter() -> a
org.cocos2d.transitions.CCZoomFlipXTransition -> org.cocos2d.k.af:
    void onEnter() -> a
org.cocos2d.transitions.CCZoomFlipYTransition -> org.cocos2d.k.ag:
    void onEnter() -> a
org.cocos2d.types.CCBezierConfig -> org.cocos2d.l.a:
    org.cocos2d.types.CGPoint endPosition -> a
    org.cocos2d.types.CGPoint controlPoint_1 -> b
    org.cocos2d.types.CGPoint controlPoint_2 -> c
    float bezierAt$2d91bd5b(float,float,float,float) -> a
org.cocos2d.types.CCTexParams -> org.cocos2d.l.b:
    int minFilter -> a
    int magFilter -> b
    int wrapS -> c
    int wrapT -> d
    void set(int,int,int,int) -> a
org.cocos2d.types.CCVertex3D -> org.cocos2d.l.c:
    float x -> a
    float y -> b
    float z -> c
org.cocos2d.types.CGAffineTransform -> org.cocos2d.l.d:
    double m00 -> a
    double m10 -> b
    double m01 -> c
    double m11 -> d
    double m02 -> e
    double m12 -> f
    int type -> g
    org.cocos2d.types.CGAffineTransform identity() -> a
    org.cocos2d.types.CGAffineTransform make$e7e960(double,double) -> a
    double getDeterminant() -> b
    void setTransform(double,double,double,double,double,double) -> a
    void setTransform(org.cocos2d.types.CGAffineTransform) -> a
    void setToIdentity() -> c
    org.cocos2d.types.CGAffineTransform multiply(org.cocos2d.types.CGAffineTransform,org.cocos2d.types.CGAffineTransform) -> a
    org.cocos2d.types.CGAffineTransform getTransformConcat(org.cocos2d.types.CGAffineTransform) -> b
    org.cocos2d.types.CGAffineTransform preConcatenate(org.cocos2d.types.CGAffineTransform) -> c
    org.cocos2d.types.CGPoint applyTransform(org.cocos2d.types.CGPoint) -> a
    void set(double,double,double,double,double,double) -> b
    void translate(double,double) -> b
    void rotate(double) -> a
    void scale(double,double) -> c
    void multiply(org.cocos2d.types.CGAffineTransform) -> d
    java.lang.String toString() -> toString
    java.lang.Object clone() -> clone
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void CGAffineToGL(org.cocos2d.types.CGAffineTransform,float[]) -> a
org.cocos2d.types.CGPoint -> org.cocos2d.l.e:
    float x -> a
    float y -> b
    org.cocos2d.types.CGPoint ZERO_POINT -> c
    org.cocos2d.types.CGPoint getZero() -> a
    org.cocos2d.types.CGPoint zero() -> b
    org.cocos2d.types.CGPoint make(float,float) -> a
    void set(float,float) -> b
    void set(org.cocos2d.types.CGPoint) -> a
    java.lang.String toString() -> toString
    boolean equalToPoint(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    org.cocos2d.types.CGPoint applyAffineTransform(org.cocos2d.types.CGPoint,org.cocos2d.types.CGAffineTransform) -> a
    org.cocos2d.types.CGPoint ccp(float,float) -> c
    org.cocos2d.types.CGPoint ccpNeg(org.cocos2d.types.CGPoint) -> b
    org.cocos2d.types.CGPoint ccpAdd(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> b
    org.cocos2d.types.CGPoint ccpSub(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> c
    org.cocos2d.types.CGPoint ccpMult(org.cocos2d.types.CGPoint,float) -> a
    org.cocos2d.types.CGPoint ccpMidpoint(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> d
    float ccpDot(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> i
    float ccpLength(org.cocos2d.types.CGPoint) -> c
    float ccpDistance(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> e
    org.cocos2d.types.CGPoint ccpNormalize(org.cocos2d.types.CGPoint) -> d
    float ccpToAngle(org.cocos2d.types.CGPoint) -> e
    float ccpCalcRotate(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> f
    org.cocos2d.types.CGPoint ccpLerp$6a72f3f3(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> g
    boolean ccpFuzzyEqual$4edfc451(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> j
    org.cocos2d.types.CGPoint ccpCompMult(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> h
    org.cocos2d.types.CGPoint ccpRotateByAngle(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,float) -> a
    boolean ccpLineIntersect(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
org.cocos2d.types.CGRect -> org.cocos2d.l.f:
    org.cocos2d.types.CGPoint origin -> a
    org.cocos2d.types.CGSize size -> b
    org.cocos2d.types.CGRect ZERO_RECT -> c
    org.cocos2d.types.CGRect sRect -> d
    org.cocos2d.types.CGRect rRect -> e
    org.cocos2d.types.CGRect getZero() -> a
    org.cocos2d.types.CGRect zero() -> b
    org.cocos2d.types.CGRect make(org.cocos2d.types.CGPoint,org.cocos2d.types.CGSize) -> a
    org.cocos2d.types.CGRect make(float,float,float,float) -> a
    org.cocos2d.types.CGRect make(org.cocos2d.types.CGRect) -> a
    void set(float,float,float,float) -> b
    java.lang.String toString() -> toString
    boolean equalToRect(org.cocos2d.types.CGRect,org.cocos2d.types.CGRect) -> a
    boolean containsPoint(org.cocos2d.types.CGRect,org.cocos2d.types.CGPoint) -> a
    float maxX(org.cocos2d.types.CGRect) -> b
    float maxY(org.cocos2d.types.CGRect) -> c
    float midX(org.cocos2d.types.CGRect) -> d
    float midY(org.cocos2d.types.CGRect) -> e
    float minX(org.cocos2d.types.CGRect) -> f
    float minY(org.cocos2d.types.CGRect) -> g
    float width(org.cocos2d.types.CGRect) -> h
    float height(org.cocos2d.types.CGRect) -> i
org.cocos2d.types.CGSize -> org.cocos2d.l.g:
    float width -> a
    float height -> b
    org.cocos2d.types.CGSize ZERO_SIZE -> c
    org.cocos2d.types.CGSize make(float,float) -> a
    org.cocos2d.types.CGSize zero() -> a
    void set(org.cocos2d.types.CGSize) -> a
    void set(float,float) -> b
    float getWidth() -> b
    float getHeight() -> c
    boolean equalToSize(org.cocos2d.types.CGSize,org.cocos2d.types.CGSize) -> a
    java.lang.String toString() -> toString
org.cocos2d.types.HashCode -> org.cocos2d.l.h:
    org.cocos2d.types.HashCode hashCode -> a
    int hashCode() -> hashCode
    org.cocos2d.types.HashCode append$2960ac62() -> a
org.cocos2d.types.ccBlendFunc -> org.cocos2d.l.i:
    int src -> a
    int dst -> b
    java.lang.String toString() -> toString
org.cocos2d.types.ccColor3B -> org.cocos2d.l.j:
    org.cocos2d.types.ccColor3B ccWHITE -> a
    org.cocos2d.types.ccColor3B ccYELLOW -> b
    org.cocos2d.types.ccColor3B ccBLUE -> c
    org.cocos2d.types.ccColor3B ccGREEN -> d
    org.cocos2d.types.ccColor3B ccRED -> e
    org.cocos2d.types.ccColor3B ccMAGENTA -> f
    org.cocos2d.types.ccColor3B ccBLACK -> g
    org.cocos2d.types.ccColor3B ccORANGE -> h
    org.cocos2d.types.ccColor3B ccGRAY -> i
    int r -> j
    int g -> k
    int b -> l
    void set(org.cocos2d.types.ccColor3B) -> a
    org.cocos2d.types.ccColor3B ccc3(int,int,int) -> a
    java.lang.String toString() -> toString
org.cocos2d.types.ccColor4B -> org.cocos2d.l.k:
    int r -> a
    int g -> b
    int b -> c
    int a -> d
    org.cocos2d.types.ccColor4B ccc4(int,int,int,int) -> a
    java.lang.String toString() -> toString
org.cocos2d.types.ccColor4F -> org.cocos2d.l.l:
    float r -> a
    float g -> b
    float b -> c
    float a -> d
    java.lang.String toString() -> toString
org.cocos2d.types.ccGridSize -> org.cocos2d.l.m:
    int x -> a
    int y -> b
    org.cocos2d.types.ccGridSize ccg(int,int) -> a
org.cocos2d.types.ccQuad2 -> org.cocos2d.l.n:
    float tl_x -> a
    float tl_y -> b
    float tr_x -> c
    float tr_y -> d
    float bl_x -> e
    float bl_y -> f
    float br_x -> g
    float br_y -> h
    java.lang.String toString() -> toString
org.cocos2d.types.ccQuad3 -> org.cocos2d.l.o:
    float bl_x -> a
    float bl_y -> b
    float bl_z -> c
    float br_x -> d
    float br_y -> e
    float br_z -> f
    float tl_x -> g
    float tl_y -> h
    float tl_z -> i
    float tr_x -> j
    float tr_y -> k
    float tr_z -> l
    float[] toFloatArray() -> a
    java.lang.String toString() -> toString
org.cocos2d.types.util.CGPointUtil -> org.cocos2d.l.a.a:
    void mult(org.cocos2d.types.CGPoint,float) -> a
    void applyAffineTransform(float,float,org.cocos2d.types.CGAffineTransform,org.cocos2d.types.CGPoint) -> a
    void zero(org.cocos2d.types.CGPoint) -> a
    void add(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
    void sub(org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint,org.cocos2d.types.CGPoint) -> a
org.cocos2d.types.util.PoolHolder -> org.cocos2d.l.a.b:
    java.lang.ThreadLocal instance -> a
    org.cocos2d.utils.pool.ObjectPool objectPool -> b
    org.cocos2d.utils.pool.OneClassPool pointPool -> c
    org.cocos2d.utils.pool.OneClassPool ccQuad2Pool -> d
    org.cocos2d.utils.pool.OneClassPool ccQuad3Pool -> e
    org.cocos2d.utils.pool.OneClassPool rectPool -> f
    org.cocos2d.utils.pool.OneClassPool affineTransformPool -> g
    org.cocos2d.types.util.PoolHolder getInstance() -> a
    org.cocos2d.utils.pool.OneClassPool getCGPointPool() -> b
    org.cocos2d.utils.pool.OneClassPool getccQuad2Pool() -> c
    org.cocos2d.utils.pool.OneClassPool getccQuad3Pool() -> d
    org.cocos2d.utils.pool.OneClassPool getCGRectPool() -> e
    org.cocos2d.utils.pool.OneClassPool getCGAffineTransformPool() -> f
org.cocos2d.types.util.PoolHolder$1 -> org.cocos2d.l.a.c:
    java.lang.Object initialValue() -> initialValue
org.cocos2d.types.util.PoolHolder$2 -> org.cocos2d.l.a.d:
    org.cocos2d.types.util.PoolHolder this$0 -> a
    java.lang.Object allocate() -> a
org.cocos2d.types.util.PoolHolder$3 -> org.cocos2d.l.a.e:
    org.cocos2d.types.util.PoolHolder this$0 -> a
    java.lang.Object allocate() -> a
org.cocos2d.types.util.PoolHolder$4 -> org.cocos2d.l.a.f:
    org.cocos2d.types.util.PoolHolder this$0 -> a
    java.lang.Object allocate() -> a
org.cocos2d.types.util.PoolHolder$5 -> org.cocos2d.l.a.g:
    org.cocos2d.types.util.PoolHolder this$0 -> a
    java.lang.Object allocate() -> a
org.cocos2d.types.util.PoolHolder$6 -> org.cocos2d.l.a.h:
    org.cocos2d.types.util.PoolHolder this$0 -> a
    java.lang.Object allocate() -> a
org.cocos2d.types.util.ccColor4FUtil -> org.cocos2d.l.a.i:
    void copy(org.cocos2d.types.ccColor4F,org.cocos2d.types.ccColor4F) -> a
    void set(org.cocos2d.types.ccColor4F,float,float,float,float) -> a
org.cocos2d.utils.Base64 -> org.cocos2d.m.a:
    byte[] _STANDARD_ALPHABET -> b
    byte[] _STANDARD_DECODABET -> c
    byte[] _URL_SAFE_ALPHABET -> d
    byte[] _URL_SAFE_DECODABET -> e
    byte[] _ORDERED_ALPHABET -> f
    byte[] _ORDERED_DECODABET -> g
    boolean $assertionsDisabled -> a
    byte[] decode$3bcfdf96$7dcc7401(byte[],int) -> a
    byte[] decode(java.lang.String) -> a
    byte[] decode$44bd1c79(java.lang.String) -> b
org.cocos2d.utils.BufferProvider -> org.cocos2d.m.b:
    java.nio.ByteBuffer currentBuffer -> a
    org.cocos2d.utils.BufferProvider global_synced -> b
    java.nio.ByteBuffer allocateDirect(int) -> b
    java.nio.FloatBuffer createFloatBuffer(int) -> a
org.cocos2d.utils.BufferUtils -> org.cocos2d.m.c:
    void copyFloats$3733a745(float[],java.nio.FloatBuffer,int) -> a
org.cocos2d.utils.CCFormatter -> org.cocos2d.m.d:
    java.lang.StringBuilder sb -> a
    java.util.Formatter formatter -> b
    java.lang.String format(java.lang.String,java.lang.Object[]) -> a
    int swapIntToLittleEndian(int) -> a
org.cocos2d.utils.ContentHelper -> org.cocos2d.m.e:
    org.cocos2d.utils.ContentHelper sContentHelper -> a
    org.cocos2d.utils.ContentHelper$StreamProvider mExternalLoader -> b
    org.cocos2d.utils.ContentHelper$StreamProvider mDefaultLoader -> c
    org.cocos2d.utils.ContentHelper sharedHelper() -> a
    java.io.InputStream openInputStream(java.lang.String) -> a
org.cocos2d.utils.ContentHelper$1 -> org.cocos2d.m.f:
    org.cocos2d.utils.ContentHelper this$0 -> a
    java.io.InputStream openStream(java.lang.String) -> a
org.cocos2d.utils.ContentHelper$StreamProvider -> org.cocos2d.m.g:
    java.io.InputStream openStream(java.lang.String) -> a
org.cocos2d.utils.GeometryUtil -> org.cocos2d.m.h:
    org.cocos2d.types.CGPoint CGPointFromString(java.lang.String) -> a
    org.cocos2d.types.CGSize CGSizeFromString(java.lang.String) -> b
    org.cocos2d.types.CGRect CGRectFromString(java.lang.String) -> c
org.cocos2d.utils.PlistParser -> org.cocos2d.m.i:
    java.lang.Object rootDict -> a
    java.lang.String currentKey -> b
    int currentElement -> c
    int currentCollectionType -> d
    java.lang.Object currentCollection -> e
    java.util.ArrayList depthStack -> f
    java.text.SimpleDateFormat dateFormat -> g
    java.lang.StringBuilder characterData -> h
    java.util.HashMap parse(java.lang.String) -> a
    java.lang.Object parsePlist(java.io.InputStream) -> a
    void setupCurrentCollection(java.lang.Object) -> a
    void depthUp(java.lang.Object) -> b
    void addToCollection(java.lang.Object) -> c
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue -> org.cocos2d.m.a.a:
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater tailUpdater -> b
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater -> c
    org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node head -> d
    org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node tail -> e
    org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node freeNode -> a
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater freeNodeUpdater -> f
    boolean casTail(org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node,org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node) -> a
    boolean casNewNode(org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node,org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node) -> b
    void push(java.lang.Object) -> a
    java.lang.Object poll() -> a
org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node -> org.cocos2d.m.a.b:
    java.lang.Object item -> a
    org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node next -> b
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater nextUpdater -> c
    boolean casNext(org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node,org.cocos2d.utils.collections.ConcNodeCachingLinkedQueue$Node) -> a
org.cocos2d.utils.collections.ConcNodeCachingStack -> org.cocos2d.m.a.c:
    org.cocos2d.utils.collections.ConcNodeCachingStack$Node head -> a
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater headUpdater -> c
    org.cocos2d.utils.collections.ConcNodeCachingStack$Node freeNode -> b
    java.util.concurrent.atomic.AtomicReferenceFieldUpdater freeNodeUpdater -> d
    boolean casHead(org.cocos2d.utils.collections.ConcNodeCachingStack$Node,org.cocos2d.utils.collections.ConcNodeCachingStack$Node) -> a
    boolean casNewNode(org.cocos2d.utils.collections.ConcNodeCachingStack$Node,org.cocos2d.utils.collections.ConcNodeCachingStack$Node) -> b
    void push(java.lang.Object) -> a
    java.lang.Object pop() -> a
org.cocos2d.utils.collections.ConcNodeCachingStack$Node -> org.cocos2d.m.a.d:
    java.lang.Object item -> a
    org.cocos2d.utils.collections.ConcNodeCachingStack$Node next -> b
org.cocos2d.utils.collections.ConcurrentArrayHashMap -> org.cocos2d.m.a.e:
    java.util.ArrayList array -> b
    java.util.HashMap map -> c
    org.cocos2d.utils.pool.OneClassPool pool -> a
    void put(java.lang.Object,java.lang.Object) -> a
    java.lang.Object get(java.lang.Object) -> a
    java.lang.Object remove(java.lang.Object) -> b
    org.cocos2d.utils.collections.ConcurrentArrayHashMap$Entry firstValue() -> a
    org.cocos2d.utils.collections.ConcurrentArrayHashMap$Entry nextValue(org.cocos2d.utils.collections.ConcurrentArrayHashMap$Entry) -> a
org.cocos2d.utils.collections.ConcurrentArrayHashMap$1 -> org.cocos2d.m.a.f:
    org.cocos2d.utils.collections.ConcurrentArrayHashMap this$0 -> a
    java.lang.Object allocate() -> a
org.cocos2d.utils.collections.ConcurrentArrayHashMap$Entry -> org.cocos2d.m.a.g:
    java.lang.Object key -> a
    java.lang.Object value -> b
    org.cocos2d.utils.collections.ConcurrentArrayHashMap$Entry next -> c
    org.cocos2d.utils.collections.ConcurrentArrayHashMap this$0 -> d
    java.lang.Object getValue() -> a
org.cocos2d.utils.collections.IntMap -> org.cocos2d.m.a.h:
    org.cocos2d.utils.collections.IntMap$Entry[] table -> a
    float loadFactor -> b
    int size -> c
    int mask -> d
    int capacity -> e
    int threshold -> f
    org.cocos2d.utils.collections.IntMap clone() -> b
    java.lang.Object get(int) -> a
    java.lang.Object put(int,java.lang.Object) -> a
    void clear() -> a
    java.util.Iterator iterator() -> iterator
    java.lang.Object clone() -> clone
    org.cocos2d.utils.collections.IntMap$Entry[] access$1(org.cocos2d.utils.collections.IntMap) -> a
    int access$2(org.cocos2d.utils.collections.IntMap) -> b
org.cocos2d.utils.collections.IntMap$Entry -> org.cocos2d.m.a.i:
    int key -> a
    java.lang.Object value -> b
    org.cocos2d.utils.collections.IntMap$Entry next -> c
    java.lang.Object getValue() -> a
    java.lang.String toString() -> toString
    org.cocos2d.utils.collections.IntMap$Entry clone() -> b
    java.lang.Object clone() -> clone
org.cocos2d.utils.collections.IntMap$IntMapIterator -> org.cocos2d.m.a.j:
    org.cocos2d.utils.collections.IntMap$Entry cur -> b
    int idx -> c
    int el -> d
    org.cocos2d.utils.collections.IntMap this$0 -> a
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.cocos2d.utils.javolution.MathLib -> org.cocos2d.m.b.a:
    java.util.Random RANDOM -> g
    byte[] BIT_LENGTH -> h
    int[] POW5_INT -> i
    double INV_LOG10 -> j
    double[] atanhi -> a
    double[] atanlo -> b
    double[] aT -> c
    double[] halF -> d
    double[] ln2HI -> e
    double[] ln2LO -> f
    double random(double,double) -> a
    int digitLength(int) -> a
    double tan(double) -> a
org.cocos2d.utils.javolution.TextBuilder -> org.cocos2d.m.b.b:
    char[] _low -> a
    char[][] _high -> b
    int _length -> c
    int _capacity -> d
    char[] DIGIT_TO_CHAR -> e
    long[] POW10_LONG -> f
    int length() -> length
    char charAt(int) -> charAt
    void getChars$2d766b3a(int,int,char[]) -> a
    java.lang.CharSequence subSequence(int,int) -> subSequence
    org.cocos2d.utils.javolution.TextBuilder append(char) -> a
    org.cocos2d.utils.javolution.TextBuilder append(java.lang.CharSequence) -> a
    org.cocos2d.utils.javolution.TextBuilder append(java.lang.CharSequence,int,int) -> a
    org.cocos2d.utils.javolution.TextBuilder append(java.lang.String) -> a
    org.cocos2d.utils.javolution.TextBuilder append(int) -> a
    java.lang.String toString() -> toString
    void reset() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    void increaseCapacity() -> b
    java.lang.Appendable append(java.lang.CharSequence,int,int) -> append
    java.lang.Appendable append(java.lang.CharSequence) -> append
    java.lang.Appendable append(char) -> append
org.cocos2d.utils.pool.ConcOneClassPool -> org.cocos2d.m.c.a:
    org.cocos2d.utils.collections.ConcNodeCachingStack objs -> a
    java.lang.Object allocate() -> a
    java.lang.Object get() -> b
    void free(java.lang.Object) -> a
org.cocos2d.utils.pool.ObjectPool -> org.cocos2d.m.c.b:
    java.util.HashMap lists -> a
    org.cocos2d.utils.pool.OneClassPool registerPool(java.lang.Class,org.cocos2d.utils.pool.OneClassPool) -> a
org.cocos2d.utils.pool.OneClassPool -> org.cocos2d.m.c.c:
    java.util.ArrayList objs -> a
    java.lang.Object allocate() -> a
    java.lang.Object get() -> b
    void free(java.lang.Object) -> a
